# Generated from MySQL.g4 by ANTLR 4.6
# encoding: utf-8
from antlr4 import *
from io import StringIO



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3\u02ea")
        buf.write("\u043f\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\3\2\3\2\3\3\3\3")
        buf.write("\5\3\u00ab\n\3\3\3\3\3\5\3\u00af\n\3\3\3\3\3\3\3\3\3\3")
        buf.write("\3\3\3\5\3\u00b7\n\3\5\3\u00b9\n\3\3\3\3\3\5\3\u00bd\n")
        buf.write("\3\3\3\3\3\3\3\5\3\u00c2\n\3\5\3\u00c4\n\3\3\4\3\4\3\4")
        buf.write("\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3")
        buf.write("\4\5\4\u00d7\n\4\3\5\3\5\3\6\3\6\3\7\3\7\3\b\5\b\u00e0")
        buf.write("\n\b\3\b\3\b\3\t\3\t\3\n\3\n\3\13\3\13\3\f\3\f\3\f\3\f")
        buf.write("\3\f\3\f\5\f\u00f0\n\f\3\r\3\r\3\r\3\r\5\r\u00f6\n\r\3")
        buf.write("\16\3\16\3\17\3\17\3\20\3\20\3\21\3\21\3\22\3\22\3\23")
        buf.write("\3\23\3\23\3\23\3\23\5\23\u0107\n\23\3\23\3\23\5\23\u010b")
        buf.write("\n\23\3\23\5\23\u010e\n\23\5\23\u0110\n\23\3\24\3\24\3")
        buf.write("\25\3\25\3\26\3\26\3\27\3\27\3\30\3\30\3\31\5\31\u011d")
        buf.write("\n\31\3\31\3\31\3\32\3\32\3\32\3\32\3\32\3\32\5\32\u0127")
        buf.write("\n\32\3\32\3\32\5\32\u012b\n\32\5\32\u012d\n\32\5\32\u012f")
        buf.write("\n\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\7\32")
        buf.write("\u013a\n\32\f\32\16\32\u013d\13\32\3\33\3\33\3\33\3\33")
        buf.write("\3\33\3\33\3\33\5\33\u0146\n\33\3\33\3\33\3\33\5\33\u014b")
        buf.write("\n\33\3\33\3\33\3\33\5\33\u0150\n\33\3\34\3\34\5\34\u0154")
        buf.write("\n\34\3\34\3\34\3\34\5\34\u0159\n\34\3\34\3\34\5\34\u015d")
        buf.write("\n\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34")
        buf.write("\3\34\3\34\5\34\u016b\n\34\3\34\3\34\3\34\3\34\5\34\u0171")
        buf.write("\n\34\3\34\3\34\5\34\u0175\n\34\3\34\3\34\3\34\3\34\5")
        buf.write("\34\u017b\n\34\3\35\3\35\3\35\3\35\5\35\u0181\n\35\3\35")
        buf.write("\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35")
        buf.write("\3\35\3\35\3\35\3\35\3\35\3\35\7\35\u0195\n\35\f\35\16")
        buf.write("\35\u0198\13\35\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36")
        buf.write("\3\36\3\36\3\36\3\36\3\36\5\36\u01a7\n\36\3\37\3\37\3")
        buf.write("\37\3\37\3\37\7\37\u01ae\n\37\f\37\16\37\u01b1\13\37\5")
        buf.write("\37\u01b3\n\37\3\37\5\37\u01b6\n\37\3\37\3\37\3\37\3\37")
        buf.write("\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37")
        buf.write("\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u01d0")
        buf.write("\n\37\3\37\3\37\3\37\5\37\u01d5\n\37\3 \3 \5 \u01d9\n")
        buf.write(" \3!\3!\3!\3!\3!\3!\6!\u01e1\n!\r!\16!\u01e2\3!\3!\5!")
        buf.write("\u01e7\n!\3!\3!\3\"\3\"\3\"\3\"\3\"\3\"\3\"\6\"\u01f2")
        buf.write("\n\"\r\"\16\"\u01f3\3\"\3\"\5\"\u01f8\n\"\3\"\3\"\3#\3")
        buf.write("#\3#\3#\7#\u0200\n#\f#\16#\u0203\13#\3#\3#\3#\5#\u0208")
        buf.write("\n#\3$\3$\3$\5$\u020d\n$\3$\3$\3$\5$\u0212\n$\3$\3$\3")
        buf.write("%\3%\3%\3%\7%\u021a\n%\f%\16%\u021d\13%\3%\3%\3&\3&\3")
        buf.write("&\3&\3\'\3\'\3\'\7\'\u0228\n\'\f\'\16\'\u022b\13\'\3(")
        buf.write("\3(\3(\5(\u0230\n(\3)\3)\3)\3)\3)\5)\u0237\n)\3)\3)\3")
        buf.write(")\3)\3)\3)\5)\u023f\n)\3)\3)\3)\3)\3)\5)\u0246\n)\3)\3")
        buf.write(")\3)\5)\u024b\n)\3)\3)\3)\3)\3)\3)\5)\u0253\n)\3)\3)\3")
        buf.write(")\3)\5)\u0259\n)\5)\u025b\n)\3)\3)\7)\u025f\n)\f)\16)")
        buf.write("\u0262\13)\3*\3*\5*\u0266\n*\3*\5*\u0269\n*\3*\5*\u026c")
        buf.write("\n*\3*\3*\3*\3*\3*\3*\3*\5*\u0275\n*\3+\3+\3+\7+\u027a")
        buf.write("\n+\f+\16+\u027d\13+\3,\3,\3,\3,\3,\3,\3,\5,\u0286\n,")
        buf.write("\5,\u0288\n,\3-\3-\3-\3-\5-\u028e\n-\3-\3-\3-\3-\3-\3")
        buf.write("-\3-\3-\3-\3-\3-\3-\3-\3-\5-\u029e\n-\3.\3.\3.\7.\u02a3")
        buf.write("\n.\f.\16.\u02a6\13.\3/\3/\3/\3/\3/\3\60\3\60\3\60\7\60")
        buf.write("\u02b0\n\60\f\60\16\60\u02b3\13\60\3\61\3\61\5\61\u02b7")
        buf.write("\n\61\3\61\3\61\5\61\u02bb\n\61\3\62\3\62\3\62\3\62\5")
        buf.write("\62\u02c1\n\62\3\63\3\63\3\63\5\63\u02c6\n\63\3\63\7\63")
        buf.write("\u02c9\n\63\f\63\16\63\u02cc\13\63\3\64\3\64\5\64\u02d0")
        buf.write("\n\64\3\64\5\64\u02d3\n\64\3\64\5\64\u02d6\n\64\3\64\5")
        buf.write("\64\u02d9\n\64\3\64\5\64\u02dc\n\64\3\64\5\64\u02df\n")
        buf.write("\64\3\64\5\64\u02e2\n\64\3\64\5\64\u02e5\n\64\3\64\3\64")
        buf.write("\3\64\3\64\3\64\7\64\u02ec\n\64\f\64\16\64\u02ef\13\64")
        buf.write("\3\64\5\64\u02f2\n\64\3\64\5\64\u02f5\n\64\3\64\5\64\u02f8")
        buf.write("\n\64\3\64\5\64\u02fb\n\64\5\64\u02fd\n\64\3\64\5\64\u0300")
        buf.write("\n\64\3\64\5\64\u0303\n\64\3\64\3\64\3\64\3\64\3\64\3")
        buf.write("\64\5\64\u030b\n\64\3\65\3\65\3\65\3\65\7\65\u0311\n\65")
        buf.write("\f\65\16\65\u0314\13\65\3\66\3\66\3\66\3\66\3\66\7\66")
        buf.write("\u031b\n\66\f\66\16\66\u031e\13\66\3\66\3\66\5\66\u0322")
        buf.write("\n\66\3\67\3\67\3\67\5\67\u0327\n\67\38\38\38\39\39\3")
        buf.write("9\39\39\79\u0331\n9\f9\169\u0334\139\3:\3:\5:\u0338\n")
        buf.write(":\3;\3;\3;\3;\5;\u033e\n;\3;\3;\3;\3;\3;\5;\u0345\n;\3")
        buf.write("<\3<\3=\3=\3>\3>\3>\7>\u034e\n>\f>\16>\u0351\13>\3>\5")
        buf.write(">\u0354\n>\3?\3?\3?\3?\7?\u035a\n?\f?\16?\u035d\13?\3")
        buf.write("?\3?\3@\3@\3@\3@\3A\3A\3A\5A\u0368\nA\3A\3A\3B\3B\3B\3")
        buf.write("B\3B\3B\3B\5B\u0373\nB\5B\u0375\nB\3C\3C\5C\u0379\nC\3")
        buf.write("C\5C\u037c\nC\3C\5C\u037f\nC\3C\3C\3C\5C\u0384\nC\3D\3")
        buf.write("D\3D\5D\u0389\nD\3D\5D\u038c\nD\3D\5D\u038f\nD\3D\5D\u0392")
        buf.write("\nD\3E\3E\5E\u0396\nE\3E\3E\3E\5E\u039b\nE\7E\u039d\n")
        buf.write("E\fE\16E\u03a0\13E\3E\3E\3E\5E\u03a5\nE\3F\3F\3F\5F\u03aa")
        buf.write("\nF\3F\3F\3F\5F\u03af\nF\7F\u03b1\nF\fF\16F\u03b4\13F")
        buf.write("\3F\3F\3F\5F\u03b9\nF\3G\3G\3G\5G\u03be\nG\3H\3H\5H\u03c2")
        buf.write("\nH\3H\5H\u03c5\nH\3H\5H\u03c8\nH\3H\3H\5H\u03cc\nH\3")
        buf.write("I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\7I\u03da\nI\fI\16I")
        buf.write("\u03dd\13I\3J\3J\5J\u03e1\nJ\3J\3J\5J\u03e5\nJ\3K\3K\3")
        buf.write("K\3K\7K\u03eb\nK\fK\16K\u03ee\13K\3L\3L\3L\5L\u03f3\n")
        buf.write("L\3L\3L\3L\5L\u03f8\nL\7L\u03fa\nL\fL\16L\u03fd\13L\3")
        buf.write("L\3L\3M\3M\3M\5M\u0404\nM\3N\3N\3N\3N\7N\u040a\nN\fN\16")
        buf.write("N\u040d\13N\3O\3O\3O\3O\5O\u0413\nO\3P\3P\5P\u0417\nP")
        buf.write("\3P\3P\5P\u041b\nP\3Q\3Q\5Q\u041f\nQ\3R\3R\5R\u0423\n")
        buf.write("R\3R\5R\u0426\nR\3R\3R\3R\5R\u042b\nR\3R\5R\u042e\nR\3")
        buf.write("R\5R\u0431\nR\3S\3S\5S\u0435\nS\3S\5S\u0438\nS\3S\3S\3")
        buf.write("S\5S\u043d\nS\3S\2\5\628PT\2\4\6\b\n\f\16\20\22\24\26")
        buf.write("\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\")
        buf.write("^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a")
        buf.write("\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c")
        buf.write("\u009e\u00a0\u00a2\u00a4\2\33\4\2\u02c8\u02cb\u02df\u02e0")
        buf.write("\4\2\u0136\u0136\u02a1\u02a1\n\2\u008c\u0090\u0102\u0105")
        buf.write("\u0186\u0188\u018d\u018d\u01d7\u01d7\u0210\u0211\u02b0")
        buf.write("\u02b0\u02bf\u02c0\3\2\u02d9\u02da\4\2\u02e1\u02e1\u02e4")
        buf.write("\u02e4\4\2\u00d2\u00d2\u027c\u027c\31\2\4\4\6\6\32\32")
        buf.write("\34\35@Aiimnyy\u009c\u009c\u00cc\u00cc\u00dd\u00dd\u0147")
        buf.write("\u0147\u014e\u0150\u0189\u0189\u01c3\u01c3\u01c9\u01ca")
        buf.write("\u01db\u01dc\u0204\u0204\u0220\u0220\u0223\u0223\u023c")
        buf.write("\u023c\u0260\u0260\u027d\u027d(\2\30\30**..EF]^\u00b5")
        buf.write("\u00b5\u00ce\u00ce\u00d7\u00d7\u00d9\u00d9\u00e2\u00e2")
        buf.write("\u00e6\u00e6\u00fe\u00fe\u0117\u0117\u011a\u011a\u013d")
        buf.write("\u013e\u0149\u0149\u014b\u014b\u0158\u015a\u015d\u015d")
        buf.write("\u0182\u0182\u01a5\u01a5\u01b1\u01b1\u01da\u01da\u01f3")
        buf.write("\u01f3\u01f5\u01f5\u01ff\u01ff\u0201\u0201\u0209\u0209")
        buf.write("\u020b\u020b\u022b\u022b\u022e\u022e\u024c\u024c\u0251")
        buf.write("\u0252\u0272\u0272\u027b\u027b\u0289\u0289\u0295\u0295")
        buf.write("\u02b3\u02b3\37\2\t\nkk~~\u0082\u0082\u0086\u008a\u0091")
        buf.write("\u0094\u00d1\u00d1\u00e7\u00e8\u00f1\u00f1\u0102\u0102")
        buf.write("\u0131\u0131\u015e\u015f\u0181\u0181\u0186\u0186\u018d")
        buf.write("\u018e\u01a1\u01a1\u01c0\u01c1\u01d7\u01d7\u020f\u0210")
        buf.write("\u024a\u024a\u0253\u0253\u025a\u025a\u0267\u026d\u0273")
        buf.write("\u0274\u028e\u028e\u029b\u029d\u02b0\u02b2\u02bf\u02bf")
        buf.write("\u02c1\u02c1$\2\13\f&&HHPPRRaa\u0080\u0080\u0083\u0083")
        buf.write("\u0099\u009a\u00a0\u00a1\u00b8\u00b9\u00e3\u00e3\u00f2")
        buf.write("\u00f2\u0108\u0109\u010f\u0110\u0122\u0122\u0124\u0124")
        buf.write("\u0132\u0132\u0149\u0149\u015d\u015d\u0166\u0166\u017a")
        buf.write("\u017a\u0193\u0193\u01a8\u01a8\u01bf\u01bf\u01ec\u01ec")
        buf.write("\u020e\u020e\u021a\u021a\u0226\u0226\u025b\u025b\u0299")
        buf.write("\u0299\u02a2\u02a2\u02a4\u02a4\u02ac\u02ac\16\2!!--//")
        buf.write("\61\61oo\u00f7\u00f7\u0172\u0172\u0184\u0184\u0244\u0247")
        buf.write("\u0254\u0254\u02a5\u02a6\u02aa\u02aa\4\2\u02c7\u02e0\u02e8")
        buf.write("\u02e8\4\2\21\21\24\24\4\2++\u02d9\u02db\5\2\u02c3\u02c4")
        buf.write("\u02d4\u02d4\u02de\u02de\3\2\u02cd\u02ce\5\2\21\21\u00a9")
        buf.write("\u00a9\u02d4\u02d4\4\2||\u0113\u0113\4\2\u013d\u013d\u0201")
        buf.write("\u0201\4\2\u010d\u010d\u012a\u012a\4\2\21\21\u00a9\u00aa")
        buf.write("\4\2\u0233\u0233\u0235\u0235\4\2\27\27\u00a3\u00a3\4\2")
        buf.write("\u00ff\u00ff\u0157\u0157\3\2\u02a3\u02a4\u04b6\2\u00a6")
        buf.write("\3\2\2\2\4\u00c3\3\2\2\2\6\u00d6\3\2\2\2\b\u00d8\3\2\2")
        buf.write("\2\n\u00da\3\2\2\2\f\u00dc\3\2\2\2\16\u00df\3\2\2\2\20")
        buf.write("\u00e3\3\2\2\2\22\u00e5\3\2\2\2\24\u00e7\3\2\2\2\26\u00ef")
        buf.write("\3\2\2\2\30\u00f5\3\2\2\2\32\u00f7\3\2\2\2\34\u00f9\3")
        buf.write("\2\2\2\36\u00fb\3\2\2\2 \u00fd\3\2\2\2\"\u00ff\3\2\2\2")
        buf.write("$\u010f\3\2\2\2&\u0111\3\2\2\2(\u0113\3\2\2\2*\u0115\3")
        buf.write("\2\2\2,\u0117\3\2\2\2.\u0119\3\2\2\2\60\u011c\3\2\2\2")
        buf.write("\62\u012e\3\2\2\2\64\u014f\3\2\2\2\66\u017a\3\2\2\28\u0180")
        buf.write("\3\2\2\2:\u01a6\3\2\2\2<\u01d4\3\2\2\2>\u01d8\3\2\2\2")
        buf.write("@\u01da\3\2\2\2B\u01ea\3\2\2\2D\u01fb\3\2\2\2F\u0211\3")
        buf.write("\2\2\2H\u0215\3\2\2\2J\u0220\3\2\2\2L\u0224\3\2\2\2N\u022f")
        buf.write("\3\2\2\2P\u0231\3\2\2\2R\u0274\3\2\2\2T\u0276\3\2\2\2")
        buf.write("V\u027e\3\2\2\2X\u029d\3\2\2\2Z\u029f\3\2\2\2\\\u02a7")
        buf.write("\3\2\2\2^\u02ac\3\2\2\2`\u02b6\3\2\2\2b\u02c0\3\2\2\2")
        buf.write("d\u02c2\3\2\2\2f\u02cd\3\2\2\2h\u030c\3\2\2\2j\u0315\3")
        buf.write("\2\2\2l\u0326\3\2\2\2n\u0328\3\2\2\2p\u032b\3\2\2\2r\u0335")
        buf.write("\3\2\2\2t\u0344\3\2\2\2v\u0346\3\2\2\2x\u0348\3\2\2\2")
        buf.write("z\u0353\3\2\2\2|\u0355\3\2\2\2~\u0360\3\2\2\2\u0080\u0367")
        buf.write("\3\2\2\2\u0082\u0374\3\2\2\2\u0084\u0376\3\2\2\2\u0086")
        buf.write("\u0385\3\2\2\2\u0088\u0393\3\2\2\2\u008a\u03a6\3\2\2\2")
        buf.write("\u008c\u03bd\3\2\2\2\u008e\u03bf\3\2\2\2\u0090\u03cd\3")
        buf.write("\2\2\2\u0092\u03de\3\2\2\2\u0094\u03e6\3\2\2\2\u0096\u03ef")
        buf.write("\3\2\2\2\u0098\u0400\3\2\2\2\u009a\u0405\3\2\2\2\u009c")
        buf.write("\u040e\3\2\2\2\u009e\u0414\3\2\2\2\u00a0\u041e\3\2\2\2")
        buf.write("\u00a2\u0420\3\2\2\2\u00a4\u0432\3\2\2\2\u00a6\u00a7\t")
        buf.write("\2\2\2\u00a7\3\3\2\2\2\u00a8\u00aa\7+\2\2\u00a9\u00ab")
        buf.write("\7\u02e1\2\2\u00aa\u00a9\3\2\2\2\u00aa\u00ab\3\2\2\2\u00ab")
        buf.write("\u00c4\3\2\2\2\u00ac\u00ae\7E\2\2\u00ad\u00af\7\u02e1")
        buf.write("\2\2\u00ae\u00ad\3\2\2\2\u00ae\u00af\3\2\2\2\u00af\u00c4")
        buf.write("\3\2\2\2\u00b0\u00c4\7\u0089\2\2\u00b1\u00c4\7\u008b\2")
        buf.write("\2\u00b2\u00b8\7\u0097\2\2\u00b3\u00b6\7\u02e1\2\2\u00b4")
        buf.write("\u00b5\7\u02d3\2\2\u00b5\u00b7\7\u02e1\2\2\u00b6\u00b4")
        buf.write("\3\2\2\2\u00b6\u00b7\3\2\2\2\u00b7\u00b9\3\2\2\2\u00b8")
        buf.write("\u00b3\3\2\2\2\u00b8\u00b9\3\2\2\2\u00b9\u00c4\3\2\2\2")
        buf.write("\u00ba\u00bc\7\u0221\2\2\u00bb\u00bd\7\u011c\2\2\u00bc")
        buf.write("\u00bb\3\2\2\2\u00bc\u00bd\3\2\2\2\u00bd\u00c4\3\2\2\2")
        buf.write("\u00be\u00c4\7\u0268\2\2\u00bf\u00c1\7\u0291\2\2\u00c0")
        buf.write("\u00c2\7\u011c\2\2\u00c1\u00c0\3\2\2\2\u00c1\u00c2\3\2")
        buf.write("\2\2\u00c2\u00c4\3\2\2\2\u00c3\u00a8\3\2\2\2\u00c3\u00ac")
        buf.write("\3\2\2\2\u00c3\u00b0\3\2\2\2\u00c3\u00b1\3\2\2\2\u00c3")
        buf.write("\u00b2\3\2\2\2\u00c3\u00ba\3\2\2\2\u00c3\u00be\3\2\2\2")
        buf.write("\u00c3\u00bf\3\2\2\2\u00c4\5\3\2\2\2\u00c5\u00c6\7\u010c")
        buf.write("\2\2\u00c6\u00c7\7\u0197\2\2\u00c7\u00c8\7\u0130\2\2\u00c8")
        buf.write("\u00d7\7\u018a\2\2\u00c9\u00ca\7\u010c\2\2\u00ca\u00cb")
        buf.write("\7\u0197\2\2\u00cb\u00cc\7\u0130\2\2\u00cc\u00cd\7\u018a")
        buf.write("\2\2\u00cd\u00ce\7\u02b7\2\2\u00ce\u00cf\7\u01d8\2\2\u00cf")
        buf.write("\u00d7\7\u00cd\2\2\u00d0\u00d1\7\u010c\2\2\u00d1\u00d2")
        buf.write("\7\65\2\2\u00d2\u00d7\7\u018a\2\2\u00d3\u00d4\7\u02b7")
        buf.write("\2\2\u00d4\u00d5\7\u01d8\2\2\u00d5\u00d7\7\u00cd\2\2\u00d6")
        buf.write("\u00c5\3\2\2\2\u00d6\u00c9\3\2\2\2\u00d6\u00d0\3\2\2\2")
        buf.write("\u00d6\u00d3\3\2\2\2\u00d7\7\3\2\2\2\u00d8\u00d9\t\3\2")
        buf.write("\2\u00d9\t\3\2\2\2\u00da\u00db\t\4\2\2\u00db\13\3\2\2")
        buf.write("\2\u00dc\u00dd\7\u02e5\2\2\u00dd\r\3\2\2\2\u00de\u00e0")
        buf.write("\t\5\2\2\u00df\u00de\3\2\2\2\u00df\u00e0\3\2\2\2\u00e0")
        buf.write("\u00e1\3\2\2\2\u00e1\u00e2\t\6\2\2\u00e2\17\3\2\2\2\u00e3")
        buf.write("\u00e4\7\u02e2\2\2\u00e4\21\3\2\2\2\u00e5\u00e6\t\7\2")
        buf.write("\2\u00e6\23\3\2\2\2\u00e7\u00e8\7\u02e3\2\2\u00e8\25\3")
        buf.write("\2\2\2\u00e9\u00f0\5\f\7\2\u00ea\u00f0\5\16\b\2\u00eb")
        buf.write("\u00f0\5\20\t\2\u00ec\u00f0\5\22\n\2\u00ed\u00f0\5\24")
        buf.write("\13\2\u00ee\u00f0\7\u01a2\2\2\u00ef\u00e9\3\2\2\2\u00ef")
        buf.write("\u00ea\3\2\2\2\u00ef\u00eb\3\2\2\2\u00ef\u00ec\3\2\2\2")
        buf.write("\u00ef\u00ed\3\2\2\2\u00ef\u00ee\3\2\2\2\u00f0\27\3\2")
        buf.write("\2\2\u00f1\u00f6\5\32\16\2\u00f2\u00f6\5\34\17\2\u00f3")
        buf.write("\u00f6\5\36\20\2\u00f4\u00f6\5 \21\2\u00f5\u00f1\3\2\2")
        buf.write("\2\u00f5\u00f2\3\2\2\2\u00f5\u00f3\3\2\2\2\u00f5\u00f4")
        buf.write("\3\2\2\2\u00f6\31\3\2\2\2\u00f7\u00f8\t\b\2\2\u00f8\33")
        buf.write("\3\2\2\2\u00f9\u00fa\t\t\2\2\u00fa\35\3\2\2\2\u00fb\u00fc")
        buf.write("\t\n\2\2\u00fc\37\3\2\2\2\u00fd\u00fe\t\13\2\2\u00fe!")
        buf.write("\3\2\2\2\u00ff\u0100\t\f\2\2\u0100#\3\2\2\2\u0101\u0110")
        buf.write("\7\u02e6\2\2\u0102\u0103\7\3\2\2\u0103\u0104\7\u02e6\2")
        buf.write("\2\u0104\u0110\7\3\2\2\u0105\u0107\7\u02e6\2\2\u0106\u0105")
        buf.write("\3\2\2\2\u0106\u0107\3\2\2\2\u0107\u0108\3\2\2\2\u0108")
        buf.write("\u010d\n\r\2\2\u0109\u010b\7\u02e6\2\2\u010a\u0109\3\2")
        buf.write("\2\2\u010a\u010b\3\2\2\2\u010b\u010c\3\2\2\2\u010c\u010e")
        buf.write("\n\r\2\2\u010d\u010a\3\2\2\2\u010d\u010e\3\2\2\2\u010e")
        buf.write("\u0110\3\2\2\2\u010f\u0101\3\2\2\2\u010f\u0102\3\2\2\2")
        buf.write("\u010f\u0106\3\2\2\2\u0110%\3\2\2\2\u0111\u0112\5$\23")
        buf.write("\2\u0112\'\3\2\2\2\u0113\u0114\5$\23\2\u0114)\3\2\2\2")
        buf.write("\u0115\u0116\5$\23\2\u0116+\3\2\2\2\u0117\u0118\5$\23")
        buf.write("\2\u0118-\3\2\2\2\u0119\u011a\5$\23\2\u011a/\3\2\2\2\u011b")
        buf.write("\u011d\7\26\2\2\u011c\u011b\3\2\2\2\u011c\u011d\3\2\2")
        buf.write("\2\u011d\u011e\3\2\2\2\u011e\u011f\5$\23\2\u011f\61\3")
        buf.write("\2\2\2\u0120\u0121\b\32\1\2\u0121\u0122\7\u01a0\2\2\u0122")
        buf.write("\u012f\5\62\32\4\u0123\u012c\5\64\33\2\u0124\u0126\7\u0123")
        buf.write("\2\2\u0125\u0127\7\u01a0\2\2\u0126\u0125\3\2\2\2\u0126")
        buf.write("\u0127\3\2\2\2\u0127\u012a\3\2\2\2\u0128\u012b\5\22\n")
        buf.write("\2\u0129\u012b\7\u01a2\2\2\u012a\u0128\3\2\2\2\u012a\u0129")
        buf.write("\3\2\2\2\u012b\u012d\3\2\2\2\u012c\u0124\3\2\2\2\u012c")
        buf.write("\u012d\3\2\2\2\u012d\u012f\3\2\2\2\u012e\u0120\3\2\2\2")
        buf.write("\u012e\u0123\3\2\2\2\u012f\u013b\3\2\2\2\u0130\u0131\f")
        buf.write("\7\2\2\u0131\u0132\7\u02c6\2\2\u0132\u013a\5\62\32\b\u0133")
        buf.write("\u0134\f\6\2\2\u0134\u0135\7\u02be\2\2\u0135\u013a\5\62")
        buf.write("\32\7\u0136\u0137\f\5\2\2\u0137\u0138\7\u02c5\2\2\u0138")
        buf.write("\u013a\5\62\32\6\u0139\u0130\3\2\2\2\u0139\u0133\3\2\2")
        buf.write("\2\u0139\u0136\3\2\2\2\u013a\u013d\3\2\2\2\u013b\u0139")
        buf.write("\3\2\2\2\u013b\u013c\3\2\2\2\u013c\63\3\2\2\2\u013d\u013b")
        buf.write("\3\2\2\2\u013e\u013f\5\66\34\2\u013f\u0140\5\2\2\2\u0140")
        buf.write("\u0141\5\66\34\2\u0141\u0150\3\2\2\2\u0142\u0143\5\66")
        buf.write("\34\2\u0143\u0145\5\2\2\2\u0144\u0146\t\16\2\2\u0145\u0144")
        buf.write("\3\2\2\2\u0145\u0146\3\2\2\2\u0146\u0147\3\2\2\2\u0147")
        buf.write("\u0148\5~@\2\u0148\u0150\3\2\2\2\u0149\u014b\7\u01a0\2")
        buf.write("\2\u014a\u0149\3\2\2\2\u014a\u014b\3\2\2\2\u014b\u014c")
        buf.write("\3\2\2\2\u014c\u014d\7\u00ca\2\2\u014d\u0150\5~@\2\u014e")
        buf.write("\u0150\5\66\34\2\u014f\u013e\3\2\2\2\u014f\u0142\3\2\2")
        buf.write("\2\u014f\u014a\3\2\2\2\u014f\u014e\3\2\2\2\u0150\65\3")
        buf.write("\2\2\2\u0151\u0153\58\35\2\u0152\u0154\7\u01a0\2\2\u0153")
        buf.write("\u0152\3\2\2\2\u0153\u0154\3\2\2\2\u0154\u0155\3\2\2\2")
        buf.write("\u0155\u0158\7\u010c\2\2\u0156\u0159\5~@\2\u0157\u0159")
        buf.write("\5H%\2\u0158\u0156\3\2\2\2\u0158\u0157\3\2\2\2\u0159\u017b")
        buf.write("\3\2\2\2\u015a\u015c\58\35\2\u015b\u015d\7\u01a0\2\2\u015c")
        buf.write("\u015b\3\2\2\2\u015c\u015d\3\2\2\2\u015d\u015e\3\2\2\2")
        buf.write("\u015e\u015f\7\'\2\2\u015f\u0160\58\35\2\u0160\u0161\7")
        buf.write("\u02c6\2\2\u0161\u0162\5\66\34\2\u0162\u017b\3\2\2\2\u0163")
        buf.write("\u0164\58\35\2\u0164\u0165\7\u022c\2\2\u0165\u0166\7\u0141")
        buf.write("\2\2\u0166\u0167\58\35\2\u0167\u017b\3\2\2\2\u0168\u016a")
        buf.write("\58\35\2\u0169\u016b\7\u01a0\2\2\u016a\u0169\3\2\2\2\u016a")
        buf.write("\u016b\3\2\2\2\u016b\u016c\3\2\2\2\u016c\u016d\7\u0141")
        buf.write("\2\2\u016d\u0170\5:\36\2\u016e\u016f\7\u00c0\2\2\u016f")
        buf.write("\u0171\5:\36\2\u0170\u016e\3\2\2\2\u0170\u0171\3\2\2\2")
        buf.write("\u0171\u017b\3\2\2\2\u0172\u0174\58\35\2\u0173\u0175\7")
        buf.write("\u01a0\2\2\u0174\u0173\3\2\2\2\u0174\u0175\3\2\2\2\u0175")
        buf.write("\u0176\3\2\2\2\u0176\u0177\7\u01e9\2\2\u0177\u0178\58")
        buf.write("\35\2\u0178\u017b\3\2\2\2\u0179\u017b\58\35\2\u017a\u0151")
        buf.write("\3\2\2\2\u017a\u015a\3\2\2\2\u017a\u0163\3\2\2\2\u017a")
        buf.write("\u0168\3\2\2\2\u017a\u0172\3\2\2\2\u017a\u0179\3\2\2\2")
        buf.write("\u017b\67\3\2\2\2\u017c\u017d\b\35\1\2\u017d\u017e\t\17")
        buf.write("\2\2\u017e\u0181\5:\36\2\u017f\u0181\5:\36\2\u0180\u017c")
        buf.write("\3\2\2\2\u0180\u017f\3\2\2\2\u0181\u0196\3\2\2\2\u0182")
        buf.write("\u0183\f\t\2\2\u0183\u0184\t\20\2\2\u0184\u0195\58\35")
        buf.write("\n\u0185\u0186\f\b\2\2\u0186\u0187\t\5\2\2\u0187\u0195")
        buf.write("\58\35\t\u0188\u0189\f\7\2\2\u0189\u018a\t\21\2\2\u018a")
        buf.write("\u0195\58\35\b\u018b\u018c\f\6\2\2\u018c\u018d\7\u02dd")
        buf.write("\2\2\u018d\u0195\58\35\7\u018e\u018f\f\5\2\2\u018f\u0190")
        buf.write("\7\u02dc\2\2\u0190\u0195\58\35\6\u0191\u0192\f\n\2\2\u0192")
        buf.write("\u0193\t\5\2\2\u0193\u0195\5J&\2\u0194\u0182\3\2\2\2\u0194")
        buf.write("\u0185\3\2\2\2\u0194\u0188\3\2\2\2\u0194\u018b\3\2\2\2")
        buf.write("\u0194\u018e\3\2\2\2\u0194\u0191\3\2\2\2\u0195\u0198\3")
        buf.write("\2\2\2\u0196\u0194\3\2\2\2\u0196\u0197\3\2\2\2\u01979")
        buf.write("\3\2\2\2\u0198\u0196\3\2\2\2\u0199\u01a7\5\26\f\2\u019a")
        buf.write("\u01a7\5F$\2\u019b\u01a7\5<\37\2\u019c\u01a7\7\u02e7\2")
        buf.write("\2\u019d\u01a7\5H%\2\u019e\u019f\7\u0207\2\2\u019f\u01a7")
        buf.write("\5H%\2\u01a0\u01a7\5~@\2\u01a1\u01a2\7\u00ca\2\2\u01a2")
        buf.write("\u01a7\5~@\2\u01a3\u01a7\5D#\2\u01a4\u01a7\5> \2\u01a5")
        buf.write("\u01a7\5J&\2\u01a6\u0199\3\2\2\2\u01a6\u019a\3\2\2\2\u01a6")
        buf.write("\u019b\3\2\2\2\u01a6\u019c\3\2\2\2\u01a6\u019d\3\2\2\2")
        buf.write("\u01a6\u019e\3\2\2\2\u01a6\u01a0\3\2\2\2\u01a6\u01a1\3")
        buf.write("\2\2\2\u01a6\u01a3\3\2\2\2\u01a6\u01a4\3\2\2\2\u01a6\u01a5")
        buf.write("\3\2\2\2\u01a7;\3\2\2\2\u01a8\u01b5\5\30\r\2\u01a9\u01b2")
        buf.write("\7\u02d6\2\2\u01aa\u01af\5\62\32\2\u01ab\u01ac\7\u02d3")
        buf.write("\2\2\u01ac\u01ae\5\62\32\2\u01ad\u01ab\3\2\2\2\u01ae\u01b1")
        buf.write("\3\2\2\2\u01af\u01ad\3\2\2\2\u01af\u01b0\3\2\2\2\u01b0")
        buf.write("\u01b3\3\2\2\2\u01b1\u01af\3\2\2\2\u01b2\u01aa\3\2\2\2")
        buf.write("\u01b2\u01b3\3\2\2\2\u01b3\u01b4\3\2\2\2\u01b4\u01b6\7")
        buf.write("\u02d5\2\2\u01b5\u01a9\3\2\2\2\u01b5\u01b6\3\2\2\2\u01b6")
        buf.write("\u01d5\3\2\2\2\u01b7\u01b8\7?\2\2\u01b8\u01b9\7\u02d6")
        buf.write("\2\2\u01b9\u01ba\5\62\32\2\u01ba\u01bb\7\26\2\2\u01bb")
        buf.write("\u01bc\5\4\3\2\u01bc\u01bd\7\u02d5\2\2\u01bd\u01d5\3\2")
        buf.write("\2\2\u01be\u01bf\7j\2\2\u01bf\u01c0\7\u02d6\2\2\u01c0")
        buf.write("\u01c1\5\62\32\2\u01c1\u01c2\7\u02d3\2\2\u01c2\u01c3\5")
        buf.write("\4\3\2\u01c3\u01c4\7\u02d5\2\2\u01c4\u01d5\3\2\2\2\u01c5")
        buf.write("\u01c6\7j\2\2\u01c6\u01c7\7\u02d6\2\2\u01c7\u01c8\5\62")
        buf.write("\32\2\u01c8\u01c9\7\u029a\2\2\u01c9\u01ca\5\b\5\2\u01ca")
        buf.write("\u01cb\7\u02d5\2\2\u01cb\u01d5\3\2\2\2\u01cc\u01cd\5\"")
        buf.write("\22\2\u01cd\u01cf\7\u02d6\2\2\u01ce\u01d0\t\22\2\2\u01cf")
        buf.write("\u01ce\3\2\2\2\u01cf\u01d0\3\2\2\2\u01d0\u01d1\3\2\2\2")
        buf.write("\u01d1\u01d2\58\35\2\u01d2\u01d3\7\u02d5\2\2\u01d3\u01d5")
        buf.write("\3\2\2\2\u01d4\u01a8\3\2\2\2\u01d4\u01b7\3\2\2\2\u01d4")
        buf.write("\u01be\3\2\2\2\u01d4\u01c5\3\2\2\2\u01d4\u01cc\3\2\2\2")
        buf.write("\u01d5=\3\2\2\2\u01d6\u01d9\5@!\2\u01d7\u01d9\5B\"\2\u01d8")
        buf.write("\u01d6\3\2\2\2\u01d8\u01d7\3\2\2\2\u01d9?\3\2\2\2\u01da")
        buf.write("\u01e0\7>\2\2\u01db\u01dc\7\u02b4\2\2\u01dc\u01dd\5\62")
        buf.write("\32\2\u01dd\u01de\7\u0266\2\2\u01de\u01df\58\35\2\u01df")
        buf.write("\u01e1\3\2\2\2\u01e0\u01db\3\2\2\2\u01e1\u01e2\3\2\2\2")
        buf.write("\u01e2\u01e0\3\2\2\2\u01e2\u01e3\3\2\2\2\u01e3\u01e6\3")
        buf.write("\2\2\2\u01e4\u01e5\7\u00b3\2\2\u01e5\u01e7\58\35\2\u01e6")
        buf.write("\u01e4\3\2\2\2\u01e6\u01e7\3\2\2\2\u01e7\u01e8\3\2\2\2")
        buf.write("\u01e8\u01e9\7\u00ba\2\2\u01e9A\3\2\2\2\u01ea\u01eb\7")
        buf.write(">\2\2\u01eb\u01f1\58\35\2\u01ec\u01ed\7\u02b4\2\2\u01ed")
        buf.write("\u01ee\58\35\2\u01ee\u01ef\7\u0266\2\2\u01ef\u01f0\58")
        buf.write("\35\2\u01f0\u01f2\3\2\2\2\u01f1\u01ec\3\2\2\2\u01f2\u01f3")
        buf.write("\3\2\2\2\u01f3\u01f1\3\2\2\2\u01f3\u01f4\3\2\2\2\u01f4")
        buf.write("\u01f7\3\2\2\2\u01f5\u01f6\7\u00b3\2\2\u01f6\u01f8\58")
        buf.write("\35\2\u01f7\u01f5\3\2\2\2\u01f7\u01f8\3\2\2\2\u01f8\u01f9")
        buf.write("\3\2\2\2\u01f9\u01fa\7\u00ba\2\2\u01faC\3\2\2\2\u01fb")
        buf.write("\u01fc\7\u0171\2\2\u01fc\u0201\5F$\2\u01fd\u01fe\7\u02d3")
        buf.write("\2\2\u01fe\u0200\5F$\2\u01ff\u01fd\3\2\2\2\u0200\u0203")
        buf.write("\3\2\2\2\u0201\u01ff\3\2\2\2\u0201\u0202\3\2\2\2\u0202")
        buf.write("\u0204\3\2\2\2\u0203\u0201\3\2\2\2\u0204\u0205\7\16\2")
        buf.write("\2\u0205\u0207\5\62\32\2\u0206\u0208\5\6\4\2\u0207\u0206")
        buf.write("\3\2\2\2\u0207\u0208\3\2\2\2\u0208E\3\2\2\2\u0209\u020a")
        buf.write("\5&\24\2\u020a\u020b\7\u02d2\2\2\u020b\u020d\3\2\2\2\u020c")
        buf.write("\u0209\3\2\2\2\u020c\u020d\3\2\2\2\u020d\u020e\3\2\2\2")
        buf.write("\u020e\u020f\5(\25\2\u020f\u0210\7\u02d2\2\2\u0210\u0212")
        buf.write("\3\2\2\2\u0211\u020c\3\2\2\2\u0211\u0212\3\2\2\2\u0212")
        buf.write("\u0213\3\2\2\2\u0213\u0214\5*\26\2\u0214G\3\2\2\2\u0215")
        buf.write("\u0216\7\u02d6\2\2\u0216\u021b\5\62\32\2\u0217\u0218\7")
        buf.write("\u02d3\2\2\u0218\u021a\5\62\32\2\u0219\u0217\3\2\2\2\u021a")
        buf.write("\u021d\3\2\2\2\u021b\u0219\3\2\2\2\u021b\u021c\3\2\2\2")
        buf.write("\u021c\u021e\3\2\2\2\u021d\u021b\3\2\2\2\u021e\u021f\7")
        buf.write("\u02d5\2\2\u021fI\3\2\2\2\u0220\u0221\7\u011d\2\2\u0221")
        buf.write("\u0222\5\62\32\2\u0222\u0223\5\n\6\2\u0223K\3\2\2\2\u0224")
        buf.write("\u0229\5N(\2\u0225\u0226\7\u02d3\2\2\u0226\u0228\5N(\2")
        buf.write("\u0227\u0225\3\2\2\2\u0228\u022b\3\2\2\2\u0229\u0227\3")
        buf.write("\2\2\2\u0229\u022a\3\2\2\2\u022aM\3\2\2\2\u022b\u0229")
        buf.write("\3\2\2\2\u022c\u0230\5P)\2\u022d\u022e\7\u01a7\2\2\u022e")
        buf.write("\u0230\5P)\2\u022f\u022c\3\2\2\2\u022f\u022d\3\2\2\2\u0230")
        buf.write("O\3\2\2\2\u0231\u0232\b)\1\2\u0232\u0233\5R*\2\u0233\u0260")
        buf.write("\3\2\2\2\u0234\u0236\f\6\2\2\u0235\u0237\t\23\2\2\u0236")
        buf.write("\u0235\3\2\2\2\u0236\u0237\3\2\2\2\u0237\u0238\3\2\2\2")
        buf.write("\u0238\u0239\7\u0128\2\2\u0239\u023e\5R*\2\u023a\u023b")
        buf.write("\7\u01a9\2\2\u023b\u023f\5\62\32\2\u023c\u023d\7\u029a")
        buf.write("\2\2\u023d\u023f\5|?\2\u023e\u023a\3\2\2\2\u023e\u023c")
        buf.write("\3\2\2\2\u023e\u023f\3\2\2\2\u023f\u025f\3\2\2\2\u0240")
        buf.write("\u0241\f\5\2\2\u0241\u0242\7\u024b\2\2\u0242\u0245\5R")
        buf.write("*\2\u0243\u0244\7\u01a9\2\2\u0244\u0246\5\62\32\2\u0245")
        buf.write("\u0243\3\2\2\2\u0245\u0246\3\2\2\2\u0246\u025f\3\2\2\2")
        buf.write("\u0247\u0248\f\4\2\2\u0248\u024a\t\24\2\2\u0249\u024b")
        buf.write("\7\u01b4\2\2\u024a\u0249\3\2\2\2\u024a\u024b\3\2\2\2\u024b")
        buf.write("\u024c\3\2\2\2\u024c\u024d\7\u0128\2\2\u024d\u0252\5P")
        buf.write(")\2\u024e\u024f\7\u01a9\2\2\u024f\u0253\5\62\32\2\u0250")
        buf.write("\u0251\7\u029a\2\2\u0251\u0253\5|?\2\u0252\u024e\3\2\2")
        buf.write("\2\u0252\u0250\3\2\2\2\u0253\u025f\3\2\2\2\u0254\u0255")
        buf.write("\f\3\2\2\u0255\u025a\7\u0197\2\2\u0256\u0258\t\24\2\2")
        buf.write("\u0257\u0259\7\u01b4\2\2\u0258\u0257\3\2\2\2\u0258\u0259")
        buf.write("\3\2\2\2\u0259\u025b\3\2\2\2\u025a\u0256\3\2\2\2\u025a")
        buf.write("\u025b\3\2\2\2\u025b\u025c\3\2\2\2\u025c\u025d\7\u0128")
        buf.write("\2\2\u025d\u025f\5R*\2\u025e\u0234\3\2\2\2\u025e\u0240")
        buf.write("\3\2\2\2\u025e\u0247\3\2\2\2\u025e\u0254\3\2\2\2\u025f")
        buf.write("\u0262\3\2\2\2\u0260\u025e\3\2\2\2\u0260\u0261\3\2\2\2")
        buf.write("\u0261Q\3\2\2\2\u0262\u0260\3\2\2\2\u0263\u0265\5\u0080")
        buf.write("A\2\u0264\u0266\5\\/\2\u0265\u0264\3\2\2\2\u0265\u0266")
        buf.write("\3\2\2\2\u0266\u0268\3\2\2\2\u0267\u0269\5\60\31\2\u0268")
        buf.write("\u0267\3\2\2\2\u0268\u0269\3\2\2\2\u0269\u026b\3\2\2\2")
        buf.write("\u026a\u026c\5T+\2\u026b\u026a\3\2\2\2\u026b\u026c\3\2")
        buf.write("\2\2\u026c\u0275\3\2\2\2\u026d\u026e\5~@\2\u026e\u026f")
        buf.write("\5\60\31\2\u026f\u0275\3\2\2\2\u0270\u0271\7\u02d6\2\2")
        buf.write("\u0271\u0272\5L\'\2\u0272\u0273\7\u02d5\2\2\u0273\u0275")
        buf.write("\3\2\2\2\u0274\u0263\3\2\2\2\u0274\u026d\3\2\2\2\u0274")
        buf.write("\u0270\3\2\2\2\u0275S\3\2\2\2\u0276\u027b\5X-\2\u0277")
        buf.write("\u0278\7\u02d3\2\2\u0278\u027a\5X-\2\u0279\u0277\3\2\2")
        buf.write("\2\u027a\u027d\3\2\2\2\u027b\u0279\3\2\2\2\u027b\u027c")
        buf.write("\3\2\2\2\u027cU\3\2\2\2\u027d\u027b\3\2\2\2\u027e\u0287")
        buf.write("\t\25\2\2\u027f\u0285\7\u00df\2\2\u0280\u0286\7\u0128")
        buf.write("\2\2\u0281\u0282\7\u01b2\2\2\u0282\u0286\78\2\2\u0283")
        buf.write("\u0284\7\u00f8\2\2\u0284\u0286\78\2\2\u0285\u0280\3\2")
        buf.write("\2\2\u0285\u0281\3\2\2\2\u0285\u0283\3\2\2\2\u0286\u0288")
        buf.write("\3\2\2\2\u0287\u027f\3\2\2\2\u0287\u0288\3\2\2\2\u0288")
        buf.write("W\3\2\2\2\u0289\u028a\7\u0298\2\2\u028a\u028b\5V,\2\u028b")
        buf.write("\u028d\7\u02d6\2\2\u028c\u028e\5Z.\2\u028d\u028c\3\2\2")
        buf.write("\2\u028d\u028e\3\2\2\2\u028e\u028f\3\2\2\2\u028f\u0290")
        buf.write("\7\u02d5\2\2\u0290\u029e\3\2\2\2\u0291\u0292\7\u010a\2")
        buf.write("\2\u0292\u0293\5V,\2\u0293\u0294\7\u02d6\2\2\u0294\u0295")
        buf.write("\5Z.\2\u0295\u0296\7\u02d5\2\2\u0296\u029e\3\2\2\2\u0297")
        buf.write("\u0298\7\u00e0\2\2\u0298\u0299\5V,\2\u0299\u029a\7\u02d6")
        buf.write("\2\2\u029a\u029b\5Z.\2\u029b\u029c\7\u02d5\2\2\u029c\u029e")
        buf.write("\3\2\2\2\u029d\u0289\3\2\2\2\u029d\u0291\3\2\2\2\u029d")
        buf.write("\u0297\3\2\2\2\u029eY\3\2\2\2\u029f\u02a4\5,\27\2\u02a0")
        buf.write("\u02a1\7\u02d3\2\2\u02a1\u02a3\5,\27\2\u02a2\u02a0\3\2")
        buf.write("\2\2\u02a3\u02a6\3\2\2\2\u02a4\u02a2\3\2\2\2\u02a4\u02a5")
        buf.write("\3\2\2\2\u02a5[\3\2\2\2\u02a6\u02a4\3\2\2\2\u02a7\u02a8")
        buf.write("\7\u01bc\2\2\u02a8\u02a9\7\u02d6\2\2\u02a9\u02aa\5^\60")
        buf.write("\2\u02aa\u02ab\7\u02d5\2\2\u02ab]\3\2\2\2\u02ac\u02b1")
        buf.write("\5.\30\2\u02ad\u02ae\7\u02d3\2\2\u02ae\u02b0\5.\30\2\u02af")
        buf.write("\u02ad\3\2\2\2\u02b0\u02b3\3\2\2\2\u02b1\u02af\3\2\2\2")
        buf.write("\u02b1\u02b2\3\2\2\2\u02b2_\3\2\2\2\u02b3\u02b1\3\2\2")
        buf.write("\2\u02b4\u02b5\7\u02cd\2\2\u02b5\u02b7\7\u02ce\2\2\u02b6")
        buf.write("\u02b4\3\2\2\2\u02b6\u02b7\3\2\2\2\u02b7\u02b8\3\2\2\2")
        buf.write("\u02b8\u02ba\5b\62\2\u02b9\u02bb\7\u02d0\2\2\u02ba\u02b9")
        buf.write("\3\2\2\2\u02ba\u02bb\3\2\2\2\u02bba\3\2\2\2\u02bc\u02c1")
        buf.write("\5d\63\2\u02bd\u02c1\5\u0084C\2\u02be\u02c1\5\u008cG\2")
        buf.write("\u02bf\u02c1\5\u00a0Q\2\u02c0\u02bc\3\2\2\2\u02c0\u02bd")
        buf.write("\3\2\2\2\u02c0\u02be\3\2\2\2\u02c0\u02bf\3\2\2\2\u02c1")
        buf.write("c\3\2\2\2\u02c2\u02ca\5f\64\2\u02c3\u02c5\7\u028c\2\2")
        buf.write("\u02c4\u02c6\7\21\2\2\u02c5\u02c4\3\2\2\2\u02c5\u02c6")
        buf.write("\3\2\2\2\u02c6\u02c7\3\2\2\2\u02c7\u02c9\5f\64\2\u02c8")
        buf.write("\u02c3\3\2\2\2\u02c9\u02cc\3\2\2\2\u02ca\u02c8\3\2\2\2")
        buf.write("\u02ca\u02cb\3\2\2\2\u02cbe\3\2\2\2\u02cc\u02ca\3\2\2")
        buf.write("\2\u02cd\u02cf\7\u0213\2\2\u02ce\u02d0\t\26\2\2\u02cf")
        buf.write("\u02ce\3\2\2\2\u02cf\u02d0\3\2\2\2\u02d0\u02d2\3\2\2\2")
        buf.write("\u02d1\u02d3\7\u00ff\2\2\u02d2\u02d1\3\2\2\2\u02d2\u02d3")
        buf.write("\3\2\2\2\u02d3\u02d5\3\2\2\2\u02d4\u02d6\7\u024b\2\2\u02d5")
        buf.write("\u02d4\3\2\2\2\u02d5\u02d6\3\2\2\2\u02d6\u02d8\3\2\2\2")
        buf.write("\u02d7\u02d9\7\u0236\2\2\u02d8\u02d7\3\2\2\2\u02d8\u02d9")
        buf.write("\3\2\2\2\u02d9\u02db\3\2\2\2\u02da\u02dc\7\u0231\2\2\u02db")
        buf.write("\u02da\3\2\2\2\u02db\u02dc\3\2\2\2\u02dc\u02de\3\2\2\2")
        buf.write("\u02dd\u02df\7\u0232\2\2\u02de\u02dd\3\2\2\2\u02de\u02df")
        buf.write("\3\2\2\2\u02df\u02e1\3\2\2\2\u02e0\u02e2\t\27\2\2\u02e1")
        buf.write("\u02e0\3\2\2\2\u02e1\u02e2\3\2\2\2\u02e2\u02e4\3\2\2\2")
        buf.write("\u02e3\u02e5\7\u0234\2\2\u02e4\u02e3\3\2\2\2\u02e4\u02e5")
        buf.write("\3\2\2\2\u02e5\u02e6\3\2\2\2\u02e6\u02fc\5z>\2\u02e7\u02e8")
        buf.write("\7\u00e5\2\2\u02e8\u02ed\5L\'\2\u02e9\u02ea\7\u02d3\2")
        buf.write("\2\u02ea\u02ec\5L\'\2\u02eb\u02e9\3\2\2\2\u02ec\u02ef")
        buf.write("\3\2\2\2\u02ed\u02eb\3\2\2\2\u02ed\u02ee\3\2\2\2\u02ee")
        buf.write("\u02f1\3\2\2\2\u02ef\u02ed\3\2\2\2\u02f0\u02f2\5\\/\2")
        buf.write("\u02f1\u02f0\3\2\2\2\u02f1\u02f2\3\2\2\2\u02f2\u02f4\3")
        buf.write("\2\2\2\u02f3\u02f5\5h\65\2\u02f4\u02f3\3\2\2\2\u02f4\u02f5")
        buf.write("\3\2\2\2\u02f5\u02f7\3\2\2\2\u02f6\u02f8\5j\66\2\u02f7")
        buf.write("\u02f6\3\2\2\2\u02f7\u02f8\3\2\2\2\u02f8\u02fa\3\2\2\2")
        buf.write("\u02f9\u02fb\5n8\2\u02fa\u02f9\3\2\2\2\u02fa\u02fb\3\2")
        buf.write("\2\2\u02fb\u02fd\3\2\2\2\u02fc\u02e7\3\2\2\2\u02fc\u02fd")
        buf.write("\3\2\2\2\u02fd\u02ff\3\2\2\2\u02fe\u0300\5p9\2\u02ff\u02fe")
        buf.write("\3\2\2\2\u02ff\u0300\3\2\2\2\u0300\u0302\3\2\2\2\u0301")
        buf.write("\u0303\5t;\2\u0302\u0301\3\2\2\2\u0302\u0303\3\2\2\2\u0303")
        buf.write("\u030a\3\2\2\2\u0304\u0305\7\u00df\2\2\u0305\u030b\7\u0293")
        buf.write("\2\2\u0306\u0307\7\u014c\2\2\u0307\u0308\7\u010c\2\2\u0308")
        buf.write("\u0309\7\u021d\2\2\u0309\u030b\7\u018a\2\2\u030a\u0304")
        buf.write("\3\2\2\2\u030a\u0306\3\2\2\2\u030a\u030b\3\2\2\2\u030b")
        buf.write("g\3\2\2\2\u030c\u030d\7\u02b5\2\2\u030d\u0312\5\62\32")
        buf.write("\2\u030e\u030f\7\u02d3\2\2\u030f\u0311\5\62\32\2\u0310")
        buf.write("\u030e\3\2\2\2\u0311\u0314\3\2\2\2\u0312\u0310\3\2\2\2")
        buf.write("\u0312\u0313\3\2\2\2\u0313i\3\2\2\2\u0314\u0312\3\2\2")
        buf.write("\2\u0315\u0316\7\u00f8\2\2\u0316\u0317\78\2\2\u0317\u031c")
        buf.write("\5l\67\2\u0318\u0319\7\u02d3\2\2\u0319\u031b\5l\67\2\u031a")
        buf.write("\u0318\3\2\2\2\u031b\u031e\3\2\2\2\u031c\u031a\3\2\2\2")
        buf.write("\u031c\u031d\3\2\2\2\u031d\u0321\3\2\2\2\u031e\u031c\3")
        buf.write("\2\2\2\u031f\u0320\7\u02b7\2\2\u0320\u0322\7\u0203\2\2")
        buf.write("\u0321\u031f\3\2\2\2\u0321\u0322\3\2\2\2\u0322k\3\2\2")
        buf.write("\2\u0323\u0327\5F$\2\u0324\u0327\7\u02e1\2\2\u0325\u0327")
        buf.write("\58\35\2\u0326\u0323\3\2\2\2\u0326\u0324\3\2\2\2\u0326")
        buf.write("\u0325\3\2\2\2\u0327m\3\2\2\2\u0328\u0329\7\u00fb\2\2")
        buf.write("\u0329\u032a\5\62\32\2\u032ao\3\2\2\2\u032b\u032c\7\u01b2")
        buf.write("\2\2\u032c\u032d\78\2\2\u032d\u0332\5r:\2\u032e\u032f")
        buf.write("\7\u02d3\2\2\u032f\u0331\5r:\2\u0330\u032e\3\2\2\2\u0331")
        buf.write("\u0334\3\2\2\2\u0332\u0330\3\2\2\2\u0332\u0333\3\2\2\2")
        buf.write("\u0333q\3\2\2\2\u0334\u0332\3\2\2\2\u0335\u0337\5l\67")
        buf.write("\2\u0336\u0338\t\30\2\2\u0337\u0336\3\2\2\2\u0337\u0338")
        buf.write("\3\2\2\2\u0338s\3\2\2\2\u0339\u033d\7\u0142\2\2\u033a")
        buf.write("\u033b\5v<\2\u033b\u033c\7\u02d3\2\2\u033c\u033e\3\2\2")
        buf.write("\2\u033d\u033a\3\2\2\2\u033d\u033e\3\2\2\2\u033e\u033f")
        buf.write("\3\2\2\2\u033f\u0345\5x=\2\u0340\u0341\5x=\2\u0341\u0342")
        buf.write("\7\u01a6\2\2\u0342\u0343\5v<\2\u0343\u0345\3\2\2\2\u0344")
        buf.write("\u0339\3\2\2\2\u0344\u0340\3\2\2\2\u0345u\3\2\2\2\u0346")
        buf.write("\u0347\7\u02e1\2\2\u0347w\3\2\2\2\u0348\u0349\7\u02e1")
        buf.write("\2\2\u0349y\3\2\2\2\u034a\u034f\5\u0082B\2\u034b\u034c")
        buf.write("\7\u02d3\2\2\u034c\u034e\5\u0082B\2\u034d\u034b\3\2\2")
        buf.write("\2\u034e\u0351\3\2\2\2\u034f\u034d\3\2\2\2\u034f\u0350")
        buf.write("\3\2\2\2\u0350\u0354\3\2\2\2\u0351\u034f\3\2\2\2\u0352")
        buf.write("\u0354\7\u02d4\2\2\u0353\u034a\3\2\2\2\u0353\u0352\3\2")
        buf.write("\2\2\u0354{\3\2\2\2\u0355\u0356\7\u02d6\2\2\u0356\u035b")
        buf.write("\5F$\2\u0357\u0358\7\u02d3\2\2\u0358\u035a\5F$\2\u0359")
        buf.write("\u0357\3\2\2\2\u035a\u035d\3\2\2\2\u035b\u0359\3\2\2\2")
        buf.write("\u035b\u035c\3\2\2\2\u035c\u035e\3\2\2\2\u035d\u035b\3")
        buf.write("\2\2\2\u035e\u035f\7\u02d5\2\2\u035f}\3\2\2\2\u0360\u0361")
        buf.write("\7\u02d6\2\2\u0361\u0362\5d\63\2\u0362\u0363\7\u02d5\2")
        buf.write("\2\u0363\177\3\2\2\2\u0364\u0365\5&\24\2\u0365\u0366\7")
        buf.write("\u02d2\2\2\u0366\u0368\3\2\2\2\u0367\u0364\3\2\2\2\u0367")
        buf.write("\u0368\3\2\2\2\u0368\u0369\3\2\2\2\u0369\u036a\5(\25\2")
        buf.write("\u036a\u0081\3\2\2\2\u036b\u036c\5\u0080A\2\u036c\u036d")
        buf.write("\7\u02d2\2\2\u036d\u036e\7\u02d4\2\2\u036e\u0375\3\2\2")
        buf.write("\2\u036f\u0375\5F$\2\u0370\u0372\58\35\2\u0371\u0373\5")
        buf.write("\60\31\2\u0372\u0371\3\2\2\2\u0372\u0373\3\2\2\2\u0373")
        buf.write("\u0375\3\2\2\2\u0374\u036b\3\2\2\2\u0374\u036f\3\2\2\2")
        buf.write("\u0374\u0370\3\2\2\2\u0375\u0083\3\2\2\2\u0376\u0378\7")
        buf.write("\u009f\2\2\u0377\u0379\7\u0157\2\2\u0378\u0377\3\2\2\2")
        buf.write("\u0378\u0379\3\2\2\2\u0379\u037b\3\2\2\2\u037a\u037c\7")
        buf.write("\u01d9\2\2\u037b\u037a\3\2\2\2\u037b\u037c\3\2\2\2\u037c")
        buf.write("\u037e\3\2\2\2\u037d\u037f\7\u010a\2\2\u037e\u037d\3\2")
        buf.write("\2\2\u037e\u037f\3\2\2\2\u037f\u0383\3\2\2\2\u0380\u0384")
        buf.write("\5\u0086D\2\u0381\u0384\5\u0088E\2\u0382\u0384\5\u008a")
        buf.write("F\2\u0383\u0380\3\2\2\2\u0383\u0381\3\2\2\2\u0383\u0382")
        buf.write("\3\2\2\2\u0384\u0085\3\2\2\2\u0385\u0386\7\u00e5\2\2\u0386")
        buf.write("\u0388\5\u0080A\2\u0387\u0389\5\\/\2\u0388\u0387\3\2\2")
        buf.write("\2\u0388\u0389\3\2\2\2\u0389\u038b\3\2\2\2\u038a\u038c")
        buf.write("\5h\65\2\u038b\u038a\3\2\2\2\u038b\u038c\3\2\2\2\u038c")
        buf.write("\u038e\3\2\2\2\u038d\u038f\5p9\2\u038e\u038d\3\2\2\2\u038e")
        buf.write("\u038f\3\2\2\2\u038f\u0391\3\2\2\2\u0390\u0392\5t;\2\u0391")
        buf.write("\u0390\3\2\2\2\u0391\u0392\3\2\2\2\u0392\u0087\3\2\2\2")
        buf.write("\u0393\u0395\5\u0080A\2\u0394\u0396\7\u02cf\2\2\u0395")
        buf.write("\u0394\3\2\2\2\u0395\u0396\3\2\2\2\u0396\u039e\3\2\2\2")
        buf.write("\u0397\u0398\7\u02d3\2\2\u0398\u039a\5\u0080A\2\u0399")
        buf.write("\u039b\7\u02cf\2\2\u039a\u0399\3\2\2\2\u039a\u039b\3\2")
        buf.write("\2\2\u039b\u039d\3\2\2\2\u039c\u0397\3\2\2\2\u039d\u03a0")
        buf.write("\3\2\2\2\u039e\u039c\3\2\2\2\u039e\u039f\3\2\2\2\u039f")
        buf.write("\u03a1\3\2\2\2\u03a0\u039e\3\2\2\2\u03a1\u03a2\7\u00e5")
        buf.write("\2\2\u03a2\u03a4\5L\'\2\u03a3\u03a5\5h\65\2\u03a4\u03a3")
        buf.write("\3\2\2\2\u03a4\u03a5\3\2\2\2\u03a5\u0089\3\2\2\2\u03a6")
        buf.write("\u03a7\7\u00e5\2\2\u03a7\u03a9\5\u0080A\2\u03a8\u03aa")
        buf.write("\7\u02cf\2\2\u03a9\u03a8\3\2\2\2\u03a9\u03aa\3\2\2\2\u03aa")
        buf.write("\u03b2\3\2\2\2\u03ab\u03ac\7\u02d3\2\2\u03ac\u03ae\5\u0080")
        buf.write("A\2\u03ad\u03af\7\u02cf\2\2\u03ae\u03ad\3\2\2\2\u03ae")
        buf.write("\u03af\3\2\2\2\u03af\u03b1\3\2\2\2\u03b0\u03ab\3\2\2\2")
        buf.write("\u03b1\u03b4\3\2\2\2\u03b2\u03b0\3\2\2\2\u03b2\u03b3\3")
        buf.write("\2\2\2\u03b3\u03b5\3\2\2\2\u03b4\u03b2\3\2\2\2\u03b5\u03b6")
        buf.write("\7\u029a\2\2\u03b6\u03b8\5L\'\2\u03b7\u03b9\5h\65\2\u03b8")
        buf.write("\u03b7\3\2\2\2\u03b8\u03b9\3\2\2\2\u03b9\u008b\3\2\2\2")
        buf.write("\u03ba\u03be\5\u0092J\2\u03bb\u03be\5\u0098M\2\u03bc\u03be")
        buf.write("\5\u009eP\2\u03bd\u03ba\3\2\2\2\u03bd\u03bb\3\2\2\2\u03bd")
        buf.write("\u03bc\3\2\2\2\u03be\u008d\3\2\2\2\u03bf\u03c1\7\u0117")
        buf.write("\2\2\u03c0\u03c2\t\31\2\2\u03c1\u03c0\3\2\2\2\u03c1\u03c2")
        buf.write("\3\2\2\2\u03c2\u03c4\3\2\2\2\u03c3\u03c5\7\u010a\2\2\u03c4")
        buf.write("\u03c3\3\2\2\2\u03c4\u03c5\3\2\2\2\u03c5\u03c7\3\2\2\2")
        buf.write("\u03c6\u03c8\7\u011e\2\2\u03c7\u03c6\3\2\2\2\u03c7\u03c8")
        buf.write("\3\2\2\2\u03c8\u03c9\3\2\2\2\u03c9\u03cb\5\u0080A\2\u03ca")
        buf.write("\u03cc\5\\/\2\u03cb\u03ca\3\2\2\2\u03cb\u03cc\3\2\2\2")
        buf.write("\u03cc\u008f\3\2\2\2\u03cd\u03ce\7\u01a9\2\2\u03ce\u03cf")
        buf.write("\7\u00b0\2\2\u03cf\u03d0\7\u012a\2\2\u03d0\u03d1\7\u0293")
        buf.write("\2\2\u03d1\u03d2\5F$\2\u03d2\u03d3\7\u02c8\2\2\u03d3\u03db")
        buf.write("\5\62\32\2\u03d4\u03d5\7\u02d3\2\2\u03d5\u03d6\5F$\2\u03d6")
        buf.write("\u03d7\7\u02c8\2\2\u03d7\u03d8\5\62\32\2\u03d8\u03da\3")
        buf.write("\2\2\2\u03d9\u03d4\3\2\2\2\u03da\u03dd\3\2\2\2\u03db\u03d9")
        buf.write("\3\2\2\2\u03db\u03dc\3\2\2\2\u03dc\u0091\3\2\2\2\u03dd")
        buf.write("\u03db\3\2\2\2\u03de\u03e0\5\u008eH\2\u03df\u03e1\5|?")
        buf.write("\2\u03e0\u03df\3\2\2\2\u03e0\u03e1\3\2\2\2\u03e1\u03e2")
        buf.write("\3\2\2\2\u03e2\u03e4\5\u0094K\2\u03e3\u03e5\5\u0090I\2")
        buf.write("\u03e4\u03e3\3\2\2\2\u03e4\u03e5\3\2\2\2\u03e5\u0093\3")
        buf.write("\2\2\2\u03e6\u03e7\t\32\2\2\u03e7\u03ec\5\u0096L\2\u03e8")
        buf.write("\u03e9\7\u02d3\2\2\u03e9\u03eb\5\u0096L\2\u03ea\u03e8")
        buf.write("\3\2\2\2\u03eb\u03ee\3\2\2\2\u03ec\u03ea\3\2\2\2\u03ec")
        buf.write("\u03ed\3\2\2\2\u03ed\u0095\3\2\2\2\u03ee\u03ec\3\2\2\2")
        buf.write("\u03ef\u03f2\7\u02d6\2\2\u03f0\u03f3\58\35\2\u03f1\u03f3")
        buf.write("\7\u009a\2\2\u03f2\u03f0\3\2\2\2\u03f2\u03f1\3\2\2\2\u03f3")
        buf.write("\u03fb\3\2\2\2\u03f4\u03f7\7\u02d3\2\2\u03f5\u03f8\58")
        buf.write("\35\2\u03f6\u03f8\7\u009a\2\2\u03f7\u03f5\3\2\2\2\u03f7")
        buf.write("\u03f6\3\2\2\2\u03f8\u03fa\3\2\2\2\u03f9\u03f4\3\2\2\2")
        buf.write("\u03fa\u03fd\3\2\2\2\u03fb\u03f9\3\2\2\2\u03fb\u03fc\3")
        buf.write("\2\2\2\u03fc\u03fe\3\2\2\2\u03fd\u03fb\3\2\2\2\u03fe\u03ff")
        buf.write("\7\u02d5\2\2\u03ff\u0097\3\2\2\2\u0400\u0401\5\u008eH")
        buf.write("\2\u0401\u0403\5\u009aN\2\u0402\u0404\5\u0090I\2\u0403")
        buf.write("\u0402\3\2\2\2\u0403\u0404\3\2\2\2\u0404\u0099\3\2\2\2")
        buf.write("\u0405\u0406\7\u021b\2\2\u0406\u040b\5\u009cO\2\u0407")
        buf.write("\u0408\7\u02d3\2\2\u0408\u040a\5\u009cO\2\u0409\u0407")
        buf.write("\3\2\2\2\u040a\u040d\3\2\2\2\u040b\u0409\3\2\2\2\u040b")
        buf.write("\u040c\3\2\2\2\u040c\u009b\3\2\2\2\u040d\u040b\3\2\2\2")
        buf.write("\u040e\u040f\5F$\2\u040f\u0412\7\u02c8\2\2\u0410\u0413")
        buf.write("\5\62\32\2\u0411\u0413\7\u009a\2\2\u0412\u0410\3\2\2\2")
        buf.write("\u0412\u0411\3\2\2\2\u0413\u009d\3\2\2\2\u0414\u0416\5")
        buf.write("\u008eH\2\u0415\u0417\5|?\2\u0416\u0415\3\2\2\2\u0416")
        buf.write("\u0417\3\2\2\2\u0417\u0418\3\2\2\2\u0418\u041a\5f\64\2")
        buf.write("\u0419\u041b\5\u0090I\2\u041a\u0419\3\2\2\2\u041a\u041b")
        buf.write("\3\2\2\2\u041b\u009f\3\2\2\2\u041c\u041f\5\u00a2R\2\u041d")
        buf.write("\u041f\5\u00a4S\2\u041e\u041c\3\2\2\2\u041e\u041d\3\2")
        buf.write("\2\2\u041f\u00a1\3\2\2\2\u0420\u0422\7\u0293\2\2\u0421")
        buf.write("\u0423\7\u0157\2\2\u0422\u0421\3\2\2\2\u0422\u0423\3\2")
        buf.write("\2\2\u0423\u0425\3\2\2\2\u0424\u0426\7\u010a\2\2\u0425")
        buf.write("\u0424\3\2\2\2\u0425\u0426\3\2\2\2\u0426\u0427\3\2\2\2")
        buf.write("\u0427\u0428\5P)\2\u0428\u042a\5\u009aN\2\u0429\u042b")
        buf.write("\5h\65\2\u042a\u0429\3\2\2\2\u042a\u042b\3\2\2\2\u042b")
        buf.write("\u042d\3\2\2\2\u042c\u042e\5p9\2\u042d\u042c\3\2\2\2\u042d")
        buf.write("\u042e\3\2\2\2\u042e\u0430\3\2\2\2\u042f\u0431\5t;\2\u0430")
        buf.write("\u042f\3\2\2\2\u0430\u0431\3\2\2\2\u0431\u00a3\3\2\2\2")
        buf.write("\u0432\u0434\7\u0293\2\2\u0433\u0435\7\u0157\2\2\u0434")
        buf.write("\u0433\3\2\2\2\u0434\u0435\3\2\2\2\u0435\u0437\3\2\2\2")
        buf.write("\u0436\u0438\7\u010a\2\2\u0437\u0436\3\2\2\2\u0437\u0438")
        buf.write("\3\2\2\2\u0438\u0439\3\2\2\2\u0439\u043a\5L\'\2\u043a")
        buf.write("\u043c\5\u009aN\2\u043b\u043d\5h\65\2\u043c\u043b\3\2")
        buf.write("\2\2\u043c\u043d\3\2\2\2\u043d\u00a5\3\2\2\2\u0099\u00aa")
        buf.write("\u00ae\u00b6\u00b8\u00bc\u00c1\u00c3\u00d6\u00df\u00ef")
        buf.write("\u00f5\u0106\u010a\u010d\u010f\u011c\u0126\u012a\u012c")
        buf.write("\u012e\u0139\u013b\u0145\u014a\u014f\u0153\u0158\u015c")
        buf.write("\u016a\u0170\u0174\u017a\u0180\u0194\u0196\u01a6\u01af")
        buf.write("\u01b2\u01b5\u01cf\u01d4\u01d8\u01e2\u01e6\u01f3\u01f7")
        buf.write("\u0201\u0207\u020c\u0211\u021b\u0229\u022f\u0236\u023e")
        buf.write("\u0245\u024a\u0252\u0258\u025a\u025e\u0260\u0265\u0268")
        buf.write("\u026b\u0274\u027b\u0285\u0287\u028d\u029d\u02a4\u02b1")
        buf.write("\u02b6\u02ba\u02c0\u02c5\u02ca\u02cf\u02d2\u02d5\u02d8")
        buf.write("\u02db\u02de\u02e1\u02e4\u02ed\u02f1\u02f4\u02f7\u02fa")
        buf.write("\u02fc\u02ff\u0302\u030a\u0312\u031c\u0321\u0326\u0332")
        buf.write("\u0337\u033d\u0344\u034f\u0353\u035b\u0367\u0372\u0374")
        buf.write("\u0378\u037b\u037e\u0383\u0388\u038b\u038e\u0391\u0395")
        buf.write("\u039a\u039e\u03a4\u03a9\u03ae\u03b2\u03b8\u03bd\u03c1")
        buf.write("\u03c4\u03c7\u03cb\u03db\u03e0\u03e4\u03ec\u03f2\u03f7")
        buf.write("\u03fb\u0403\u040b\u0412\u0416\u041a\u041e\u0422\u0425")
        buf.write("\u042a\u042d\u0430\u0434\u0437\u043c")
        return buf.getvalue()


class MySQLParser ( Parser ):

    grammarFileName = "MySQL.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'`'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'NAME'", "'NAMES'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'TYPE'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'USER'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'=>'", "<INVALID>", "<INVALID>", "'<='", 
                     "'>='", "':='", "'<<'", "'>>'", "'.*'", "';'", "':'", 
                     "'.'", "','", "'*'", "')'", "'('", "']'", "'['", "'+'", 
                     "'-'", "'~'", "'|'", "'&'", "'^'", "'>'", "'<'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "ABS", "ACCESSIBLE_SYM", 
                      "ACOS", "ACTION", "ADD_SYM", "ADDDATE", "ADDTIME", 
                      "AES_DECRYPT", "AES_ENCRYPT", "AFTER_SYM", "AGAINST", 
                      "AGGREGATE_SYM", "ALGORITHM_SYM", "ALL", "ALTER", 
                      "ANALYZE_SYM", "ANY", "ARMSCII8", "AS_SYM", "ASC", 
                      "ASCII_SYM", "ASENSITIVE_SYM", "ASIN", "AT_SYM", "ATAN", 
                      "ATAN2", "AUTHORS_SYM", "AUTO_INCREMENT", "AUTOEXTEND_SIZE_SYM", 
                      "AVG", "AVG_ROW_LENGTH", "BACKUP_SYM", "BEFORE_SYM", 
                      "BEGIN_SYM", "BENCHMARK", "BETWEEN", "BIG5", "BIGINT", 
                      "BIN", "BINARY", "BINLOG_SYM", "BIT_AND", "BIT_LENGTH", 
                      "BIT_OR", "BIT_SYM", "BIT_XOR", "BLOB_SYM", "BLOCK_SYM", 
                      "BOOL_SYM", "BOOLEAN_SYM", "BOTH", "BTREE_SYM", "BY_SYM", 
                      "BYTE_SYM", "CACHE_SYM", "CALL_SYM", "CASCADE", "CASCADED", 
                      "CASE_SYM", "CAST_SYM", "CEIL", "CEILING", "CHAIN_SYM", 
                      "CHANGE", "CHANGED", "CHAR", "CHAR_LENGTH", "CHARACTER_SYM", 
                      "CHARSET", "CHECK_SYM", "CHECKSUM_SYM", "CIPHER_SYM", 
                      "CLIENT_SYM", "CLOSE_SYM", "COALESCE", "CODE_SYM", 
                      "COERCIBILITY", "COLLATE_SYM", "COLLATION", "COLUMN_FORMAT", 
                      "COLUMN_SYM", "COLUMNS_SYM", "COMMENT_SYM", "COMMIT_SYM", 
                      "COMMITTED_SYM", "COMPACT_SYM", "COMPLETION_SYM", 
                      "COMPRESS", "COMPRESSED_SYM", "CONCAT", "CONCAT_WS", 
                      "CONCURRENT", "CONDITION_SYM", "CONNECTION_ID", "CONNECTION_SYM", 
                      "CONSISTENT_SYM", "CONSTRAINT", "CONTAINS_SYM", "CONTEXT_SYM", 
                      "CONTINUE_SYM", "CONTRIBUTORS_SYM", "CONV", "CONVERT_SYM", 
                      "CONVERT_TZ", "COPY_SYM", "COS", "COT", "COUNT", "CP1250", 
                      "CP1251", "CP1256", "CP1257", "CP850", "CP852", "CP866", 
                      "CP932", "CPU_SYM", "CRC32", "CREATE", "CROSECOND", 
                      "CROSS", "CUBE_SYM", "CURDATE", "CURRENT_TIMESTAMP", 
                      "CURRENT_USER", "CURSOR_SYM", "CURTIME", "DATABASE", 
                      "DATAFILE_SYM", "DATA_SYM", "DATE_ADD", "DATE_FORMAT", 
                      "DATE_SUB", "DATE_SYM", "DATEDIFF", "DATETIME", "DAY_SYM", 
                      "DAY_HOUR", "DAY_MICROSECOND", "DAY_MINUTE", "DAY_SECOND", 
                      "DAYNAME", "DAYOFMONTH", "DAYOFWEEK", "DAYOFYEAR", 
                      "DEALLOCATE_SYM", "DEC8", "DECIMAL_SYM", "DECLARE_SYM", 
                      "DECODE", "DEFAULT", "DEFINER", "DEGREES", "DELAY_KEY_WRITE_SYM", 
                      "DELAYED_SYM", "DELETE_SYM", "DES_DECRYPT", "DES_ENCRYPT", 
                      "DES_KEY_FILE", "DESC", "DETERMINISTIC_SYM", "DIRECTORY_SYM", 
                      "DISABLE_SYM", "DISCARD", "DISK_SYM", "DISTINCT", 
                      "DISTINCTROW", "DO_SYM", "DOUBLE_SYM", "DROP", "DUAL_SYM", 
                      "DUMPFILE", "DUPLICATE_SYM", "DYNAMIC_SYM", "EACH_SYM", 
                      "ELSE_SYM", "ELSIF_SYM", "ELT", "ENABLE_SYM", "ENCLOSED", 
                      "ENCODE", "ENCRYPT", "END_SYM", "ENDS_SYM", "ENGINE_SYM", 
                      "ENGINES_SYM", "ENUM", "ERRORS", "ESCAPE_SYM", "ESCAPED", 
                      "EUCJPMS", "EUCKR", "EVENT_SYM", "EVENTS_SYM", "EVERY_SYM", 
                      "EXCHANGE_SYM", "EXECUTE_SYM", "EXCLUSIVE_SYM", "EXISTS", 
                      "EXIT_SYM", "EXP", "EXPANSION_SYM", "EXPORT_SET", 
                      "EXTENDED_SYM", "EXTENT_SIZE_SYM", "EXTRACT", "FALSE_SYM", 
                      "FAST_SYM", "FAULTS_SYM", "FIELDS_SYM", "FETCH_SYM", 
                      "FIELD", "FILE_SYM", "FIND_IN_SET", "FIRST_SYM", "FIXED_SYM", 
                      "FLOAT_SYM", "FLOOR", "FLUSH_SYM", "FOR_SYM", "FORCE_SYM", 
                      "FOREIGN", "FORMAT", "FOUND_ROWS", "FOUND_SYM", "FROM", 
                      "FROM_BASE64", "FROM_DAYS", "FROM_UNIXTIME", "FULL", 
                      "FULLTEXT_SYM", "FUNCTION_SYM", "GB2312", "GBK", "GEOMETRY_SYM", 
                      "GEOMETRYCOLLECTION", "GEOSTD8", "GET_FORMAT", "GET_LOCK", 
                      "GLOBAL_SYM", "GRANT", "GRANTS", "GREEK", "GROUP_CONCAT", 
                      "GROUP_SYM", "HANDLER_SYM", "HASH_SYM", "HAVING", 
                      "HEBREW", "HELP_SYM", "HEX", "HIGH_PRIORITY", "HOST_SYM", 
                      "HOSTS_SYM", "HOUR", "HOUR_MICROSECOND", "HOUR_MINUTE", 
                      "HOUR_SECOND", "HP8", "IDENTIFIED_SYM", "IF", "IFNULL", 
                      "IGNORE_SYM", "IMPORT", "IN_SYM", "INDEX_SYM", "INDEXES", 
                      "INET_ATON", "INET_NTOA", "INFILE", "INITIAL_SIZE_SYM", 
                      "INNER_SYM", "INOUT_SYM", "INPLACE_SYM", "INSENSITIVE_SYM", 
                      "INSERT", "INSERT_METHOD", "INSTALL_SYM", "INSTR", 
                      "INT_SYM", "INTEGER_SYM", "INTERVAL_SYM", "INTO", 
                      "INVOKER_SYM", "IO_SYM", "IPC_SYM", "IS_FREE_LOCK", 
                      "IS_SYM", "IS_USED_LOCK", "ISOLATION", "ISSUER_SYM", 
                      "ITERATE_SYM", "JOIN_SYM", "KEY_BLOCK_SIZE", "KEY_SYM", 
                      "KEYBCS2", "KEYS", "KILL_SYM", "KOI8R", "KOI8U", "LANGUAGE", 
                      "LAST_DAY", "LAST_INSERT_ID", "LAST_SYM", "LATIN1_BIN", 
                      "LATIN1_GENERAL_CS", "LATIN1", "LATIN2", "LATIN5", 
                      "LATIN7", "LEADING", "LEAVE_SYM", "LEAVES", "LEFT", 
                      "LENGTH", "LESS_SYM", "LEVEL_SYM", "LIKE_SYM", "LIMIT", 
                      "LINEAR_SYM", "LINES", "LINESTRING", "LIST_SYM", "LN", 
                      "LOAD", "LOAD_FILE", "LOCAL_SYM", "LOCATE", "LOCK", 
                      "LOCKS_SYM", "LOG", "LOG10", "LOG2", "LOGFILE_SYM", 
                      "LOGS_SYM", "LONG_SYM", "LONGBLOB", "LONGTEXT", "LOOP_SYM", 
                      "LOW_PRIORITY", "LOWER", "LPAD", "LTRIM", "MACCE", 
                      "MACROMAN", "MAKE_SET", "MAKEDATE", "MAKETIME", "MASTER_CONNECT_RETRY", 
                      "MASTER_HOST_SYM", "MASTER_LOG_FILE_SYM", "MASTER_LOG_POS_SYM", 
                      "MASTER_PASSWORD_SYM", "MASTER_PORT_SYM", "MASTER_POS_WAIT", 
                      "MASTER_SERVER_ID_SYM", "MASTER_SSL_CA_SYM", "MASTER_SSL_CAPATH_SYM", 
                      "MASTER_SSL_CERT_SYM", "MASTER_SSL_CIPHER_SYM", "MASTER_SSL_KEY_SYM", 
                      "MASTER_SSL_SYM", "MASTER_SSL_VERIFY_SERVER_CERT", 
                      "MASTER_SYM", "MASTER_USER_SYM", "MATCH", "MAX_SYM", 
                      "MAX_CONNECTIONS_PER_HOUR", "MAX_QUERIES_PER_HOUR", 
                      "MAX_ROWS", "MAX_SIZE_SYM", "MAX_UPDATES_PER_HOUR", 
                      "MAX_USER_CONNECTIONS_SYM", "MAXVALUE_SYM", "MD5", 
                      "MEDIUM_SYM", "MEDIUMBLOB", "MEDIUMINT", "MEDIUMTEXT", 
                      "MEMORY_SYM", "MERGE_SYM", "MICROSECOND", "MID", "MIGRATE_SYM", 
                      "MIN_SYM", "MIN_ROWS", "MINUTE", "MINUTE_MICROSECOND", 
                      "MINUTE_SECOND", "MOD", "MODE_SYM", "MODIFIES_SYM", 
                      "MODIFY_SYM", "MONTH", "MONTHNAME", "MULTILINESTRING", 
                      "MULTIPOINT", "MULTIPOLYGON", "MUTEX_SYM", "NAME_CONST", 
                      "NAME_SYM", "NAMES_SYM", "NATIONAL_SYM", "NATURAL", 
                      "NCHAR_SYM", "NEW_SYM", "NEXT_SYM", "NO_SYM", "NO_WAIT_SYM", 
                      "NO_WRITE_TO_BINLOG", "NODEGROUP_SYM", "NONE_SYM", 
                      "NOT_SYM", "NOW", "NULL_SYM", "NUMERIC_SYM", "NVARCHAR_SYM", 
                      "OCT", "OFFSET_SYM", "OJ_SYM", "OLD_PASSWORD", "ON", 
                      "ONE_SHOT_SYM", "ONE_SYM", "OPEN_SYM", "OPTIMIZE", 
                      "OPTION", "OPTIONALLY", "OPTIONS_SYM", "ORD", "ORDER_SYM", 
                      "OUT_SYM", "OUTER", "OUTFILE", "OWNER_SYM", "PACK_KEYS_SYM", 
                      "PAGE_CHECKSUM_SYM", "PAGE_SYM", "PARSER_SYM", "PARTIAL", 
                      "PARTITION_SYM", "PARTITIONING_SYM", "PARTITIONS_SYM", 
                      "PASSWORD", "PERIOD_ADD", "PERIOD_DIFF", "PHASE_SYM", 
                      "PI", "PLUGIN_SYM", "PLUGINS_SYM", "POINT_SYM", "POLYGON", 
                      "PORT_SYM", "POW", "POWER", "PRECISION", "PREPARE_SYM", 
                      "PRESERVE_SYM", "PREV_SYM", "PRIMARY_SYM", "PRIVILEGES", 
                      "PROCEDURE", "PROCESS", "PROCESSLIST_SYM", "PROFILE_SYM", 
                      "PROFILES_SYM", "PURGE", "QUARTER", "QUERY_SYM", "QUICK", 
                      "QUOTE", "RADIANS", "RAND", "RANGE_SYM", "READ_ONLY_SYM", 
                      "READ_SYM", "READ_WRITE_SYM", "READS_SYM", "REAL", 
                      "REBUILD_SYM", "RECOVER_SYM", "REDO_BUFFER_SIZE_SYM", 
                      "REDOFILE_SYM", "REDUNDANT_SYM", "REFERENCES", "REGEXP", 
                      "RELAY_LOG_FILE_SYM", "RELAY_LOG_POS_SYM", "RELEASE_LOCK", 
                      "RELEASE_SYM", "RELOAD", "REMOVE_SYM", "RENAME", "REORGANIZE_SYM", 
                      "REPAIR", "REPEAT", "REPEATABLE_SYM", "REPLACE", "REPLICATION", 
                      "REQUIRE_SYM", "RESET_SYM", "RESOURCES", "RESTORE_SYM", 
                      "RESTRICT", "RESUME_SYM", "RETURN_SYM", "RETURNS_SYM", 
                      "REVERSE", "REVOKE", "RIGHT", "ROLLBACK", "ROLLUP_SYM", 
                      "ROUND", "ROUTINE_SYM", "ROW_FORMAT_SYM", "ROW_SYM", 
                      "ROWS_SYM", "RPAD", "RTREE_SYM", "RTRIM", "SAVEPOINT", 
                      "SCHEDULE_SYM", "SCHEMA", "SEC_TO_TIME", "SECOND", 
                      "SECOND_MICROSECOND", "SECURITY_SYM", "SELECT", "SENSITIVE_SYM", 
                      "SEPARATOR_SYM", "SERIAL_SYM", "SERIALIZABLE_SYM", 
                      "SERVER_SYM", "SESSION_SYM", "SESSION_USER", "SET_SYM", 
                      "SHARED_SYM", "SHARE_SYM", "SHOW", "SHUTDOWN", "SIGN", 
                      "SIGNED_SYM", "SIMPLE_SYM", "SIN", "SJIS", "SLAVE", 
                      "SLEEP", "SMALLINT", "SNAPSHOT_SYM", "SOCKET_SYM", 
                      "SONAME_SYM", "SOUNDEX", "SOUNDS_SYM", "SOURCE_SYM", 
                      "SPACE", "SPATIAL_SYM", "SPECIFIC_SYM", "SQL_BIG_RESULT", 
                      "SQL_BUFFER_RESULT", "SQL_CACHE_SYM", "SQL_CALC_FOUND_ROWS", 
                      "SQL_NO_CACHE_SYM", "SQL_SMALL_RESULT", "SQL_SYM", 
                      "SQL_THREAD", "SQLEXCEPTION_SYM", "SQLSTATE_SYM", 
                      "SQLWARNING_SYM", "SQRT", "SSL_SYM", "START_SYM", 
                      "STARTING", "STATS_AUTO_RECALC", "STATS_PERSISTENT", 
                      "STARTS_SYM", "STATUS_SYM", "STD", "STDDEV", "STDDEV_POP", 
                      "STDDEV_SAMP", "STOP_SYM", "STORAGE_SYM", "STR_TO_DATE", 
                      "STRAIGHT_JOIN", "STRCMP", "STRING_SYM", "SUBJECT_SYM", 
                      "SUBPARTITION_SYM", "SUBPARTITIONS_SYM", "SUBSTRING", 
                      "SUBSTRING_INDEX", "SUBTIME", "SUM", "SUPER_SYM", 
                      "SUSPEND_SYM", "SWAPS_SYM", "SWE7", "SWITCHES_SYM", 
                      "SYSDATE", "SYSTEM_USER", "TABLE", "TABLE_CHECKSUM_SYM", 
                      "TABLES", "TABLESPACE", "TAN", "TEMPORARY", "TEMPTABLE_SYM", 
                      "TERMINATED", "TEXT_SYM", "THAN_SYM", "THEN_SYM", 
                      "TIME_FORMAT", "TIME_SYM", "TIME_TO_SEC", "TIMEDIFF", 
                      "TIMESTAMP", "TIMESTAMPADD", "TIMESTAMPDIFF", "TINYBLOB", 
                      "TINYINT", "TINYTEXT", "TIS620", "TO_BASE64", "TO_DAYS", 
                      "TO_SECONDS", "TO_SYM", "TRAILING", "TRANSACTION", 
                      "TRANSACTIONAL_SYM", "TRIGGER_SYM", "TRIGGERS_SYM", 
                      "TRIM", "TRUE_SYM", "TRUNCATE", "TYPE_SYM", "TYPES_SYM", 
                      "UCS2", "UJIS", "UNCOMMITTED_SYM", "UNCOMPRESS", "UNCOMPRESSED_LENGTH", 
                      "UNDEFINED_SYM", "UNDO_BUFFER_SIZE_SYM", "UNDO_SYM", 
                      "UNDOFILE_SYM", "UNHEX", "UNICODE_SYM", "UNINSTALL_SYM", 
                      "UNION_SYM", "UNIQUE_SYM", "UNIX_TIMESTAMP", "UNKNOWN_SYM", 
                      "UNLOCK_SYM", "UNSIGNED_SYM", "UNTIL_SYM", "UPDATE", 
                      "UPGRADE_SYM", "UPPER", "USAGE", "USE_FRM", "USE_SYM", 
                      "USER", "USING_SYM", "UTC_DATE", "UTC_TIME", "UTC_TIMESTAMP", 
                      "UTF16LE", "UTF16", "UTF32", "UTF8", "UUID", "VALUE_SYM", 
                      "VALUES", "VAR_POP", "VAR_SAMP", "VARBINARY", "VARCHAR", 
                      "VARIABLES", "VARIANCE", "VARYING", "VERSION_SYM", 
                      "VIEW_SYM", "WAIT_SYM", "WARNINGS", "WEEK", "WEEKDAY", 
                      "WEEKOFYEAR", "WEIGHT_STRING", "WHEN_SYM", "WHERE", 
                      "WHILE_SYM", "WITH", "WORK_SYM", "WRAPPER_SYM", "WRITE_SYM", 
                      "X509_SYM", "XA_SYM", "XML_SYM", "XOR", "YEAR", "YEAR_MONTH", 
                      "YEARWEEK", "ZEROFILL", "DIVIDE", "MOD_SYM", "OR_SYM", 
                      "AND_SYM", "ARROW", "EQ_SYM", "NOT_EQ", "LET", "GET", 
                      "SET_VAR", "SHIFT_LEFT", "SHIFT_RIGHT", "ALL_FIELDS", 
                      "SEMI", "COLON", "DOT", "COMMA", "ASTERISK", "RPAREN", 
                      "LPAREN", "RBRACK", "LBRACK", "PLUS", "MINUS", "NEGATION", 
                      "VERTBAR", "BITAND", "POWER_OP", "GTH", "LTH", "INTEGER_NUM", 
                      "HEX_DIGIT", "BIT_NUM", "REAL_NUMBER", "TEXT_STRING", 
                      "ID", "USER_VAR", "WHITE_SPACE", "SL_COMMENT", "ML_COMMENT" ]

    RULE_relational_op = 0
    RULE_cast_data_type = 1
    RULE_search_modifier = 2
    RULE_transcoding_name = 3
    RULE_interval_unit = 4
    RULE_string_literal = 5
    RULE_number_literal = 6
    RULE_hex_literal = 7
    RULE_boolean_literal = 8
    RULE_bit_literal = 9
    RULE_literal_value = 10
    RULE_functionList = 11
    RULE_number_functions = 12
    RULE_char_functions = 13
    RULE_time_functions = 14
    RULE_other_functions = 15
    RULE_group_functions = 16
    RULE_escape_id = 17
    RULE_schema_name = 18
    RULE_table_name = 19
    RULE_column_name = 20
    RULE_index_name = 21
    RULE_partition_name = 22
    RULE_alias = 23
    RULE_expression = 24
    RULE_bool_primary = 25
    RULE_predicate = 26
    RULE_bit_expr = 27
    RULE_simple_expr = 28
    RULE_function_call = 29
    RULE_case_when_statement = 30
    RULE_case_when_statement1 = 31
    RULE_case_when_statement2 = 32
    RULE_match_against_statement = 33
    RULE_column_spec = 34
    RULE_expression_list = 35
    RULE_interval_expr = 36
    RULE_table_references = 37
    RULE_escaped_table_reference = 38
    RULE_table_reference = 39
    RULE_table_factor = 40
    RULE_index_hint_list = 41
    RULE_index_options = 42
    RULE_index_hint = 43
    RULE_index_list = 44
    RULE_partition_clause = 45
    RULE_partition_names = 46
    RULE_statement = 47
    RULE_data_manipulation_statements = 48
    RULE_select_statement = 49
    RULE_select_expression = 50
    RULE_where_clause = 51
    RULE_groupby_clause = 52
    RULE_groupby_item = 53
    RULE_having_clause = 54
    RULE_orderby_clause = 55
    RULE_orderby_item = 56
    RULE_limit_clause = 57
    RULE_offset = 58
    RULE_row_count = 59
    RULE_select_list = 60
    RULE_column_list = 61
    RULE_subquery = 62
    RULE_table_spec = 63
    RULE_displayed_column = 64
    RULE_delete_statements = 65
    RULE_delete_single_table_statement = 66
    RULE_delete_multiple_table_statement1 = 67
    RULE_delete_multiple_table_statement2 = 68
    RULE_insert_statements = 69
    RULE_insert_header = 70
    RULE_insert_subfix = 71
    RULE_insert_statement1 = 72
    RULE_value_list_clause = 73
    RULE_column_value_list = 74
    RULE_insert_statement2 = 75
    RULE_set_columns_clause = 76
    RULE_set_column_clause = 77
    RULE_insert_statement3 = 78
    RULE_update_statements = 79
    RULE_single_table_update_statement = 80
    RULE_multiple_table_update_statement = 81

    ruleNames =  [ "relational_op", "cast_data_type", "search_modifier", 
                   "transcoding_name", "interval_unit", "string_literal", 
                   "number_literal", "hex_literal", "boolean_literal", "bit_literal", 
                   "literal_value", "functionList", "number_functions", 
                   "char_functions", "time_functions", "other_functions", 
                   "group_functions", "escape_id", "schema_name", "table_name", 
                   "column_name", "index_name", "partition_name", "alias", 
                   "expression", "bool_primary", "predicate", "bit_expr", 
                   "simple_expr", "function_call", "case_when_statement", 
                   "case_when_statement1", "case_when_statement2", "match_against_statement", 
                   "column_spec", "expression_list", "interval_expr", "table_references", 
                   "escaped_table_reference", "table_reference", "table_factor", 
                   "index_hint_list", "index_options", "index_hint", "index_list", 
                   "partition_clause", "partition_names", "statement", "data_manipulation_statements", 
                   "select_statement", "select_expression", "where_clause", 
                   "groupby_clause", "groupby_item", "having_clause", "orderby_clause", 
                   "orderby_item", "limit_clause", "offset", "row_count", 
                   "select_list", "column_list", "subquery", "table_spec", 
                   "displayed_column", "delete_statements", "delete_single_table_statement", 
                   "delete_multiple_table_statement1", "delete_multiple_table_statement2", 
                   "insert_statements", "insert_header", "insert_subfix", 
                   "insert_statement1", "value_list_clause", "column_value_list", 
                   "insert_statement2", "set_columns_clause", "set_column_clause", 
                   "insert_statement3", "update_statements", "single_table_update_statement", 
                   "multiple_table_update_statement" ]

    EOF = Token.EOF
    T__0=1
    ABS=2
    ACCESSIBLE_SYM=3
    ACOS=4
    ACTION=5
    ADD_SYM=6
    ADDDATE=7
    ADDTIME=8
    AES_DECRYPT=9
    AES_ENCRYPT=10
    AFTER_SYM=11
    AGAINST=12
    AGGREGATE_SYM=13
    ALGORITHM_SYM=14
    ALL=15
    ALTER=16
    ANALYZE_SYM=17
    ANY=18
    ARMSCII8=19
    AS_SYM=20
    ASC=21
    ASCII_SYM=22
    ASENSITIVE_SYM=23
    ASIN=24
    AT_SYM=25
    ATAN=26
    ATAN2=27
    AUTHORS_SYM=28
    AUTO_INCREMENT=29
    AUTOEXTEND_SIZE_SYM=30
    AVG=31
    AVG_ROW_LENGTH=32
    BACKUP_SYM=33
    BEFORE_SYM=34
    BEGIN_SYM=35
    BENCHMARK=36
    BETWEEN=37
    BIG5=38
    BIGINT=39
    BIN=40
    BINARY=41
    BINLOG_SYM=42
    BIT_AND=43
    BIT_LENGTH=44
    BIT_OR=45
    BIT_SYM=46
    BIT_XOR=47
    BLOB_SYM=48
    BLOCK_SYM=49
    BOOL_SYM=50
    BOOLEAN_SYM=51
    BOTH=52
    BTREE_SYM=53
    BY_SYM=54
    BYTE_SYM=55
    CACHE_SYM=56
    CALL_SYM=57
    CASCADE=58
    CASCADED=59
    CASE_SYM=60
    CAST_SYM=61
    CEIL=62
    CEILING=63
    CHAIN_SYM=64
    CHANGE=65
    CHANGED=66
    CHAR=67
    CHAR_LENGTH=68
    CHARACTER_SYM=69
    CHARSET=70
    CHECK_SYM=71
    CHECKSUM_SYM=72
    CIPHER_SYM=73
    CLIENT_SYM=74
    CLOSE_SYM=75
    COALESCE=76
    CODE_SYM=77
    COERCIBILITY=78
    COLLATE_SYM=79
    COLLATION=80
    COLUMN_FORMAT=81
    COLUMN_SYM=82
    COLUMNS_SYM=83
    COMMENT_SYM=84
    COMMIT_SYM=85
    COMMITTED_SYM=86
    COMPACT_SYM=87
    COMPLETION_SYM=88
    COMPRESS=89
    COMPRESSED_SYM=90
    CONCAT=91
    CONCAT_WS=92
    CONCURRENT=93
    CONDITION_SYM=94
    CONNECTION_ID=95
    CONNECTION_SYM=96
    CONSISTENT_SYM=97
    CONSTRAINT=98
    CONTAINS_SYM=99
    CONTEXT_SYM=100
    CONTINUE_SYM=101
    CONTRIBUTORS_SYM=102
    CONV=103
    CONVERT_SYM=104
    CONVERT_TZ=105
    COPY_SYM=106
    COS=107
    COT=108
    COUNT=109
    CP1250=110
    CP1251=111
    CP1256=112
    CP1257=113
    CP850=114
    CP852=115
    CP866=116
    CP932=117
    CPU_SYM=118
    CRC32=119
    CREATE=120
    CROSECOND=121
    CROSS=122
    CUBE_SYM=123
    CURDATE=124
    CURRENT_TIMESTAMP=125
    CURRENT_USER=126
    CURSOR_SYM=127
    CURTIME=128
    DATABASE=129
    DATAFILE_SYM=130
    DATA_SYM=131
    DATE_ADD=132
    DATE_FORMAT=133
    DATE_SUB=134
    DATE_SYM=135
    DATEDIFF=136
    DATETIME=137
    DAY_SYM=138
    DAY_HOUR=139
    DAY_MICROSECOND=140
    DAY_MINUTE=141
    DAY_SECOND=142
    DAYNAME=143
    DAYOFMONTH=144
    DAYOFWEEK=145
    DAYOFYEAR=146
    DEALLOCATE_SYM=147
    DEC8=148
    DECIMAL_SYM=149
    DECLARE_SYM=150
    DECODE=151
    DEFAULT=152
    DEFINER=153
    DEGREES=154
    DELAY_KEY_WRITE_SYM=155
    DELAYED_SYM=156
    DELETE_SYM=157
    DES_DECRYPT=158
    DES_ENCRYPT=159
    DES_KEY_FILE=160
    DESC=161
    DETERMINISTIC_SYM=162
    DIRECTORY_SYM=163
    DISABLE_SYM=164
    DISCARD=165
    DISK_SYM=166
    DISTINCT=167
    DISTINCTROW=168
    DO_SYM=169
    DOUBLE_SYM=170
    DROP=171
    DUAL_SYM=172
    DUMPFILE=173
    DUPLICATE_SYM=174
    DYNAMIC_SYM=175
    EACH_SYM=176
    ELSE_SYM=177
    ELSIF_SYM=178
    ELT=179
    ENABLE_SYM=180
    ENCLOSED=181
    ENCODE=182
    ENCRYPT=183
    END_SYM=184
    ENDS_SYM=185
    ENGINE_SYM=186
    ENGINES_SYM=187
    ENUM=188
    ERRORS=189
    ESCAPE_SYM=190
    ESCAPED=191
    EUCJPMS=192
    EUCKR=193
    EVENT_SYM=194
    EVENTS_SYM=195
    EVERY_SYM=196
    EXCHANGE_SYM=197
    EXECUTE_SYM=198
    EXCLUSIVE_SYM=199
    EXISTS=200
    EXIT_SYM=201
    EXP=202
    EXPANSION_SYM=203
    EXPORT_SET=204
    EXTENDED_SYM=205
    EXTENT_SIZE_SYM=206
    EXTRACT=207
    FALSE_SYM=208
    FAST_SYM=209
    FAULTS_SYM=210
    FIELDS_SYM=211
    FETCH_SYM=212
    FIELD=213
    FILE_SYM=214
    FIND_IN_SET=215
    FIRST_SYM=216
    FIXED_SYM=217
    FLOAT_SYM=218
    FLOOR=219
    FLUSH_SYM=220
    FOR_SYM=221
    FORCE_SYM=222
    FOREIGN=223
    FORMAT=224
    FOUND_ROWS=225
    FOUND_SYM=226
    FROM=227
    FROM_BASE64=228
    FROM_DAYS=229
    FROM_UNIXTIME=230
    FULL=231
    FULLTEXT_SYM=232
    FUNCTION_SYM=233
    GB2312=234
    GBK=235
    GEOMETRY_SYM=236
    GEOMETRYCOLLECTION=237
    GEOSTD8=238
    GET_FORMAT=239
    GET_LOCK=240
    GLOBAL_SYM=241
    GRANT=242
    GRANTS=243
    GREEK=244
    GROUP_CONCAT=245
    GROUP_SYM=246
    HANDLER_SYM=247
    HASH_SYM=248
    HAVING=249
    HEBREW=250
    HELP_SYM=251
    HEX=252
    HIGH_PRIORITY=253
    HOST_SYM=254
    HOSTS_SYM=255
    HOUR=256
    HOUR_MICROSECOND=257
    HOUR_MINUTE=258
    HOUR_SECOND=259
    HP8=260
    IDENTIFIED_SYM=261
    IF=262
    IFNULL=263
    IGNORE_SYM=264
    IMPORT=265
    IN_SYM=266
    INDEX_SYM=267
    INDEXES=268
    INET_ATON=269
    INET_NTOA=270
    INFILE=271
    INITIAL_SIZE_SYM=272
    INNER_SYM=273
    INOUT_SYM=274
    INPLACE_SYM=275
    INSENSITIVE_SYM=276
    INSERT=277
    INSERT_METHOD=278
    INSTALL_SYM=279
    INSTR=280
    INT_SYM=281
    INTEGER_SYM=282
    INTERVAL_SYM=283
    INTO=284
    INVOKER_SYM=285
    IO_SYM=286
    IPC_SYM=287
    IS_FREE_LOCK=288
    IS_SYM=289
    IS_USED_LOCK=290
    ISOLATION=291
    ISSUER_SYM=292
    ITERATE_SYM=293
    JOIN_SYM=294
    KEY_BLOCK_SIZE=295
    KEY_SYM=296
    KEYBCS2=297
    KEYS=298
    KILL_SYM=299
    KOI8R=300
    KOI8U=301
    LANGUAGE=302
    LAST_DAY=303
    LAST_INSERT_ID=304
    LAST_SYM=305
    LATIN1_BIN=306
    LATIN1_GENERAL_CS=307
    LATIN1=308
    LATIN2=309
    LATIN5=310
    LATIN7=311
    LEADING=312
    LEAVE_SYM=313
    LEAVES=314
    LEFT=315
    LENGTH=316
    LESS_SYM=317
    LEVEL_SYM=318
    LIKE_SYM=319
    LIMIT=320
    LINEAR_SYM=321
    LINES=322
    LINESTRING=323
    LIST_SYM=324
    LN=325
    LOAD=326
    LOAD_FILE=327
    LOCAL_SYM=328
    LOCATE=329
    LOCK=330
    LOCKS_SYM=331
    LOG=332
    LOG10=333
    LOG2=334
    LOGFILE_SYM=335
    LOGS_SYM=336
    LONG_SYM=337
    LONGBLOB=338
    LONGTEXT=339
    LOOP_SYM=340
    LOW_PRIORITY=341
    LOWER=342
    LPAD=343
    LTRIM=344
    MACCE=345
    MACROMAN=346
    MAKE_SET=347
    MAKEDATE=348
    MAKETIME=349
    MASTER_CONNECT_RETRY=350
    MASTER_HOST_SYM=351
    MASTER_LOG_FILE_SYM=352
    MASTER_LOG_POS_SYM=353
    MASTER_PASSWORD_SYM=354
    MASTER_PORT_SYM=355
    MASTER_POS_WAIT=356
    MASTER_SERVER_ID_SYM=357
    MASTER_SSL_CA_SYM=358
    MASTER_SSL_CAPATH_SYM=359
    MASTER_SSL_CERT_SYM=360
    MASTER_SSL_CIPHER_SYM=361
    MASTER_SSL_KEY_SYM=362
    MASTER_SSL_SYM=363
    MASTER_SSL_VERIFY_SERVER_CERT=364
    MASTER_SYM=365
    MASTER_USER_SYM=366
    MATCH=367
    MAX_SYM=368
    MAX_CONNECTIONS_PER_HOUR=369
    MAX_QUERIES_PER_HOUR=370
    MAX_ROWS=371
    MAX_SIZE_SYM=372
    MAX_UPDATES_PER_HOUR=373
    MAX_USER_CONNECTIONS_SYM=374
    MAXVALUE_SYM=375
    MD5=376
    MEDIUM_SYM=377
    MEDIUMBLOB=378
    MEDIUMINT=379
    MEDIUMTEXT=380
    MEMORY_SYM=381
    MERGE_SYM=382
    MICROSECOND=383
    MID=384
    MIGRATE_SYM=385
    MIN_SYM=386
    MIN_ROWS=387
    MINUTE=388
    MINUTE_MICROSECOND=389
    MINUTE_SECOND=390
    MOD=391
    MODE_SYM=392
    MODIFIES_SYM=393
    MODIFY_SYM=394
    MONTH=395
    MONTHNAME=396
    MULTILINESTRING=397
    MULTIPOINT=398
    MULTIPOLYGON=399
    MUTEX_SYM=400
    NAME_CONST=401
    NAME_SYM=402
    NAMES_SYM=403
    NATIONAL_SYM=404
    NATURAL=405
    NCHAR_SYM=406
    NEW_SYM=407
    NEXT_SYM=408
    NO_SYM=409
    NO_WAIT_SYM=410
    NO_WRITE_TO_BINLOG=411
    NODEGROUP_SYM=412
    NONE_SYM=413
    NOT_SYM=414
    NOW=415
    NULL_SYM=416
    NUMERIC_SYM=417
    NVARCHAR_SYM=418
    OCT=419
    OFFSET_SYM=420
    OJ_SYM=421
    OLD_PASSWORD=422
    ON=423
    ONE_SHOT_SYM=424
    ONE_SYM=425
    OPEN_SYM=426
    OPTIMIZE=427
    OPTION=428
    OPTIONALLY=429
    OPTIONS_SYM=430
    ORD=431
    ORDER_SYM=432
    OUT_SYM=433
    OUTER=434
    OUTFILE=435
    OWNER_SYM=436
    PACK_KEYS_SYM=437
    PAGE_CHECKSUM_SYM=438
    PAGE_SYM=439
    PARSER_SYM=440
    PARTIAL=441
    PARTITION_SYM=442
    PARTITIONING_SYM=443
    PARTITIONS_SYM=444
    PASSWORD=445
    PERIOD_ADD=446
    PERIOD_DIFF=447
    PHASE_SYM=448
    PI=449
    PLUGIN_SYM=450
    PLUGINS_SYM=451
    POINT_SYM=452
    POLYGON=453
    PORT_SYM=454
    POW=455
    POWER=456
    PRECISION=457
    PREPARE_SYM=458
    PRESERVE_SYM=459
    PREV_SYM=460
    PRIMARY_SYM=461
    PRIVILEGES=462
    PROCEDURE=463
    PROCESS=464
    PROCESSLIST_SYM=465
    PROFILE_SYM=466
    PROFILES_SYM=467
    PURGE=468
    QUARTER=469
    QUERY_SYM=470
    QUICK=471
    QUOTE=472
    RADIANS=473
    RAND=474
    RANGE_SYM=475
    READ_ONLY_SYM=476
    READ_SYM=477
    READ_WRITE_SYM=478
    READS_SYM=479
    REAL=480
    REBUILD_SYM=481
    RECOVER_SYM=482
    REDO_BUFFER_SIZE_SYM=483
    REDOFILE_SYM=484
    REDUNDANT_SYM=485
    REFERENCES=486
    REGEXP=487
    RELAY_LOG_FILE_SYM=488
    RELAY_LOG_POS_SYM=489
    RELEASE_LOCK=490
    RELEASE_SYM=491
    RELOAD=492
    REMOVE_SYM=493
    RENAME=494
    REORGANIZE_SYM=495
    REPAIR=496
    REPEAT=497
    REPEATABLE_SYM=498
    REPLACE=499
    REPLICATION=500
    REQUIRE_SYM=501
    RESET_SYM=502
    RESOURCES=503
    RESTORE_SYM=504
    RESTRICT=505
    RESUME_SYM=506
    RETURN_SYM=507
    RETURNS_SYM=508
    REVERSE=509
    REVOKE=510
    RIGHT=511
    ROLLBACK=512
    ROLLUP_SYM=513
    ROUND=514
    ROUTINE_SYM=515
    ROW_FORMAT_SYM=516
    ROW_SYM=517
    ROWS_SYM=518
    RPAD=519
    RTREE_SYM=520
    RTRIM=521
    SAVEPOINT=522
    SCHEDULE_SYM=523
    SCHEMA=524
    SEC_TO_TIME=525
    SECOND=526
    SECOND_MICROSECOND=527
    SECURITY_SYM=528
    SELECT=529
    SENSITIVE_SYM=530
    SEPARATOR_SYM=531
    SERIAL_SYM=532
    SERIALIZABLE_SYM=533
    SERVER_SYM=534
    SESSION_SYM=535
    SESSION_USER=536
    SET_SYM=537
    SHARED_SYM=538
    SHARE_SYM=539
    SHOW=540
    SHUTDOWN=541
    SIGN=542
    SIGNED_SYM=543
    SIMPLE_SYM=544
    SIN=545
    SJIS=546
    SLAVE=547
    SLEEP=548
    SMALLINT=549
    SNAPSHOT_SYM=550
    SOCKET_SYM=551
    SONAME_SYM=552
    SOUNDEX=553
    SOUNDS_SYM=554
    SOURCE_SYM=555
    SPACE=556
    SPATIAL_SYM=557
    SPECIFIC_SYM=558
    SQL_BIG_RESULT=559
    SQL_BUFFER_RESULT=560
    SQL_CACHE_SYM=561
    SQL_CALC_FOUND_ROWS=562
    SQL_NO_CACHE_SYM=563
    SQL_SMALL_RESULT=564
    SQL_SYM=565
    SQL_THREAD=566
    SQLEXCEPTION_SYM=567
    SQLSTATE_SYM=568
    SQLWARNING_SYM=569
    SQRT=570
    SSL_SYM=571
    START_SYM=572
    STARTING=573
    STATS_AUTO_RECALC=574
    STATS_PERSISTENT=575
    STARTS_SYM=576
    STATUS_SYM=577
    STD=578
    STDDEV=579
    STDDEV_POP=580
    STDDEV_SAMP=581
    STOP_SYM=582
    STORAGE_SYM=583
    STR_TO_DATE=584
    STRAIGHT_JOIN=585
    STRCMP=586
    STRING_SYM=587
    SUBJECT_SYM=588
    SUBPARTITION_SYM=589
    SUBPARTITIONS_SYM=590
    SUBSTRING=591
    SUBSTRING_INDEX=592
    SUBTIME=593
    SUM=594
    SUPER_SYM=595
    SUSPEND_SYM=596
    SWAPS_SYM=597
    SWE7=598
    SWITCHES_SYM=599
    SYSDATE=600
    SYSTEM_USER=601
    TABLE=602
    TABLE_CHECKSUM_SYM=603
    TABLES=604
    TABLESPACE=605
    TAN=606
    TEMPORARY=607
    TEMPTABLE_SYM=608
    TERMINATED=609
    TEXT_SYM=610
    THAN_SYM=611
    THEN_SYM=612
    TIME_FORMAT=613
    TIME_SYM=614
    TIME_TO_SEC=615
    TIMEDIFF=616
    TIMESTAMP=617
    TIMESTAMPADD=618
    TIMESTAMPDIFF=619
    TINYBLOB=620
    TINYINT=621
    TINYTEXT=622
    TIS620=623
    TO_BASE64=624
    TO_DAYS=625
    TO_SECONDS=626
    TO_SYM=627
    TRAILING=628
    TRANSACTION=629
    TRANSACTIONAL_SYM=630
    TRIGGER_SYM=631
    TRIGGERS_SYM=632
    TRIM=633
    TRUE_SYM=634
    TRUNCATE=635
    TYPE_SYM=636
    TYPES_SYM=637
    UCS2=638
    UJIS=639
    UNCOMMITTED_SYM=640
    UNCOMPRESS=641
    UNCOMPRESSED_LENGTH=642
    UNDEFINED_SYM=643
    UNDO_BUFFER_SIZE_SYM=644
    UNDO_SYM=645
    UNDOFILE_SYM=646
    UNHEX=647
    UNICODE_SYM=648
    UNINSTALL_SYM=649
    UNION_SYM=650
    UNIQUE_SYM=651
    UNIX_TIMESTAMP=652
    UNKNOWN_SYM=653
    UNLOCK_SYM=654
    UNSIGNED_SYM=655
    UNTIL_SYM=656
    UPDATE=657
    UPGRADE_SYM=658
    UPPER=659
    USAGE=660
    USE_FRM=661
    USE_SYM=662
    USER=663
    USING_SYM=664
    UTC_DATE=665
    UTC_TIME=666
    UTC_TIMESTAMP=667
    UTF16LE=668
    UTF16=669
    UTF32=670
    UTF8=671
    UUID=672
    VALUE_SYM=673
    VALUES=674
    VAR_POP=675
    VAR_SAMP=676
    VARBINARY=677
    VARCHAR=678
    VARIABLES=679
    VARIANCE=680
    VARYING=681
    VERSION_SYM=682
    VIEW_SYM=683
    WAIT_SYM=684
    WARNINGS=685
    WEEK=686
    WEEKDAY=687
    WEEKOFYEAR=688
    WEIGHT_STRING=689
    WHEN_SYM=690
    WHERE=691
    WHILE_SYM=692
    WITH=693
    WORK_SYM=694
    WRAPPER_SYM=695
    WRITE_SYM=696
    X509_SYM=697
    XA_SYM=698
    XML_SYM=699
    XOR=700
    YEAR=701
    YEAR_MONTH=702
    YEARWEEK=703
    ZEROFILL=704
    DIVIDE=705
    MOD_SYM=706
    OR_SYM=707
    AND_SYM=708
    ARROW=709
    EQ_SYM=710
    NOT_EQ=711
    LET=712
    GET=713
    SET_VAR=714
    SHIFT_LEFT=715
    SHIFT_RIGHT=716
    ALL_FIELDS=717
    SEMI=718
    COLON=719
    DOT=720
    COMMA=721
    ASTERISK=722
    RPAREN=723
    LPAREN=724
    RBRACK=725
    LBRACK=726
    PLUS=727
    MINUS=728
    NEGATION=729
    VERTBAR=730
    BITAND=731
    POWER_OP=732
    GTH=733
    LTH=734
    INTEGER_NUM=735
    HEX_DIGIT=736
    BIT_NUM=737
    REAL_NUMBER=738
    TEXT_STRING=739
    ID=740
    USER_VAR=741
    WHITE_SPACE=742
    SL_COMMENT=743
    ML_COMMENT=744

    def __init__(self, input:TokenStream):
        super().__init__(input)
        self.checkVersion("4.6")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None





    class Relational_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ_SYM(self):
            return self.getToken(MySQLParser.EQ_SYM, 0)

        def LTH(self):
            return self.getToken(MySQLParser.LTH, 0)

        def GTH(self):
            return self.getToken(MySQLParser.GTH, 0)

        def NOT_EQ(self):
            return self.getToken(MySQLParser.NOT_EQ, 0)

        def LET(self):
            return self.getToken(MySQLParser.LET, 0)

        def GET(self):
            return self.getToken(MySQLParser.GET, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_relational_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelational_op" ):
                listener.enterRelational_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelational_op" ):
                listener.exitRelational_op(self)




    def relational_op(self):

        localctx = MySQLParser.Relational_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_relational_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 164
            _la = self._input.LA(1)
            if not(((((_la - 710)) & ~0x3f) == 0 and ((1 << (_la - 710)) & ((1 << (MySQLParser.EQ_SYM - 710)) | (1 << (MySQLParser.NOT_EQ - 710)) | (1 << (MySQLParser.LET - 710)) | (1 << (MySQLParser.GET - 710)) | (1 << (MySQLParser.GTH - 710)) | (1 << (MySQLParser.LTH - 710)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cast_data_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BINARY(self):
            return self.getToken(MySQLParser.BINARY, 0)

        def INTEGER_NUM(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.INTEGER_NUM)
            else:
                return self.getToken(MySQLParser.INTEGER_NUM, i)

        def CHAR(self):
            return self.getToken(MySQLParser.CHAR, 0)

        def DATE_SYM(self):
            return self.getToken(MySQLParser.DATE_SYM, 0)

        def DATETIME(self):
            return self.getToken(MySQLParser.DATETIME, 0)

        def DECIMAL_SYM(self):
            return self.getToken(MySQLParser.DECIMAL_SYM, 0)

        def COMMA(self):
            return self.getToken(MySQLParser.COMMA, 0)

        def SIGNED_SYM(self):
            return self.getToken(MySQLParser.SIGNED_SYM, 0)

        def INTEGER_SYM(self):
            return self.getToken(MySQLParser.INTEGER_SYM, 0)

        def TIME_SYM(self):
            return self.getToken(MySQLParser.TIME_SYM, 0)

        def UNSIGNED_SYM(self):
            return self.getToken(MySQLParser.UNSIGNED_SYM, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_cast_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCast_data_type" ):
                listener.enterCast_data_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCast_data_type" ):
                listener.exitCast_data_type(self)




    def cast_data_type(self):

        localctx = MySQLParser.Cast_data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_cast_data_type)
        self._la = 0 # Token type
        try:
            self.state = 193
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.BINARY]:
                self.enterOuterAlt(localctx, 1)
                self.state = 166
                self.match(MySQLParser.BINARY)
                self.state = 168
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.INTEGER_NUM:
                    self.state = 167
                    self.match(MySQLParser.INTEGER_NUM)


                pass
            elif token in [MySQLParser.CHAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 170
                self.match(MySQLParser.CHAR)
                self.state = 172
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.INTEGER_NUM:
                    self.state = 171
                    self.match(MySQLParser.INTEGER_NUM)


                pass
            elif token in [MySQLParser.DATE_SYM]:
                self.enterOuterAlt(localctx, 3)
                self.state = 174
                self.match(MySQLParser.DATE_SYM)
                pass
            elif token in [MySQLParser.DATETIME]:
                self.enterOuterAlt(localctx, 4)
                self.state = 175
                self.match(MySQLParser.DATETIME)
                pass
            elif token in [MySQLParser.DECIMAL_SYM]:
                self.enterOuterAlt(localctx, 5)
                self.state = 176
                self.match(MySQLParser.DECIMAL_SYM)
                self.state = 182
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.INTEGER_NUM:
                    self.state = 177
                    self.match(MySQLParser.INTEGER_NUM)
                    self.state = 180
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySQLParser.COMMA:
                        self.state = 178
                        self.match(MySQLParser.COMMA)
                        self.state = 179
                        self.match(MySQLParser.INTEGER_NUM)




                pass
            elif token in [MySQLParser.SIGNED_SYM]:
                self.enterOuterAlt(localctx, 6)
                self.state = 184
                self.match(MySQLParser.SIGNED_SYM)
                self.state = 186
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.INTEGER_SYM:
                    self.state = 185
                    self.match(MySQLParser.INTEGER_SYM)


                pass
            elif token in [MySQLParser.TIME_SYM]:
                self.enterOuterAlt(localctx, 7)
                self.state = 188
                self.match(MySQLParser.TIME_SYM)
                pass
            elif token in [MySQLParser.UNSIGNED_SYM]:
                self.enterOuterAlt(localctx, 8)
                self.state = 189
                self.match(MySQLParser.UNSIGNED_SYM)
                self.state = 191
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.INTEGER_SYM:
                    self.state = 190
                    self.match(MySQLParser.INTEGER_SYM)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Search_modifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN_SYM(self):
            return self.getToken(MySQLParser.IN_SYM, 0)

        def NATURAL(self):
            return self.getToken(MySQLParser.NATURAL, 0)

        def LANGUAGE(self):
            return self.getToken(MySQLParser.LANGUAGE, 0)

        def MODE_SYM(self):
            return self.getToken(MySQLParser.MODE_SYM, 0)

        def WITH(self):
            return self.getToken(MySQLParser.WITH, 0)

        def QUERY_SYM(self):
            return self.getToken(MySQLParser.QUERY_SYM, 0)

        def EXPANSION_SYM(self):
            return self.getToken(MySQLParser.EXPANSION_SYM, 0)

        def BOOLEAN_SYM(self):
            return self.getToken(MySQLParser.BOOLEAN_SYM, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_search_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearch_modifier" ):
                listener.enterSearch_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearch_modifier" ):
                listener.exitSearch_modifier(self)




    def search_modifier(self):

        localctx = MySQLParser.Search_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_search_modifier)
        try:
            self.state = 212
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 195
                self.match(MySQLParser.IN_SYM)
                self.state = 196
                self.match(MySQLParser.NATURAL)
                self.state = 197
                self.match(MySQLParser.LANGUAGE)
                self.state = 198
                self.match(MySQLParser.MODE_SYM)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 199
                self.match(MySQLParser.IN_SYM)
                self.state = 200
                self.match(MySQLParser.NATURAL)
                self.state = 201
                self.match(MySQLParser.LANGUAGE)
                self.state = 202
                self.match(MySQLParser.MODE_SYM)
                self.state = 203
                self.match(MySQLParser.WITH)
                self.state = 204
                self.match(MySQLParser.QUERY_SYM)
                self.state = 205
                self.match(MySQLParser.EXPANSION_SYM)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 206
                self.match(MySQLParser.IN_SYM)
                self.state = 207
                self.match(MySQLParser.BOOLEAN_SYM)
                self.state = 208
                self.match(MySQLParser.MODE_SYM)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 209
                self.match(MySQLParser.WITH)
                self.state = 210
                self.match(MySQLParser.QUERY_SYM)
                self.state = 211
                self.match(MySQLParser.EXPANSION_SYM)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Transcoding_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LATIN1(self):
            return self.getToken(MySQLParser.LATIN1, 0)

        def UTF8(self):
            return self.getToken(MySQLParser.UTF8, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_transcoding_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTranscoding_name" ):
                listener.enterTranscoding_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTranscoding_name" ):
                listener.exitTranscoding_name(self)




    def transcoding_name(self):

        localctx = MySQLParser.Transcoding_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_transcoding_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 214
            _la = self._input.LA(1)
            if not(_la==MySQLParser.LATIN1 or _la==MySQLParser.UTF8):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Interval_unitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SECOND(self):
            return self.getToken(MySQLParser.SECOND, 0)

        def MINUTE(self):
            return self.getToken(MySQLParser.MINUTE, 0)

        def HOUR(self):
            return self.getToken(MySQLParser.HOUR, 0)

        def DAY_SYM(self):
            return self.getToken(MySQLParser.DAY_SYM, 0)

        def WEEK(self):
            return self.getToken(MySQLParser.WEEK, 0)

        def MONTH(self):
            return self.getToken(MySQLParser.MONTH, 0)

        def QUARTER(self):
            return self.getToken(MySQLParser.QUARTER, 0)

        def YEAR(self):
            return self.getToken(MySQLParser.YEAR, 0)

        def SECOND_MICROSECOND(self):
            return self.getToken(MySQLParser.SECOND_MICROSECOND, 0)

        def MINUTE_MICROSECOND(self):
            return self.getToken(MySQLParser.MINUTE_MICROSECOND, 0)

        def MINUTE_SECOND(self):
            return self.getToken(MySQLParser.MINUTE_SECOND, 0)

        def HOUR_MICROSECOND(self):
            return self.getToken(MySQLParser.HOUR_MICROSECOND, 0)

        def HOUR_SECOND(self):
            return self.getToken(MySQLParser.HOUR_SECOND, 0)

        def HOUR_MINUTE(self):
            return self.getToken(MySQLParser.HOUR_MINUTE, 0)

        def DAY_MICROSECOND(self):
            return self.getToken(MySQLParser.DAY_MICROSECOND, 0)

        def DAY_SECOND(self):
            return self.getToken(MySQLParser.DAY_SECOND, 0)

        def DAY_MINUTE(self):
            return self.getToken(MySQLParser.DAY_MINUTE, 0)

        def DAY_HOUR(self):
            return self.getToken(MySQLParser.DAY_HOUR, 0)

        def YEAR_MONTH(self):
            return self.getToken(MySQLParser.YEAR_MONTH, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_interval_unit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval_unit" ):
                listener.enterInterval_unit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval_unit" ):
                listener.exitInterval_unit(self)




    def interval_unit(self):

        localctx = MySQLParser.Interval_unitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_interval_unit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 216
            _la = self._input.LA(1)
            if not(((((_la - 138)) & ~0x3f) == 0 and ((1 << (_la - 138)) & ((1 << (MySQLParser.DAY_SYM - 138)) | (1 << (MySQLParser.DAY_HOUR - 138)) | (1 << (MySQLParser.DAY_MICROSECOND - 138)) | (1 << (MySQLParser.DAY_MINUTE - 138)) | (1 << (MySQLParser.DAY_SECOND - 138)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (MySQLParser.HOUR - 256)) | (1 << (MySQLParser.HOUR_MICROSECOND - 256)) | (1 << (MySQLParser.HOUR_MINUTE - 256)) | (1 << (MySQLParser.HOUR_SECOND - 256)))) != 0) or ((((_la - 388)) & ~0x3f) == 0 and ((1 << (_la - 388)) & ((1 << (MySQLParser.MINUTE - 388)) | (1 << (MySQLParser.MINUTE_MICROSECOND - 388)) | (1 << (MySQLParser.MINUTE_SECOND - 388)) | (1 << (MySQLParser.MONTH - 388)))) != 0) or ((((_la - 469)) & ~0x3f) == 0 and ((1 << (_la - 469)) & ((1 << (MySQLParser.QUARTER - 469)) | (1 << (MySQLParser.SECOND - 469)) | (1 << (MySQLParser.SECOND_MICROSECOND - 469)))) != 0) or ((((_la - 686)) & ~0x3f) == 0 and ((1 << (_la - 686)) & ((1 << (MySQLParser.WEEK - 686)) | (1 << (MySQLParser.YEAR - 686)) | (1 << (MySQLParser.YEAR_MONTH - 686)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class String_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TEXT_STRING(self):
            return self.getToken(MySQLParser.TEXT_STRING, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_string_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_literal" ):
                listener.enterString_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_literal" ):
                listener.exitString_literal(self)




    def string_literal(self):

        localctx = MySQLParser.String_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_string_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 218
            self.match(MySQLParser.TEXT_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Number_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_NUM(self):
            return self.getToken(MySQLParser.INTEGER_NUM, 0)

        def REAL_NUMBER(self):
            return self.getToken(MySQLParser.REAL_NUMBER, 0)

        def PLUS(self):
            return self.getToken(MySQLParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(MySQLParser.MINUS, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_number_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_literal" ):
                listener.enterNumber_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_literal" ):
                listener.exitNumber_literal(self)




    def number_literal(self):

        localctx = MySQLParser.Number_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_number_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 221
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.PLUS or _la==MySQLParser.MINUS:
                self.state = 220
                _la = self._input.LA(1)
                if not(_la==MySQLParser.PLUS or _la==MySQLParser.MINUS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 223
            _la = self._input.LA(1)
            if not(_la==MySQLParser.INTEGER_NUM or _la==MySQLParser.REAL_NUMBER):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Hex_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HEX_DIGIT(self):
            return self.getToken(MySQLParser.HEX_DIGIT, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_hex_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHex_literal" ):
                listener.enterHex_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHex_literal" ):
                listener.exitHex_literal(self)




    def hex_literal(self):

        localctx = MySQLParser.Hex_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_hex_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 225
            self.match(MySQLParser.HEX_DIGIT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Boolean_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE_SYM(self):
            return self.getToken(MySQLParser.TRUE_SYM, 0)

        def FALSE_SYM(self):
            return self.getToken(MySQLParser.FALSE_SYM, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_boolean_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoolean_literal" ):
                listener.enterBoolean_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoolean_literal" ):
                listener.exitBoolean_literal(self)




    def boolean_literal(self):

        localctx = MySQLParser.Boolean_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_boolean_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 227
            _la = self._input.LA(1)
            if not(_la==MySQLParser.FALSE_SYM or _la==MySQLParser.TRUE_SYM):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Bit_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BIT_NUM(self):
            return self.getToken(MySQLParser.BIT_NUM, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_bit_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBit_literal" ):
                listener.enterBit_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBit_literal" ):
                listener.exitBit_literal(self)




    def bit_literal(self):

        localctx = MySQLParser.Bit_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_bit_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 229
            self.match(MySQLParser.BIT_NUM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Literal_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string_literal(self):
            return self.getTypedRuleContext(MySQLParser.String_literalContext,0)


        def number_literal(self):
            return self.getTypedRuleContext(MySQLParser.Number_literalContext,0)


        def hex_literal(self):
            return self.getTypedRuleContext(MySQLParser.Hex_literalContext,0)


        def boolean_literal(self):
            return self.getTypedRuleContext(MySQLParser.Boolean_literalContext,0)


        def bit_literal(self):
            return self.getTypedRuleContext(MySQLParser.Bit_literalContext,0)


        def NULL_SYM(self):
            return self.getToken(MySQLParser.NULL_SYM, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_literal_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral_value" ):
                listener.enterLiteral_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral_value" ):
                listener.exitLiteral_value(self)




    def literal_value(self):

        localctx = MySQLParser.Literal_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_literal_value)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 237
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.TEXT_STRING]:
                self.state = 231
                self.string_literal()
                pass
            elif token in [MySQLParser.PLUS, MySQLParser.MINUS, MySQLParser.INTEGER_NUM, MySQLParser.REAL_NUMBER]:
                self.state = 232
                self.number_literal()
                pass
            elif token in [MySQLParser.HEX_DIGIT]:
                self.state = 233
                self.hex_literal()
                pass
            elif token in [MySQLParser.FALSE_SYM, MySQLParser.TRUE_SYM]:
                self.state = 234
                self.boolean_literal()
                pass
            elif token in [MySQLParser.BIT_NUM]:
                self.state = 235
                self.bit_literal()
                pass
            elif token in [MySQLParser.NULL_SYM]:
                self.state = 236
                self.match(MySQLParser.NULL_SYM)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def number_functions(self):
            return self.getTypedRuleContext(MySQLParser.Number_functionsContext,0)


        def char_functions(self):
            return self.getTypedRuleContext(MySQLParser.Char_functionsContext,0)


        def time_functions(self):
            return self.getTypedRuleContext(MySQLParser.Time_functionsContext,0)


        def other_functions(self):
            return self.getTypedRuleContext(MySQLParser.Other_functionsContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_functionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionList" ):
                listener.enterFunctionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionList" ):
                listener.exitFunctionList(self)




    def functionList(self):

        localctx = MySQLParser.FunctionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_functionList)
        try:
            self.state = 243
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 239
                self.number_functions()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 240
                self.char_functions()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 241
                self.time_functions()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 242
                self.other_functions()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Number_functionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABS(self):
            return self.getToken(MySQLParser.ABS, 0)

        def ACOS(self):
            return self.getToken(MySQLParser.ACOS, 0)

        def ASIN(self):
            return self.getToken(MySQLParser.ASIN, 0)

        def ATAN2(self):
            return self.getToken(MySQLParser.ATAN2, 0)

        def ATAN(self):
            return self.getToken(MySQLParser.ATAN, 0)

        def CEIL(self):
            return self.getToken(MySQLParser.CEIL, 0)

        def CEILING(self):
            return self.getToken(MySQLParser.CEILING, 0)

        def CONV(self):
            return self.getToken(MySQLParser.CONV, 0)

        def COS(self):
            return self.getToken(MySQLParser.COS, 0)

        def COT(self):
            return self.getToken(MySQLParser.COT, 0)

        def CRC32(self):
            return self.getToken(MySQLParser.CRC32, 0)

        def DEGREES(self):
            return self.getToken(MySQLParser.DEGREES, 0)

        def EXP(self):
            return self.getToken(MySQLParser.EXP, 0)

        def FLOOR(self):
            return self.getToken(MySQLParser.FLOOR, 0)

        def LN(self):
            return self.getToken(MySQLParser.LN, 0)

        def LOG10(self):
            return self.getToken(MySQLParser.LOG10, 0)

        def LOG2(self):
            return self.getToken(MySQLParser.LOG2, 0)

        def LOG(self):
            return self.getToken(MySQLParser.LOG, 0)

        def MOD(self):
            return self.getToken(MySQLParser.MOD, 0)

        def PI(self):
            return self.getToken(MySQLParser.PI, 0)

        def POW(self):
            return self.getToken(MySQLParser.POW, 0)

        def POWER(self):
            return self.getToken(MySQLParser.POWER, 0)

        def RADIANS(self):
            return self.getToken(MySQLParser.RADIANS, 0)

        def RAND(self):
            return self.getToken(MySQLParser.RAND, 0)

        def ROUND(self):
            return self.getToken(MySQLParser.ROUND, 0)

        def SIGN(self):
            return self.getToken(MySQLParser.SIGN, 0)

        def SIN(self):
            return self.getToken(MySQLParser.SIN, 0)

        def SQRT(self):
            return self.getToken(MySQLParser.SQRT, 0)

        def TAN(self):
            return self.getToken(MySQLParser.TAN, 0)

        def TRUNCATE(self):
            return self.getToken(MySQLParser.TRUNCATE, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_number_functions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_functions" ):
                listener.enterNumber_functions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_functions" ):
                listener.exitNumber_functions(self)




    def number_functions(self):

        localctx = MySQLParser.Number_functionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_number_functions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 245
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySQLParser.ABS) | (1 << MySQLParser.ACOS) | (1 << MySQLParser.ASIN) | (1 << MySQLParser.ATAN) | (1 << MySQLParser.ATAN2) | (1 << MySQLParser.CEIL) | (1 << MySQLParser.CEILING))) != 0) or ((((_la - 103)) & ~0x3f) == 0 and ((1 << (_la - 103)) & ((1 << (MySQLParser.CONV - 103)) | (1 << (MySQLParser.COS - 103)) | (1 << (MySQLParser.COT - 103)) | (1 << (MySQLParser.CRC32 - 103)) | (1 << (MySQLParser.DEGREES - 103)))) != 0) or _la==MySQLParser.EXP or _la==MySQLParser.FLOOR or ((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (MySQLParser.LN - 325)) | (1 << (MySQLParser.LOG - 325)) | (1 << (MySQLParser.LOG10 - 325)) | (1 << (MySQLParser.LOG2 - 325)))) != 0) or _la==MySQLParser.MOD or _la==MySQLParser.PI or ((((_la - 455)) & ~0x3f) == 0 and ((1 << (_la - 455)) & ((1 << (MySQLParser.POW - 455)) | (1 << (MySQLParser.POWER - 455)) | (1 << (MySQLParser.RADIANS - 455)) | (1 << (MySQLParser.RAND - 455)) | (1 << (MySQLParser.ROUND - 455)))) != 0) or ((((_la - 542)) & ~0x3f) == 0 and ((1 << (_la - 542)) & ((1 << (MySQLParser.SIGN - 542)) | (1 << (MySQLParser.SIN - 542)) | (1 << (MySQLParser.SQRT - 542)))) != 0) or _la==MySQLParser.TAN or _la==MySQLParser.TRUNCATE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Char_functionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASCII_SYM(self):
            return self.getToken(MySQLParser.ASCII_SYM, 0)

        def BIN(self):
            return self.getToken(MySQLParser.BIN, 0)

        def BIT_LENGTH(self):
            return self.getToken(MySQLParser.BIT_LENGTH, 0)

        def CHAR_LENGTH(self):
            return self.getToken(MySQLParser.CHAR_LENGTH, 0)

        def CHAR(self):
            return self.getToken(MySQLParser.CHAR, 0)

        def CONCAT_WS(self):
            return self.getToken(MySQLParser.CONCAT_WS, 0)

        def CONCAT(self):
            return self.getToken(MySQLParser.CONCAT, 0)

        def ELT(self):
            return self.getToken(MySQLParser.ELT, 0)

        def EXPORT_SET(self):
            return self.getToken(MySQLParser.EXPORT_SET, 0)

        def FIELD(self):
            return self.getToken(MySQLParser.FIELD, 0)

        def FIND_IN_SET(self):
            return self.getToken(MySQLParser.FIND_IN_SET, 0)

        def FORMAT(self):
            return self.getToken(MySQLParser.FORMAT, 0)

        def FROM_BASE64(self):
            return self.getToken(MySQLParser.FROM_BASE64, 0)

        def HEX(self):
            return self.getToken(MySQLParser.HEX, 0)

        def INSERT(self):
            return self.getToken(MySQLParser.INSERT, 0)

        def INSTR(self):
            return self.getToken(MySQLParser.INSTR, 0)

        def LEFT(self):
            return self.getToken(MySQLParser.LEFT, 0)

        def LENGTH(self):
            return self.getToken(MySQLParser.LENGTH, 0)

        def LOAD_FILE(self):
            return self.getToken(MySQLParser.LOAD_FILE, 0)

        def LOCATE(self):
            return self.getToken(MySQLParser.LOCATE, 0)

        def LOWER(self):
            return self.getToken(MySQLParser.LOWER, 0)

        def LPAD(self):
            return self.getToken(MySQLParser.LPAD, 0)

        def LTRIM(self):
            return self.getToken(MySQLParser.LTRIM, 0)

        def MAKE_SET(self):
            return self.getToken(MySQLParser.MAKE_SET, 0)

        def MID(self):
            return self.getToken(MySQLParser.MID, 0)

        def OCT(self):
            return self.getToken(MySQLParser.OCT, 0)

        def ORD(self):
            return self.getToken(MySQLParser.ORD, 0)

        def QUOTE(self):
            return self.getToken(MySQLParser.QUOTE, 0)

        def REPEAT(self):
            return self.getToken(MySQLParser.REPEAT, 0)

        def REPLACE(self):
            return self.getToken(MySQLParser.REPLACE, 0)

        def REVERSE(self):
            return self.getToken(MySQLParser.REVERSE, 0)

        def RIGHT(self):
            return self.getToken(MySQLParser.RIGHT, 0)

        def RPAD(self):
            return self.getToken(MySQLParser.RPAD, 0)

        def RTRIM(self):
            return self.getToken(MySQLParser.RTRIM, 0)

        def SOUNDEX(self):
            return self.getToken(MySQLParser.SOUNDEX, 0)

        def SPACE(self):
            return self.getToken(MySQLParser.SPACE, 0)

        def STRCMP(self):
            return self.getToken(MySQLParser.STRCMP, 0)

        def SUBSTRING_INDEX(self):
            return self.getToken(MySQLParser.SUBSTRING_INDEX, 0)

        def SUBSTRING(self):
            return self.getToken(MySQLParser.SUBSTRING, 0)

        def TO_BASE64(self):
            return self.getToken(MySQLParser.TO_BASE64, 0)

        def TRIM(self):
            return self.getToken(MySQLParser.TRIM, 0)

        def UNHEX(self):
            return self.getToken(MySQLParser.UNHEX, 0)

        def UPPER(self):
            return self.getToken(MySQLParser.UPPER, 0)

        def WEIGHT_STRING(self):
            return self.getToken(MySQLParser.WEIGHT_STRING, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_char_functions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChar_functions" ):
                listener.enterChar_functions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChar_functions" ):
                listener.exitChar_functions(self)




    def char_functions(self):

        localctx = MySQLParser.Char_functionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_char_functions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 247
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySQLParser.ASCII_SYM) | (1 << MySQLParser.BIN) | (1 << MySQLParser.BIT_LENGTH))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (MySQLParser.CHAR - 67)) | (1 << (MySQLParser.CHAR_LENGTH - 67)) | (1 << (MySQLParser.CONCAT - 67)) | (1 << (MySQLParser.CONCAT_WS - 67)))) != 0) or ((((_la - 179)) & ~0x3f) == 0 and ((1 << (_la - 179)) & ((1 << (MySQLParser.ELT - 179)) | (1 << (MySQLParser.EXPORT_SET - 179)) | (1 << (MySQLParser.FIELD - 179)) | (1 << (MySQLParser.FIND_IN_SET - 179)) | (1 << (MySQLParser.FORMAT - 179)) | (1 << (MySQLParser.FROM_BASE64 - 179)))) != 0) or ((((_la - 252)) & ~0x3f) == 0 and ((1 << (_la - 252)) & ((1 << (MySQLParser.HEX - 252)) | (1 << (MySQLParser.INSERT - 252)) | (1 << (MySQLParser.INSTR - 252)) | (1 << (MySQLParser.LEFT - 252)))) != 0) or ((((_la - 316)) & ~0x3f) == 0 and ((1 << (_la - 316)) & ((1 << (MySQLParser.LENGTH - 316)) | (1 << (MySQLParser.LOAD_FILE - 316)) | (1 << (MySQLParser.LOCATE - 316)) | (1 << (MySQLParser.LOWER - 316)) | (1 << (MySQLParser.LPAD - 316)) | (1 << (MySQLParser.LTRIM - 316)) | (1 << (MySQLParser.MAKE_SET - 316)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (MySQLParser.MID - 384)) | (1 << (MySQLParser.OCT - 384)) | (1 << (MySQLParser.ORD - 384)))) != 0) or ((((_la - 472)) & ~0x3f) == 0 and ((1 << (_la - 472)) & ((1 << (MySQLParser.QUOTE - 472)) | (1 << (MySQLParser.REPEAT - 472)) | (1 << (MySQLParser.REPLACE - 472)) | (1 << (MySQLParser.REVERSE - 472)) | (1 << (MySQLParser.RIGHT - 472)) | (1 << (MySQLParser.RPAD - 472)) | (1 << (MySQLParser.RTRIM - 472)))) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & ((1 << (MySQLParser.SOUNDEX - 553)) | (1 << (MySQLParser.SPACE - 553)) | (1 << (MySQLParser.STRCMP - 553)) | (1 << (MySQLParser.SUBSTRING - 553)) | (1 << (MySQLParser.SUBSTRING_INDEX - 553)))) != 0) or ((((_la - 624)) & ~0x3f) == 0 and ((1 << (_la - 624)) & ((1 << (MySQLParser.TO_BASE64 - 624)) | (1 << (MySQLParser.TRIM - 624)) | (1 << (MySQLParser.UNHEX - 624)) | (1 << (MySQLParser.UPPER - 624)))) != 0) or _la==MySQLParser.WEIGHT_STRING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Time_functionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADDDATE(self):
            return self.getToken(MySQLParser.ADDDATE, 0)

        def ADDTIME(self):
            return self.getToken(MySQLParser.ADDTIME, 0)

        def CONVERT_TZ(self):
            return self.getToken(MySQLParser.CONVERT_TZ, 0)

        def CURDATE(self):
            return self.getToken(MySQLParser.CURDATE, 0)

        def CURTIME(self):
            return self.getToken(MySQLParser.CURTIME, 0)

        def DATE_ADD(self):
            return self.getToken(MySQLParser.DATE_ADD, 0)

        def DATE_FORMAT(self):
            return self.getToken(MySQLParser.DATE_FORMAT, 0)

        def DATE_SUB(self):
            return self.getToken(MySQLParser.DATE_SUB, 0)

        def DATE_SYM(self):
            return self.getToken(MySQLParser.DATE_SYM, 0)

        def DATEDIFF(self):
            return self.getToken(MySQLParser.DATEDIFF, 0)

        def DAYNAME(self):
            return self.getToken(MySQLParser.DAYNAME, 0)

        def DAYOFMONTH(self):
            return self.getToken(MySQLParser.DAYOFMONTH, 0)

        def DAYOFWEEK(self):
            return self.getToken(MySQLParser.DAYOFWEEK, 0)

        def DAYOFYEAR(self):
            return self.getToken(MySQLParser.DAYOFYEAR, 0)

        def EXTRACT(self):
            return self.getToken(MySQLParser.EXTRACT, 0)

        def FROM_DAYS(self):
            return self.getToken(MySQLParser.FROM_DAYS, 0)

        def FROM_UNIXTIME(self):
            return self.getToken(MySQLParser.FROM_UNIXTIME, 0)

        def GET_FORMAT(self):
            return self.getToken(MySQLParser.GET_FORMAT, 0)

        def HOUR(self):
            return self.getToken(MySQLParser.HOUR, 0)

        def LAST_DAY(self):
            return self.getToken(MySQLParser.LAST_DAY, 0)

        def MAKEDATE(self):
            return self.getToken(MySQLParser.MAKEDATE, 0)

        def MAKETIME(self):
            return self.getToken(MySQLParser.MAKETIME, 0)

        def MICROSECOND(self):
            return self.getToken(MySQLParser.MICROSECOND, 0)

        def MINUTE(self):
            return self.getToken(MySQLParser.MINUTE, 0)

        def MONTH(self):
            return self.getToken(MySQLParser.MONTH, 0)

        def MONTHNAME(self):
            return self.getToken(MySQLParser.MONTHNAME, 0)

        def NOW(self):
            return self.getToken(MySQLParser.NOW, 0)

        def PERIOD_ADD(self):
            return self.getToken(MySQLParser.PERIOD_ADD, 0)

        def PERIOD_DIFF(self):
            return self.getToken(MySQLParser.PERIOD_DIFF, 0)

        def QUARTER(self):
            return self.getToken(MySQLParser.QUARTER, 0)

        def SEC_TO_TIME(self):
            return self.getToken(MySQLParser.SEC_TO_TIME, 0)

        def SECOND(self):
            return self.getToken(MySQLParser.SECOND, 0)

        def STR_TO_DATE(self):
            return self.getToken(MySQLParser.STR_TO_DATE, 0)

        def SUBTIME(self):
            return self.getToken(MySQLParser.SUBTIME, 0)

        def SYSDATE(self):
            return self.getToken(MySQLParser.SYSDATE, 0)

        def TIME_FORMAT(self):
            return self.getToken(MySQLParser.TIME_FORMAT, 0)

        def TIME_TO_SEC(self):
            return self.getToken(MySQLParser.TIME_TO_SEC, 0)

        def TIME_SYM(self):
            return self.getToken(MySQLParser.TIME_SYM, 0)

        def TIMEDIFF(self):
            return self.getToken(MySQLParser.TIMEDIFF, 0)

        def TIMESTAMP(self):
            return self.getToken(MySQLParser.TIMESTAMP, 0)

        def TIMESTAMPADD(self):
            return self.getToken(MySQLParser.TIMESTAMPADD, 0)

        def TIMESTAMPDIFF(self):
            return self.getToken(MySQLParser.TIMESTAMPDIFF, 0)

        def TO_DAYS(self):
            return self.getToken(MySQLParser.TO_DAYS, 0)

        def TO_SECONDS(self):
            return self.getToken(MySQLParser.TO_SECONDS, 0)

        def UNIX_TIMESTAMP(self):
            return self.getToken(MySQLParser.UNIX_TIMESTAMP, 0)

        def UTC_DATE(self):
            return self.getToken(MySQLParser.UTC_DATE, 0)

        def UTC_TIME(self):
            return self.getToken(MySQLParser.UTC_TIME, 0)

        def UTC_TIMESTAMP(self):
            return self.getToken(MySQLParser.UTC_TIMESTAMP, 0)

        def WEEK(self):
            return self.getToken(MySQLParser.WEEK, 0)

        def WEEKDAY(self):
            return self.getToken(MySQLParser.WEEKDAY, 0)

        def WEEKOFYEAR(self):
            return self.getToken(MySQLParser.WEEKOFYEAR, 0)

        def YEAR(self):
            return self.getToken(MySQLParser.YEAR, 0)

        def YEARWEEK(self):
            return self.getToken(MySQLParser.YEARWEEK, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_time_functions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTime_functions" ):
                listener.enterTime_functions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTime_functions" ):
                listener.exitTime_functions(self)




    def time_functions(self):

        localctx = MySQLParser.Time_functionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_time_functions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 249
            _la = self._input.LA(1)
            if not(_la==MySQLParser.ADDDATE or _la==MySQLParser.ADDTIME or ((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & ((1 << (MySQLParser.CONVERT_TZ - 105)) | (1 << (MySQLParser.CURDATE - 105)) | (1 << (MySQLParser.CURTIME - 105)) | (1 << (MySQLParser.DATE_ADD - 105)) | (1 << (MySQLParser.DATE_FORMAT - 105)) | (1 << (MySQLParser.DATE_SUB - 105)) | (1 << (MySQLParser.DATE_SYM - 105)) | (1 << (MySQLParser.DATEDIFF - 105)) | (1 << (MySQLParser.DAYNAME - 105)) | (1 << (MySQLParser.DAYOFMONTH - 105)) | (1 << (MySQLParser.DAYOFWEEK - 105)) | (1 << (MySQLParser.DAYOFYEAR - 105)))) != 0) or ((((_la - 207)) & ~0x3f) == 0 and ((1 << (_la - 207)) & ((1 << (MySQLParser.EXTRACT - 207)) | (1 << (MySQLParser.FROM_DAYS - 207)) | (1 << (MySQLParser.FROM_UNIXTIME - 207)) | (1 << (MySQLParser.GET_FORMAT - 207)) | (1 << (MySQLParser.HOUR - 207)))) != 0) or ((((_la - 303)) & ~0x3f) == 0 and ((1 << (_la - 303)) & ((1 << (MySQLParser.LAST_DAY - 303)) | (1 << (MySQLParser.MAKEDATE - 303)) | (1 << (MySQLParser.MAKETIME - 303)))) != 0) or ((((_la - 383)) & ~0x3f) == 0 and ((1 << (_la - 383)) & ((1 << (MySQLParser.MICROSECOND - 383)) | (1 << (MySQLParser.MINUTE - 383)) | (1 << (MySQLParser.MONTH - 383)) | (1 << (MySQLParser.MONTHNAME - 383)) | (1 << (MySQLParser.NOW - 383)) | (1 << (MySQLParser.PERIOD_ADD - 383)))) != 0) or _la==MySQLParser.PERIOD_DIFF or _la==MySQLParser.QUARTER or ((((_la - 525)) & ~0x3f) == 0 and ((1 << (_la - 525)) & ((1 << (MySQLParser.SEC_TO_TIME - 525)) | (1 << (MySQLParser.SECOND - 525)) | (1 << (MySQLParser.STR_TO_DATE - 525)))) != 0) or ((((_la - 593)) & ~0x3f) == 0 and ((1 << (_la - 593)) & ((1 << (MySQLParser.SUBTIME - 593)) | (1 << (MySQLParser.SYSDATE - 593)) | (1 << (MySQLParser.TIME_FORMAT - 593)) | (1 << (MySQLParser.TIME_SYM - 593)) | (1 << (MySQLParser.TIME_TO_SEC - 593)) | (1 << (MySQLParser.TIMEDIFF - 593)) | (1 << (MySQLParser.TIMESTAMP - 593)) | (1 << (MySQLParser.TIMESTAMPADD - 593)) | (1 << (MySQLParser.TIMESTAMPDIFF - 593)) | (1 << (MySQLParser.TO_DAYS - 593)) | (1 << (MySQLParser.TO_SECONDS - 593)) | (1 << (MySQLParser.UNIX_TIMESTAMP - 593)))) != 0) or ((((_la - 665)) & ~0x3f) == 0 and ((1 << (_la - 665)) & ((1 << (MySQLParser.UTC_DATE - 665)) | (1 << (MySQLParser.UTC_TIME - 665)) | (1 << (MySQLParser.UTC_TIMESTAMP - 665)) | (1 << (MySQLParser.WEEK - 665)) | (1 << (MySQLParser.WEEKDAY - 665)) | (1 << (MySQLParser.WEEKOFYEAR - 665)) | (1 << (MySQLParser.YEAR - 665)) | (1 << (MySQLParser.YEARWEEK - 665)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Other_functionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAKE_SET(self):
            return self.getToken(MySQLParser.MAKE_SET, 0)

        def LOAD_FILE(self):
            return self.getToken(MySQLParser.LOAD_FILE, 0)

        def IF(self):
            return self.getToken(MySQLParser.IF, 0)

        def IFNULL(self):
            return self.getToken(MySQLParser.IFNULL, 0)

        def AES_ENCRYPT(self):
            return self.getToken(MySQLParser.AES_ENCRYPT, 0)

        def AES_DECRYPT(self):
            return self.getToken(MySQLParser.AES_DECRYPT, 0)

        def DECODE(self):
            return self.getToken(MySQLParser.DECODE, 0)

        def ENCODE(self):
            return self.getToken(MySQLParser.ENCODE, 0)

        def DES_DECRYPT(self):
            return self.getToken(MySQLParser.DES_DECRYPT, 0)

        def DES_ENCRYPT(self):
            return self.getToken(MySQLParser.DES_ENCRYPT, 0)

        def ENCRYPT(self):
            return self.getToken(MySQLParser.ENCRYPT, 0)

        def MD5(self):
            return self.getToken(MySQLParser.MD5, 0)

        def OLD_PASSWORD(self):
            return self.getToken(MySQLParser.OLD_PASSWORD, 0)

        def PASSWORD(self):
            return self.getToken(MySQLParser.PASSWORD, 0)

        def BENCHMARK(self):
            return self.getToken(MySQLParser.BENCHMARK, 0)

        def CHARSET(self):
            return self.getToken(MySQLParser.CHARSET, 0)

        def COERCIBILITY(self):
            return self.getToken(MySQLParser.COERCIBILITY, 0)

        def COLLATION(self):
            return self.getToken(MySQLParser.COLLATION, 0)

        def CONNECTION_ID(self):
            return self.getToken(MySQLParser.CONNECTION_ID, 0)

        def CURRENT_USER(self):
            return self.getToken(MySQLParser.CURRENT_USER, 0)

        def DATABASE(self):
            return self.getToken(MySQLParser.DATABASE, 0)

        def SCHEMA(self):
            return self.getToken(MySQLParser.SCHEMA, 0)

        def USER(self):
            return self.getToken(MySQLParser.USER, 0)

        def SESSION_USER(self):
            return self.getToken(MySQLParser.SESSION_USER, 0)

        def SYSTEM_USER(self):
            return self.getToken(MySQLParser.SYSTEM_USER, 0)

        def VERSION_SYM(self):
            return self.getToken(MySQLParser.VERSION_SYM, 0)

        def FOUND_ROWS(self):
            return self.getToken(MySQLParser.FOUND_ROWS, 0)

        def LAST_INSERT_ID(self):
            return self.getToken(MySQLParser.LAST_INSERT_ID, 0)

        def DEFAULT(self):
            return self.getToken(MySQLParser.DEFAULT, 0)

        def GET_LOCK(self):
            return self.getToken(MySQLParser.GET_LOCK, 0)

        def RELEASE_LOCK(self):
            return self.getToken(MySQLParser.RELEASE_LOCK, 0)

        def IS_FREE_LOCK(self):
            return self.getToken(MySQLParser.IS_FREE_LOCK, 0)

        def IS_USED_LOCK(self):
            return self.getToken(MySQLParser.IS_USED_LOCK, 0)

        def MASTER_POS_WAIT(self):
            return self.getToken(MySQLParser.MASTER_POS_WAIT, 0)

        def INET_ATON(self):
            return self.getToken(MySQLParser.INET_ATON, 0)

        def INET_NTOA(self):
            return self.getToken(MySQLParser.INET_NTOA, 0)

        def NAME_CONST(self):
            return self.getToken(MySQLParser.NAME_CONST, 0)

        def SLEEP(self):
            return self.getToken(MySQLParser.SLEEP, 0)

        def UUID(self):
            return self.getToken(MySQLParser.UUID, 0)

        def VALUES(self):
            return self.getToken(MySQLParser.VALUES, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_other_functions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOther_functions" ):
                listener.enterOther_functions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOther_functions" ):
                listener.exitOther_functions(self)




    def other_functions(self):

        localctx = MySQLParser.Other_functionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_other_functions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 251
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySQLParser.AES_DECRYPT) | (1 << MySQLParser.AES_ENCRYPT) | (1 << MySQLParser.BENCHMARK))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (MySQLParser.CHARSET - 70)) | (1 << (MySQLParser.COERCIBILITY - 70)) | (1 << (MySQLParser.COLLATION - 70)) | (1 << (MySQLParser.CONNECTION_ID - 70)) | (1 << (MySQLParser.CURRENT_USER - 70)) | (1 << (MySQLParser.DATABASE - 70)))) != 0) or ((((_la - 151)) & ~0x3f) == 0 and ((1 << (_la - 151)) & ((1 << (MySQLParser.DECODE - 151)) | (1 << (MySQLParser.DEFAULT - 151)) | (1 << (MySQLParser.DES_DECRYPT - 151)) | (1 << (MySQLParser.DES_ENCRYPT - 151)) | (1 << (MySQLParser.ENCODE - 151)) | (1 << (MySQLParser.ENCRYPT - 151)))) != 0) or ((((_la - 225)) & ~0x3f) == 0 and ((1 << (_la - 225)) & ((1 << (MySQLParser.FOUND_ROWS - 225)) | (1 << (MySQLParser.GET_LOCK - 225)) | (1 << (MySQLParser.IF - 225)) | (1 << (MySQLParser.IFNULL - 225)) | (1 << (MySQLParser.INET_ATON - 225)) | (1 << (MySQLParser.INET_NTOA - 225)) | (1 << (MySQLParser.IS_FREE_LOCK - 225)))) != 0) or ((((_la - 290)) & ~0x3f) == 0 and ((1 << (_la - 290)) & ((1 << (MySQLParser.IS_USED_LOCK - 290)) | (1 << (MySQLParser.LAST_INSERT_ID - 290)) | (1 << (MySQLParser.LOAD_FILE - 290)) | (1 << (MySQLParser.MAKE_SET - 290)))) != 0) or ((((_la - 356)) & ~0x3f) == 0 and ((1 << (_la - 356)) & ((1 << (MySQLParser.MASTER_POS_WAIT - 356)) | (1 << (MySQLParser.MD5 - 356)) | (1 << (MySQLParser.NAME_CONST - 356)))) != 0) or _la==MySQLParser.OLD_PASSWORD or _la==MySQLParser.PASSWORD or ((((_la - 490)) & ~0x3f) == 0 and ((1 << (_la - 490)) & ((1 << (MySQLParser.RELEASE_LOCK - 490)) | (1 << (MySQLParser.SCHEMA - 490)) | (1 << (MySQLParser.SESSION_USER - 490)) | (1 << (MySQLParser.SLEEP - 490)))) != 0) or _la==MySQLParser.SYSTEM_USER or _la==MySQLParser.USER or ((((_la - 672)) & ~0x3f) == 0 and ((1 << (_la - 672)) & ((1 << (MySQLParser.UUID - 672)) | (1 << (MySQLParser.VALUES - 672)) | (1 << (MySQLParser.VERSION_SYM - 672)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Group_functionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AVG(self):
            return self.getToken(MySQLParser.AVG, 0)

        def COUNT(self):
            return self.getToken(MySQLParser.COUNT, 0)

        def MAX_SYM(self):
            return self.getToken(MySQLParser.MAX_SYM, 0)

        def MIN_SYM(self):
            return self.getToken(MySQLParser.MIN_SYM, 0)

        def SUM(self):
            return self.getToken(MySQLParser.SUM, 0)

        def BIT_AND(self):
            return self.getToken(MySQLParser.BIT_AND, 0)

        def BIT_OR(self):
            return self.getToken(MySQLParser.BIT_OR, 0)

        def BIT_XOR(self):
            return self.getToken(MySQLParser.BIT_XOR, 0)

        def GROUP_CONCAT(self):
            return self.getToken(MySQLParser.GROUP_CONCAT, 0)

        def STD(self):
            return self.getToken(MySQLParser.STD, 0)

        def STDDEV(self):
            return self.getToken(MySQLParser.STDDEV, 0)

        def STDDEV_POP(self):
            return self.getToken(MySQLParser.STDDEV_POP, 0)

        def STDDEV_SAMP(self):
            return self.getToken(MySQLParser.STDDEV_SAMP, 0)

        def VAR_POP(self):
            return self.getToken(MySQLParser.VAR_POP, 0)

        def VAR_SAMP(self):
            return self.getToken(MySQLParser.VAR_SAMP, 0)

        def VARIANCE(self):
            return self.getToken(MySQLParser.VARIANCE, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_group_functions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_functions" ):
                listener.enterGroup_functions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_functions" ):
                listener.exitGroup_functions(self)




    def group_functions(self):

        localctx = MySQLParser.Group_functionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_group_functions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 253
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySQLParser.AVG) | (1 << MySQLParser.BIT_AND) | (1 << MySQLParser.BIT_OR) | (1 << MySQLParser.BIT_XOR))) != 0) or _la==MySQLParser.COUNT or _la==MySQLParser.GROUP_CONCAT or _la==MySQLParser.MAX_SYM or _la==MySQLParser.MIN_SYM or ((((_la - 578)) & ~0x3f) == 0 and ((1 << (_la - 578)) & ((1 << (MySQLParser.STD - 578)) | (1 << (MySQLParser.STDDEV - 578)) | (1 << (MySQLParser.STDDEV_POP - 578)) | (1 << (MySQLParser.STDDEV_SAMP - 578)) | (1 << (MySQLParser.SUM - 578)))) != 0) or ((((_la - 675)) & ~0x3f) == 0 and ((1 << (_la - 675)) & ((1 << (MySQLParser.VAR_POP - 675)) | (1 << (MySQLParser.VAR_SAMP - 675)) | (1 << (MySQLParser.VARIANCE - 675)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Escape_idContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.ID)
            else:
                return self.getToken(MySQLParser.ID, i)

        def ARROW(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.ARROW)
            else:
                return self.getToken(MySQLParser.ARROW, i)

        def EQ_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.EQ_SYM)
            else:
                return self.getToken(MySQLParser.EQ_SYM, i)

        def NOT_EQ(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.NOT_EQ)
            else:
                return self.getToken(MySQLParser.NOT_EQ, i)

        def LET(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.LET)
            else:
                return self.getToken(MySQLParser.LET, i)

        def GET(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.GET)
            else:
                return self.getToken(MySQLParser.GET, i)

        def SET_VAR(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.SET_VAR)
            else:
                return self.getToken(MySQLParser.SET_VAR, i)

        def SHIFT_LEFT(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.SHIFT_LEFT)
            else:
                return self.getToken(MySQLParser.SHIFT_LEFT, i)

        def SHIFT_RIGHT(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.SHIFT_RIGHT)
            else:
                return self.getToken(MySQLParser.SHIFT_RIGHT, i)

        def ALL_FIELDS(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.ALL_FIELDS)
            else:
                return self.getToken(MySQLParser.ALL_FIELDS, i)

        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.SEMI)
            else:
                return self.getToken(MySQLParser.SEMI, i)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COLON)
            else:
                return self.getToken(MySQLParser.COLON, i)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.DOT)
            else:
                return self.getToken(MySQLParser.DOT, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA)
            else:
                return self.getToken(MySQLParser.COMMA, i)

        def ASTERISK(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.ASTERISK)
            else:
                return self.getToken(MySQLParser.ASTERISK, i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.RPAREN)
            else:
                return self.getToken(MySQLParser.RPAREN, i)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.LPAREN)
            else:
                return self.getToken(MySQLParser.LPAREN, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.RBRACK)
            else:
                return self.getToken(MySQLParser.RBRACK, i)

        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.LBRACK)
            else:
                return self.getToken(MySQLParser.LBRACK, i)

        def PLUS(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.PLUS)
            else:
                return self.getToken(MySQLParser.PLUS, i)

        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.MINUS)
            else:
                return self.getToken(MySQLParser.MINUS, i)

        def NEGATION(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.NEGATION)
            else:
                return self.getToken(MySQLParser.NEGATION, i)

        def VERTBAR(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.VERTBAR)
            else:
                return self.getToken(MySQLParser.VERTBAR, i)

        def BITAND(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.BITAND)
            else:
                return self.getToken(MySQLParser.BITAND, i)

        def POWER_OP(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.POWER_OP)
            else:
                return self.getToken(MySQLParser.POWER_OP, i)

        def GTH(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.GTH)
            else:
                return self.getToken(MySQLParser.GTH, i)

        def LTH(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.LTH)
            else:
                return self.getToken(MySQLParser.LTH, i)

        def WHITE_SPACE(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.WHITE_SPACE)
            else:
                return self.getToken(MySQLParser.WHITE_SPACE, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_escape_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEscape_id" ):
                listener.enterEscape_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEscape_id" ):
                listener.exitEscape_id(self)




    def escape_id(self):

        localctx = MySQLParser.Escape_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_escape_id)
        self._la = 0 # Token type
        try:
            self.state = 269
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 255
                self.match(MySQLParser.ID)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 256
                self.match(MySQLParser.T__0)
                self.state = 257
                self.match(MySQLParser.ID)
                self.state = 258
                self.match(MySQLParser.T__0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 260
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
                if la_ == 1:
                    self.state = 259
                    self.match(MySQLParser.ID)


                self.state = 262
                _la = self._input.LA(1)
                if _la <= 0 or ((((_la - 709)) & ~0x3f) == 0 and ((1 << (_la - 709)) & ((1 << (MySQLParser.ARROW - 709)) | (1 << (MySQLParser.EQ_SYM - 709)) | (1 << (MySQLParser.NOT_EQ - 709)) | (1 << (MySQLParser.LET - 709)) | (1 << (MySQLParser.GET - 709)) | (1 << (MySQLParser.SET_VAR - 709)) | (1 << (MySQLParser.SHIFT_LEFT - 709)) | (1 << (MySQLParser.SHIFT_RIGHT - 709)) | (1 << (MySQLParser.ALL_FIELDS - 709)) | (1 << (MySQLParser.SEMI - 709)) | (1 << (MySQLParser.COLON - 709)) | (1 << (MySQLParser.DOT - 709)) | (1 << (MySQLParser.COMMA - 709)) | (1 << (MySQLParser.ASTERISK - 709)) | (1 << (MySQLParser.RPAREN - 709)) | (1 << (MySQLParser.LPAREN - 709)) | (1 << (MySQLParser.RBRACK - 709)) | (1 << (MySQLParser.LBRACK - 709)) | (1 << (MySQLParser.PLUS - 709)) | (1 << (MySQLParser.MINUS - 709)) | (1 << (MySQLParser.NEGATION - 709)) | (1 << (MySQLParser.VERTBAR - 709)) | (1 << (MySQLParser.BITAND - 709)) | (1 << (MySQLParser.POWER_OP - 709)) | (1 << (MySQLParser.GTH - 709)) | (1 << (MySQLParser.LTH - 709)) | (1 << (MySQLParser.WHITE_SPACE - 709)))) != 0):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 267
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
                if la_ == 1:
                    self.state = 264
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
                    if la_ == 1:
                        self.state = 263
                        self.match(MySQLParser.ID)


                    self.state = 266
                    _la = self._input.LA(1)
                    if _la <= 0 or ((((_la - 709)) & ~0x3f) == 0 and ((1 << (_la - 709)) & ((1 << (MySQLParser.ARROW - 709)) | (1 << (MySQLParser.EQ_SYM - 709)) | (1 << (MySQLParser.NOT_EQ - 709)) | (1 << (MySQLParser.LET - 709)) | (1 << (MySQLParser.GET - 709)) | (1 << (MySQLParser.SET_VAR - 709)) | (1 << (MySQLParser.SHIFT_LEFT - 709)) | (1 << (MySQLParser.SHIFT_RIGHT - 709)) | (1 << (MySQLParser.ALL_FIELDS - 709)) | (1 << (MySQLParser.SEMI - 709)) | (1 << (MySQLParser.COLON - 709)) | (1 << (MySQLParser.DOT - 709)) | (1 << (MySQLParser.COMMA - 709)) | (1 << (MySQLParser.ASTERISK - 709)) | (1 << (MySQLParser.RPAREN - 709)) | (1 << (MySQLParser.LPAREN - 709)) | (1 << (MySQLParser.RBRACK - 709)) | (1 << (MySQLParser.LBRACK - 709)) | (1 << (MySQLParser.PLUS - 709)) | (1 << (MySQLParser.MINUS - 709)) | (1 << (MySQLParser.NEGATION - 709)) | (1 << (MySQLParser.VERTBAR - 709)) | (1 << (MySQLParser.BITAND - 709)) | (1 << (MySQLParser.POWER_OP - 709)) | (1 << (MySQLParser.GTH - 709)) | (1 << (MySQLParser.LTH - 709)) | (1 << (MySQLParser.WHITE_SPACE - 709)))) != 0):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Schema_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def escape_id(self):
            return self.getTypedRuleContext(MySQLParser.Escape_idContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_schema_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchema_name" ):
                listener.enterSchema_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchema_name" ):
                listener.exitSchema_name(self)




    def schema_name(self):

        localctx = MySQLParser.Schema_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_schema_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 271
            self.escape_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def escape_id(self):
            return self.getTypedRuleContext(MySQLParser.Escape_idContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_name" ):
                listener.enterTable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_name" ):
                listener.exitTable_name(self)




    def table_name(self):

        localctx = MySQLParser.Table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 273
            self.escape_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def escape_id(self):
            return self.getTypedRuleContext(MySQLParser.Escape_idContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name" ):
                listener.enterColumn_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name" ):
                listener.exitColumn_name(self)




    def column_name(self):

        localctx = MySQLParser.Column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_column_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 275
            self.escape_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Index_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def escape_id(self):
            return self.getTypedRuleContext(MySQLParser.Escape_idContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_index_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_name" ):
                listener.enterIndex_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_name" ):
                listener.exitIndex_name(self)




    def index_name(self):

        localctx = MySQLParser.Index_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_index_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 277
            self.escape_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Partition_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def escape_id(self):
            return self.getTypedRuleContext(MySQLParser.Escape_idContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_partition_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartition_name" ):
                listener.enterPartition_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartition_name" ):
                listener.exitPartition_name(self)




    def partition_name(self):

        localctx = MySQLParser.Partition_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_partition_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 279
            self.escape_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def escape_id(self):
            return self.getTypedRuleContext(MySQLParser.Escape_idContext,0)


        def AS_SYM(self):
            return self.getToken(MySQLParser.AS_SYM, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlias" ):
                listener.enterAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlias" ):
                listener.exitAlias(self)




    def alias(self):

        localctx = MySQLParser.AliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_alias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 282
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.state = 281
                self.match(MySQLParser.AS_SYM)


            self.state = 284
            self.escape_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT_SYM(self):
            return self.getToken(MySQLParser.NOT_SYM, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.ExpressionContext,i)


        def bool_primary(self):
            return self.getTypedRuleContext(MySQLParser.Bool_primaryContext,0)


        def IS_SYM(self):
            return self.getToken(MySQLParser.IS_SYM, 0)

        def boolean_literal(self):
            return self.getTypedRuleContext(MySQLParser.Boolean_literalContext,0)


        def NULL_SYM(self):
            return self.getToken(MySQLParser.NULL_SYM, 0)

        def AND_SYM(self):
            return self.getToken(MySQLParser.AND_SYM, 0)

        def XOR(self):
            return self.getToken(MySQLParser.XOR, 0)

        def OR_SYM(self):
            return self.getToken(MySQLParser.OR_SYM, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MySQLParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 48
        self.enterRecursionRule(localctx, 48, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 300
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                self.state = 287
                self.match(MySQLParser.NOT_SYM)
                self.state = 288
                self.expression(2)
                pass

            elif la_ == 2:
                self.state = 289
                self.bool_primary()
                self.state = 298
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
                if la_ == 1:
                    self.state = 290
                    self.match(MySQLParser.IS_SYM)
                    self.state = 292
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySQLParser.NOT_SYM:
                        self.state = 291
                        self.match(MySQLParser.NOT_SYM)


                    self.state = 296
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [MySQLParser.FALSE_SYM, MySQLParser.TRUE_SYM]:
                        self.state = 294
                        self.boolean_literal()
                        pass
                    elif token in [MySQLParser.NULL_SYM]:
                        self.state = 295
                        self.match(MySQLParser.NULL_SYM)
                        pass
                    else:
                        raise NoViableAltException(self)



                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 313
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,21,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 311
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
                    if la_ == 1:
                        localctx = MySQLParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 302
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 303
                        self.match(MySQLParser.AND_SYM)
                        self.state = 304
                        self.expression(6)
                        pass

                    elif la_ == 2:
                        localctx = MySQLParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 305
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 306
                        self.match(MySQLParser.XOR)
                        self.state = 307
                        self.expression(5)
                        pass

                    elif la_ == 3:
                        localctx = MySQLParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 308
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 309
                        self.match(MySQLParser.OR_SYM)
                        self.state = 310
                        self.expression(4)
                        pass

             
                self.state = 315
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,21,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Bool_primaryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predicate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.PredicateContext)
            else:
                return self.getTypedRuleContext(MySQLParser.PredicateContext,i)


        def relational_op(self):
            return self.getTypedRuleContext(MySQLParser.Relational_opContext,0)


        def subquery(self):
            return self.getTypedRuleContext(MySQLParser.SubqueryContext,0)


        def ALL(self):
            return self.getToken(MySQLParser.ALL, 0)

        def ANY(self):
            return self.getToken(MySQLParser.ANY, 0)

        def EXISTS(self):
            return self.getToken(MySQLParser.EXISTS, 0)

        def NOT_SYM(self):
            return self.getToken(MySQLParser.NOT_SYM, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_bool_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBool_primary" ):
                listener.enterBool_primary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBool_primary" ):
                listener.exitBool_primary(self)




    def bool_primary(self):

        localctx = MySQLParser.Bool_primaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_bool_primary)
        self._la = 0 # Token type
        try:
            self.state = 333
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 316
                self.predicate()
                self.state = 317
                self.relational_op()
                self.state = 318
                self.predicate()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 320
                self.predicate()
                self.state = 321
                self.relational_op()
                self.state = 323
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.ALL or _la==MySQLParser.ANY:
                    self.state = 322
                    _la = self._input.LA(1)
                    if not(_la==MySQLParser.ALL or _la==MySQLParser.ANY):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 325
                self.subquery()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 328
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.NOT_SYM:
                    self.state = 327
                    self.match(MySQLParser.NOT_SYM)


                self.state = 330
                self.match(MySQLParser.EXISTS)
                self.state = 331
                self.subquery()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 332
                self.predicate()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PredicateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bit_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.Bit_exprContext)
            else:
                return self.getTypedRuleContext(MySQLParser.Bit_exprContext,i)


        def IN_SYM(self):
            return self.getToken(MySQLParser.IN_SYM, 0)

        def subquery(self):
            return self.getTypedRuleContext(MySQLParser.SubqueryContext,0)


        def expression_list(self):
            return self.getTypedRuleContext(MySQLParser.Expression_listContext,0)


        def NOT_SYM(self):
            return self.getToken(MySQLParser.NOT_SYM, 0)

        def BETWEEN(self):
            return self.getToken(MySQLParser.BETWEEN, 0)

        def AND_SYM(self):
            return self.getToken(MySQLParser.AND_SYM, 0)

        def predicate(self):
            return self.getTypedRuleContext(MySQLParser.PredicateContext,0)


        def SOUNDS_SYM(self):
            return self.getToken(MySQLParser.SOUNDS_SYM, 0)

        def LIKE_SYM(self):
            return self.getToken(MySQLParser.LIKE_SYM, 0)

        def simple_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.Simple_exprContext)
            else:
                return self.getTypedRuleContext(MySQLParser.Simple_exprContext,i)


        def ESCAPE_SYM(self):
            return self.getToken(MySQLParser.ESCAPE_SYM, 0)

        def REGEXP(self):
            return self.getToken(MySQLParser.REGEXP, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_predicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicate" ):
                listener.enterPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicate" ):
                listener.exitPredicate(self)




    def predicate(self):

        localctx = MySQLParser.PredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_predicate)
        self._la = 0 # Token type
        try:
            self.state = 376
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 335
                self.bit_expr(0)
                self.state = 337
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.NOT_SYM:
                    self.state = 336
                    self.match(MySQLParser.NOT_SYM)


                self.state = 339
                self.match(MySQLParser.IN_SYM)
                self.state = 342
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
                if la_ == 1:
                    self.state = 340
                    self.subquery()
                    pass

                elif la_ == 2:
                    self.state = 341
                    self.expression_list()
                    pass


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 344
                self.bit_expr(0)
                self.state = 346
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.NOT_SYM:
                    self.state = 345
                    self.match(MySQLParser.NOT_SYM)


                self.state = 348
                self.match(MySQLParser.BETWEEN)
                self.state = 349
                self.bit_expr(0)
                self.state = 350
                self.match(MySQLParser.AND_SYM)
                self.state = 351
                self.predicate()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 353
                self.bit_expr(0)
                self.state = 354
                self.match(MySQLParser.SOUNDS_SYM)
                self.state = 355
                self.match(MySQLParser.LIKE_SYM)
                self.state = 356
                self.bit_expr(0)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 358
                self.bit_expr(0)
                self.state = 360
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.NOT_SYM:
                    self.state = 359
                    self.match(MySQLParser.NOT_SYM)


                self.state = 362
                self.match(MySQLParser.LIKE_SYM)
                self.state = 363
                self.simple_expr()
                self.state = 366
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
                if la_ == 1:
                    self.state = 364
                    self.match(MySQLParser.ESCAPE_SYM)
                    self.state = 365
                    self.simple_expr()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 368
                self.bit_expr(0)
                self.state = 370
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.NOT_SYM:
                    self.state = 369
                    self.match(MySQLParser.NOT_SYM)


                self.state = 372
                self.match(MySQLParser.REGEXP)
                self.state = 373
                self.bit_expr(0)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 375
                self.bit_expr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Bit_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_expr(self):
            return self.getTypedRuleContext(MySQLParser.Simple_exprContext,0)


        def PLUS(self):
            return self.getToken(MySQLParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(MySQLParser.MINUS, 0)

        def NEGATION(self):
            return self.getToken(MySQLParser.NEGATION, 0)

        def BINARY(self):
            return self.getToken(MySQLParser.BINARY, 0)

        def bit_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.Bit_exprContext)
            else:
                return self.getTypedRuleContext(MySQLParser.Bit_exprContext,i)


        def ASTERISK(self):
            return self.getToken(MySQLParser.ASTERISK, 0)

        def DIVIDE(self):
            return self.getToken(MySQLParser.DIVIDE, 0)

        def MOD_SYM(self):
            return self.getToken(MySQLParser.MOD_SYM, 0)

        def POWER_OP(self):
            return self.getToken(MySQLParser.POWER_OP, 0)

        def SHIFT_LEFT(self):
            return self.getToken(MySQLParser.SHIFT_LEFT, 0)

        def SHIFT_RIGHT(self):
            return self.getToken(MySQLParser.SHIFT_RIGHT, 0)

        def BITAND(self):
            return self.getToken(MySQLParser.BITAND, 0)

        def VERTBAR(self):
            return self.getToken(MySQLParser.VERTBAR, 0)

        def interval_expr(self):
            return self.getTypedRuleContext(MySQLParser.Interval_exprContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_bit_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBit_expr" ):
                listener.enterBit_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBit_expr" ):
                listener.exitBit_expr(self)



    def bit_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MySQLParser.Bit_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 54
        self.enterRecursionRule(localctx, 54, self.RULE_bit_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 382
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.state = 379
                _la = self._input.LA(1)
                if not(_la==MySQLParser.BINARY or ((((_la - 727)) & ~0x3f) == 0 and ((1 << (_la - 727)) & ((1 << (MySQLParser.PLUS - 727)) | (1 << (MySQLParser.MINUS - 727)) | (1 << (MySQLParser.NEGATION - 727)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 380
                self.simple_expr()
                pass

            elif la_ == 2:
                self.state = 381
                self.simple_expr()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 404
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,34,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 402
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
                    if la_ == 1:
                        localctx = MySQLParser.Bit_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_bit_expr)
                        self.state = 384
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 385
                        _la = self._input.LA(1)
                        if not(((((_la - 705)) & ~0x3f) == 0 and ((1 << (_la - 705)) & ((1 << (MySQLParser.DIVIDE - 705)) | (1 << (MySQLParser.MOD_SYM - 705)) | (1 << (MySQLParser.ASTERISK - 705)) | (1 << (MySQLParser.POWER_OP - 705)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 386
                        self.bit_expr(8)
                        pass

                    elif la_ == 2:
                        localctx = MySQLParser.Bit_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_bit_expr)
                        self.state = 387
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 388
                        _la = self._input.LA(1)
                        if not(_la==MySQLParser.PLUS or _la==MySQLParser.MINUS):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 389
                        self.bit_expr(7)
                        pass

                    elif la_ == 3:
                        localctx = MySQLParser.Bit_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_bit_expr)
                        self.state = 390
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 391
                        _la = self._input.LA(1)
                        if not(_la==MySQLParser.SHIFT_LEFT or _la==MySQLParser.SHIFT_RIGHT):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 392
                        self.bit_expr(6)
                        pass

                    elif la_ == 4:
                        localctx = MySQLParser.Bit_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_bit_expr)
                        self.state = 393
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 394
                        self.match(MySQLParser.BITAND)
                        self.state = 395
                        self.bit_expr(5)
                        pass

                    elif la_ == 5:
                        localctx = MySQLParser.Bit_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_bit_expr)
                        self.state = 396
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 397
                        self.match(MySQLParser.VERTBAR)
                        self.state = 398
                        self.bit_expr(4)
                        pass

                    elif la_ == 6:
                        localctx = MySQLParser.Bit_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_bit_expr)
                        self.state = 399
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 400
                        _la = self._input.LA(1)
                        if not(_la==MySQLParser.PLUS or _la==MySQLParser.MINUS):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 401
                        self.interval_expr()
                        pass

             
                self.state = 406
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,34,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Simple_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal_value(self):
            return self.getTypedRuleContext(MySQLParser.Literal_valueContext,0)


        def column_spec(self):
            return self.getTypedRuleContext(MySQLParser.Column_specContext,0)


        def function_call(self):
            return self.getTypedRuleContext(MySQLParser.Function_callContext,0)


        def USER_VAR(self):
            return self.getToken(MySQLParser.USER_VAR, 0)

        def expression_list(self):
            return self.getTypedRuleContext(MySQLParser.Expression_listContext,0)


        def ROW_SYM(self):
            return self.getToken(MySQLParser.ROW_SYM, 0)

        def subquery(self):
            return self.getTypedRuleContext(MySQLParser.SubqueryContext,0)


        def EXISTS(self):
            return self.getToken(MySQLParser.EXISTS, 0)

        def match_against_statement(self):
            return self.getTypedRuleContext(MySQLParser.Match_against_statementContext,0)


        def case_when_statement(self):
            return self.getTypedRuleContext(MySQLParser.Case_when_statementContext,0)


        def interval_expr(self):
            return self.getTypedRuleContext(MySQLParser.Interval_exprContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_simple_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_expr" ):
                listener.enterSimple_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_expr" ):
                listener.exitSimple_expr(self)




    def simple_expr(self):

        localctx = MySQLParser.Simple_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_simple_expr)
        try:
            self.state = 420
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 407
                self.literal_value()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 408
                self.column_spec()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 409
                self.function_call()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 410
                self.match(MySQLParser.USER_VAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 411
                self.expression_list()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 412
                self.match(MySQLParser.ROW_SYM)
                self.state = 413
                self.expression_list()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 414
                self.subquery()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 415
                self.match(MySQLParser.EXISTS)
                self.state = 416
                self.subquery()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 417
                self.match_against_statement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 418
                self.case_when_statement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 419
                self.interval_expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_callContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionList(self):
            return self.getTypedRuleContext(MySQLParser.FunctionListContext,0)


        def LPAREN(self):
            return self.getToken(MySQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(MySQLParser.RPAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA)
            else:
                return self.getToken(MySQLParser.COMMA, i)

        def CAST_SYM(self):
            return self.getToken(MySQLParser.CAST_SYM, 0)

        def AS_SYM(self):
            return self.getToken(MySQLParser.AS_SYM, 0)

        def cast_data_type(self):
            return self.getTypedRuleContext(MySQLParser.Cast_data_typeContext,0)


        def CONVERT_SYM(self):
            return self.getToken(MySQLParser.CONVERT_SYM, 0)

        def USING_SYM(self):
            return self.getToken(MySQLParser.USING_SYM, 0)

        def transcoding_name(self):
            return self.getTypedRuleContext(MySQLParser.Transcoding_nameContext,0)


        def group_functions(self):
            return self.getTypedRuleContext(MySQLParser.Group_functionsContext,0)


        def bit_expr(self):
            return self.getTypedRuleContext(MySQLParser.Bit_exprContext,0)


        def ASTERISK(self):
            return self.getToken(MySQLParser.ASTERISK, 0)

        def ALL(self):
            return self.getToken(MySQLParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(MySQLParser.DISTINCT, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_function_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_call" ):
                listener.enterFunction_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_call" ):
                listener.exitFunction_call(self)




    def function_call(self):

        localctx = MySQLParser.Function_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_function_call)
        self._la = 0 # Token type
        try:
            self.state = 466
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 422
                self.functionList()
                self.state = 435
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
                if la_ == 1:
                    self.state = 423
                    self.match(MySQLParser.LPAREN)
                    self.state = 432
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySQLParser.T__0) | (1 << MySQLParser.ABS) | (1 << MySQLParser.ACCESSIBLE_SYM) | (1 << MySQLParser.ACOS) | (1 << MySQLParser.ACTION) | (1 << MySQLParser.ADD_SYM) | (1 << MySQLParser.ADDDATE) | (1 << MySQLParser.ADDTIME) | (1 << MySQLParser.AES_DECRYPT) | (1 << MySQLParser.AES_ENCRYPT) | (1 << MySQLParser.AFTER_SYM) | (1 << MySQLParser.AGAINST) | (1 << MySQLParser.AGGREGATE_SYM) | (1 << MySQLParser.ALGORITHM_SYM) | (1 << MySQLParser.ALL) | (1 << MySQLParser.ALTER) | (1 << MySQLParser.ANALYZE_SYM) | (1 << MySQLParser.ANY) | (1 << MySQLParser.ARMSCII8) | (1 << MySQLParser.AS_SYM) | (1 << MySQLParser.ASC) | (1 << MySQLParser.ASCII_SYM) | (1 << MySQLParser.ASENSITIVE_SYM) | (1 << MySQLParser.ASIN) | (1 << MySQLParser.AT_SYM) | (1 << MySQLParser.ATAN) | (1 << MySQLParser.ATAN2) | (1 << MySQLParser.AUTHORS_SYM) | (1 << MySQLParser.AUTO_INCREMENT) | (1 << MySQLParser.AUTOEXTEND_SIZE_SYM) | (1 << MySQLParser.AVG) | (1 << MySQLParser.AVG_ROW_LENGTH) | (1 << MySQLParser.BACKUP_SYM) | (1 << MySQLParser.BEFORE_SYM) | (1 << MySQLParser.BEGIN_SYM) | (1 << MySQLParser.BENCHMARK) | (1 << MySQLParser.BETWEEN) | (1 << MySQLParser.BIG5) | (1 << MySQLParser.BIGINT) | (1 << MySQLParser.BIN) | (1 << MySQLParser.BINARY) | (1 << MySQLParser.BINLOG_SYM) | (1 << MySQLParser.BIT_AND) | (1 << MySQLParser.BIT_LENGTH) | (1 << MySQLParser.BIT_OR) | (1 << MySQLParser.BIT_SYM) | (1 << MySQLParser.BIT_XOR) | (1 << MySQLParser.BLOB_SYM) | (1 << MySQLParser.BLOCK_SYM) | (1 << MySQLParser.BOOL_SYM) | (1 << MySQLParser.BOOLEAN_SYM) | (1 << MySQLParser.BOTH) | (1 << MySQLParser.BTREE_SYM) | (1 << MySQLParser.BY_SYM) | (1 << MySQLParser.BYTE_SYM) | (1 << MySQLParser.CACHE_SYM) | (1 << MySQLParser.CALL_SYM) | (1 << MySQLParser.CASCADE) | (1 << MySQLParser.CASCADED) | (1 << MySQLParser.CASE_SYM) | (1 << MySQLParser.CAST_SYM) | (1 << MySQLParser.CEIL) | (1 << MySQLParser.CEILING))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (MySQLParser.CHAIN_SYM - 64)) | (1 << (MySQLParser.CHANGE - 64)) | (1 << (MySQLParser.CHANGED - 64)) | (1 << (MySQLParser.CHAR - 64)) | (1 << (MySQLParser.CHAR_LENGTH - 64)) | (1 << (MySQLParser.CHARACTER_SYM - 64)) | (1 << (MySQLParser.CHARSET - 64)) | (1 << (MySQLParser.CHECK_SYM - 64)) | (1 << (MySQLParser.CHECKSUM_SYM - 64)) | (1 << (MySQLParser.CIPHER_SYM - 64)) | (1 << (MySQLParser.CLIENT_SYM - 64)) | (1 << (MySQLParser.CLOSE_SYM - 64)) | (1 << (MySQLParser.COALESCE - 64)) | (1 << (MySQLParser.CODE_SYM - 64)) | (1 << (MySQLParser.COERCIBILITY - 64)) | (1 << (MySQLParser.COLLATE_SYM - 64)) | (1 << (MySQLParser.COLLATION - 64)) | (1 << (MySQLParser.COLUMN_FORMAT - 64)) | (1 << (MySQLParser.COLUMN_SYM - 64)) | (1 << (MySQLParser.COLUMNS_SYM - 64)) | (1 << (MySQLParser.COMMENT_SYM - 64)) | (1 << (MySQLParser.COMMIT_SYM - 64)) | (1 << (MySQLParser.COMMITTED_SYM - 64)) | (1 << (MySQLParser.COMPACT_SYM - 64)) | (1 << (MySQLParser.COMPLETION_SYM - 64)) | (1 << (MySQLParser.COMPRESS - 64)) | (1 << (MySQLParser.COMPRESSED_SYM - 64)) | (1 << (MySQLParser.CONCAT - 64)) | (1 << (MySQLParser.CONCAT_WS - 64)) | (1 << (MySQLParser.CONCURRENT - 64)) | (1 << (MySQLParser.CONDITION_SYM - 64)) | (1 << (MySQLParser.CONNECTION_ID - 64)) | (1 << (MySQLParser.CONNECTION_SYM - 64)) | (1 << (MySQLParser.CONSISTENT_SYM - 64)) | (1 << (MySQLParser.CONSTRAINT - 64)) | (1 << (MySQLParser.CONTAINS_SYM - 64)) | (1 << (MySQLParser.CONTEXT_SYM - 64)) | (1 << (MySQLParser.CONTINUE_SYM - 64)) | (1 << (MySQLParser.CONTRIBUTORS_SYM - 64)) | (1 << (MySQLParser.CONV - 64)) | (1 << (MySQLParser.CONVERT_SYM - 64)) | (1 << (MySQLParser.CONVERT_TZ - 64)) | (1 << (MySQLParser.COPY_SYM - 64)) | (1 << (MySQLParser.COS - 64)) | (1 << (MySQLParser.COT - 64)) | (1 << (MySQLParser.COUNT - 64)) | (1 << (MySQLParser.CP1250 - 64)) | (1 << (MySQLParser.CP1251 - 64)) | (1 << (MySQLParser.CP1256 - 64)) | (1 << (MySQLParser.CP1257 - 64)) | (1 << (MySQLParser.CP850 - 64)) | (1 << (MySQLParser.CP852 - 64)) | (1 << (MySQLParser.CP866 - 64)) | (1 << (MySQLParser.CP932 - 64)) | (1 << (MySQLParser.CPU_SYM - 64)) | (1 << (MySQLParser.CRC32 - 64)) | (1 << (MySQLParser.CREATE - 64)) | (1 << (MySQLParser.CROSECOND - 64)) | (1 << (MySQLParser.CROSS - 64)) | (1 << (MySQLParser.CUBE_SYM - 64)) | (1 << (MySQLParser.CURDATE - 64)) | (1 << (MySQLParser.CURRENT_TIMESTAMP - 64)) | (1 << (MySQLParser.CURRENT_USER - 64)) | (1 << (MySQLParser.CURSOR_SYM - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (MySQLParser.CURTIME - 128)) | (1 << (MySQLParser.DATABASE - 128)) | (1 << (MySQLParser.DATAFILE_SYM - 128)) | (1 << (MySQLParser.DATA_SYM - 128)) | (1 << (MySQLParser.DATE_ADD - 128)) | (1 << (MySQLParser.DATE_FORMAT - 128)) | (1 << (MySQLParser.DATE_SUB - 128)) | (1 << (MySQLParser.DATE_SYM - 128)) | (1 << (MySQLParser.DATEDIFF - 128)) | (1 << (MySQLParser.DATETIME - 128)) | (1 << (MySQLParser.DAY_SYM - 128)) | (1 << (MySQLParser.DAY_HOUR - 128)) | (1 << (MySQLParser.DAY_MICROSECOND - 128)) | (1 << (MySQLParser.DAY_MINUTE - 128)) | (1 << (MySQLParser.DAY_SECOND - 128)) | (1 << (MySQLParser.DAYNAME - 128)) | (1 << (MySQLParser.DAYOFMONTH - 128)) | (1 << (MySQLParser.DAYOFWEEK - 128)) | (1 << (MySQLParser.DAYOFYEAR - 128)) | (1 << (MySQLParser.DEALLOCATE_SYM - 128)) | (1 << (MySQLParser.DEC8 - 128)) | (1 << (MySQLParser.DECIMAL_SYM - 128)) | (1 << (MySQLParser.DECLARE_SYM - 128)) | (1 << (MySQLParser.DECODE - 128)) | (1 << (MySQLParser.DEFAULT - 128)) | (1 << (MySQLParser.DEFINER - 128)) | (1 << (MySQLParser.DEGREES - 128)) | (1 << (MySQLParser.DELAY_KEY_WRITE_SYM - 128)) | (1 << (MySQLParser.DELAYED_SYM - 128)) | (1 << (MySQLParser.DELETE_SYM - 128)) | (1 << (MySQLParser.DES_DECRYPT - 128)) | (1 << (MySQLParser.DES_ENCRYPT - 128)) | (1 << (MySQLParser.DES_KEY_FILE - 128)) | (1 << (MySQLParser.DESC - 128)) | (1 << (MySQLParser.DETERMINISTIC_SYM - 128)) | (1 << (MySQLParser.DIRECTORY_SYM - 128)) | (1 << (MySQLParser.DISABLE_SYM - 128)) | (1 << (MySQLParser.DISCARD - 128)) | (1 << (MySQLParser.DISK_SYM - 128)) | (1 << (MySQLParser.DISTINCT - 128)) | (1 << (MySQLParser.DISTINCTROW - 128)) | (1 << (MySQLParser.DO_SYM - 128)) | (1 << (MySQLParser.DOUBLE_SYM - 128)) | (1 << (MySQLParser.DROP - 128)) | (1 << (MySQLParser.DUAL_SYM - 128)) | (1 << (MySQLParser.DUMPFILE - 128)) | (1 << (MySQLParser.DUPLICATE_SYM - 128)) | (1 << (MySQLParser.DYNAMIC_SYM - 128)) | (1 << (MySQLParser.EACH_SYM - 128)) | (1 << (MySQLParser.ELSE_SYM - 128)) | (1 << (MySQLParser.ELSIF_SYM - 128)) | (1 << (MySQLParser.ELT - 128)) | (1 << (MySQLParser.ENABLE_SYM - 128)) | (1 << (MySQLParser.ENCLOSED - 128)) | (1 << (MySQLParser.ENCODE - 128)) | (1 << (MySQLParser.ENCRYPT - 128)) | (1 << (MySQLParser.END_SYM - 128)) | (1 << (MySQLParser.ENDS_SYM - 128)) | (1 << (MySQLParser.ENGINE_SYM - 128)) | (1 << (MySQLParser.ENGINES_SYM - 128)) | (1 << (MySQLParser.ENUM - 128)) | (1 << (MySQLParser.ERRORS - 128)) | (1 << (MySQLParser.ESCAPE_SYM - 128)) | (1 << (MySQLParser.ESCAPED - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (MySQLParser.EUCJPMS - 192)) | (1 << (MySQLParser.EUCKR - 192)) | (1 << (MySQLParser.EVENT_SYM - 192)) | (1 << (MySQLParser.EVENTS_SYM - 192)) | (1 << (MySQLParser.EVERY_SYM - 192)) | (1 << (MySQLParser.EXCHANGE_SYM - 192)) | (1 << (MySQLParser.EXECUTE_SYM - 192)) | (1 << (MySQLParser.EXCLUSIVE_SYM - 192)) | (1 << (MySQLParser.EXISTS - 192)) | (1 << (MySQLParser.EXIT_SYM - 192)) | (1 << (MySQLParser.EXP - 192)) | (1 << (MySQLParser.EXPANSION_SYM - 192)) | (1 << (MySQLParser.EXPORT_SET - 192)) | (1 << (MySQLParser.EXTENDED_SYM - 192)) | (1 << (MySQLParser.EXTENT_SIZE_SYM - 192)) | (1 << (MySQLParser.EXTRACT - 192)) | (1 << (MySQLParser.FALSE_SYM - 192)) | (1 << (MySQLParser.FAST_SYM - 192)) | (1 << (MySQLParser.FAULTS_SYM - 192)) | (1 << (MySQLParser.FIELDS_SYM - 192)) | (1 << (MySQLParser.FETCH_SYM - 192)) | (1 << (MySQLParser.FIELD - 192)) | (1 << (MySQLParser.FILE_SYM - 192)) | (1 << (MySQLParser.FIND_IN_SET - 192)) | (1 << (MySQLParser.FIRST_SYM - 192)) | (1 << (MySQLParser.FIXED_SYM - 192)) | (1 << (MySQLParser.FLOAT_SYM - 192)) | (1 << (MySQLParser.FLOOR - 192)) | (1 << (MySQLParser.FLUSH_SYM - 192)) | (1 << (MySQLParser.FOR_SYM - 192)) | (1 << (MySQLParser.FORCE_SYM - 192)) | (1 << (MySQLParser.FOREIGN - 192)) | (1 << (MySQLParser.FORMAT - 192)) | (1 << (MySQLParser.FOUND_ROWS - 192)) | (1 << (MySQLParser.FOUND_SYM - 192)) | (1 << (MySQLParser.FROM - 192)) | (1 << (MySQLParser.FROM_BASE64 - 192)) | (1 << (MySQLParser.FROM_DAYS - 192)) | (1 << (MySQLParser.FROM_UNIXTIME - 192)) | (1 << (MySQLParser.FULL - 192)) | (1 << (MySQLParser.FULLTEXT_SYM - 192)) | (1 << (MySQLParser.FUNCTION_SYM - 192)) | (1 << (MySQLParser.GB2312 - 192)) | (1 << (MySQLParser.GBK - 192)) | (1 << (MySQLParser.GEOMETRY_SYM - 192)) | (1 << (MySQLParser.GEOMETRYCOLLECTION - 192)) | (1 << (MySQLParser.GEOSTD8 - 192)) | (1 << (MySQLParser.GET_FORMAT - 192)) | (1 << (MySQLParser.GET_LOCK - 192)) | (1 << (MySQLParser.GLOBAL_SYM - 192)) | (1 << (MySQLParser.GRANT - 192)) | (1 << (MySQLParser.GRANTS - 192)) | (1 << (MySQLParser.GREEK - 192)) | (1 << (MySQLParser.GROUP_CONCAT - 192)) | (1 << (MySQLParser.GROUP_SYM - 192)) | (1 << (MySQLParser.HANDLER_SYM - 192)) | (1 << (MySQLParser.HASH_SYM - 192)) | (1 << (MySQLParser.HAVING - 192)) | (1 << (MySQLParser.HEBREW - 192)) | (1 << (MySQLParser.HELP_SYM - 192)) | (1 << (MySQLParser.HEX - 192)) | (1 << (MySQLParser.HIGH_PRIORITY - 192)) | (1 << (MySQLParser.HOST_SYM - 192)) | (1 << (MySQLParser.HOSTS_SYM - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (MySQLParser.HOUR - 256)) | (1 << (MySQLParser.HOUR_MICROSECOND - 256)) | (1 << (MySQLParser.HOUR_MINUTE - 256)) | (1 << (MySQLParser.HOUR_SECOND - 256)) | (1 << (MySQLParser.HP8 - 256)) | (1 << (MySQLParser.IDENTIFIED_SYM - 256)) | (1 << (MySQLParser.IF - 256)) | (1 << (MySQLParser.IFNULL - 256)) | (1 << (MySQLParser.IGNORE_SYM - 256)) | (1 << (MySQLParser.IMPORT - 256)) | (1 << (MySQLParser.IN_SYM - 256)) | (1 << (MySQLParser.INDEX_SYM - 256)) | (1 << (MySQLParser.INDEXES - 256)) | (1 << (MySQLParser.INET_ATON - 256)) | (1 << (MySQLParser.INET_NTOA - 256)) | (1 << (MySQLParser.INFILE - 256)) | (1 << (MySQLParser.INITIAL_SIZE_SYM - 256)) | (1 << (MySQLParser.INNER_SYM - 256)) | (1 << (MySQLParser.INOUT_SYM - 256)) | (1 << (MySQLParser.INPLACE_SYM - 256)) | (1 << (MySQLParser.INSENSITIVE_SYM - 256)) | (1 << (MySQLParser.INSERT - 256)) | (1 << (MySQLParser.INSERT_METHOD - 256)) | (1 << (MySQLParser.INSTALL_SYM - 256)) | (1 << (MySQLParser.INSTR - 256)) | (1 << (MySQLParser.INT_SYM - 256)) | (1 << (MySQLParser.INTEGER_SYM - 256)) | (1 << (MySQLParser.INTERVAL_SYM - 256)) | (1 << (MySQLParser.INTO - 256)) | (1 << (MySQLParser.INVOKER_SYM - 256)) | (1 << (MySQLParser.IO_SYM - 256)) | (1 << (MySQLParser.IPC_SYM - 256)) | (1 << (MySQLParser.IS_FREE_LOCK - 256)) | (1 << (MySQLParser.IS_SYM - 256)) | (1 << (MySQLParser.IS_USED_LOCK - 256)) | (1 << (MySQLParser.ISOLATION - 256)) | (1 << (MySQLParser.ISSUER_SYM - 256)) | (1 << (MySQLParser.ITERATE_SYM - 256)) | (1 << (MySQLParser.JOIN_SYM - 256)) | (1 << (MySQLParser.KEY_BLOCK_SIZE - 256)) | (1 << (MySQLParser.KEY_SYM - 256)) | (1 << (MySQLParser.KEYBCS2 - 256)) | (1 << (MySQLParser.KEYS - 256)) | (1 << (MySQLParser.KILL_SYM - 256)) | (1 << (MySQLParser.KOI8R - 256)) | (1 << (MySQLParser.KOI8U - 256)) | (1 << (MySQLParser.LANGUAGE - 256)) | (1 << (MySQLParser.LAST_DAY - 256)) | (1 << (MySQLParser.LAST_INSERT_ID - 256)) | (1 << (MySQLParser.LAST_SYM - 256)) | (1 << (MySQLParser.LATIN1_BIN - 256)) | (1 << (MySQLParser.LATIN1_GENERAL_CS - 256)) | (1 << (MySQLParser.LATIN1 - 256)) | (1 << (MySQLParser.LATIN2 - 256)) | (1 << (MySQLParser.LATIN5 - 256)) | (1 << (MySQLParser.LATIN7 - 256)) | (1 << (MySQLParser.LEADING - 256)) | (1 << (MySQLParser.LEAVE_SYM - 256)) | (1 << (MySQLParser.LEAVES - 256)) | (1 << (MySQLParser.LEFT - 256)) | (1 << (MySQLParser.LENGTH - 256)) | (1 << (MySQLParser.LESS_SYM - 256)) | (1 << (MySQLParser.LEVEL_SYM - 256)) | (1 << (MySQLParser.LIKE_SYM - 256)))) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & ((1 << (MySQLParser.LIMIT - 320)) | (1 << (MySQLParser.LINEAR_SYM - 320)) | (1 << (MySQLParser.LINES - 320)) | (1 << (MySQLParser.LINESTRING - 320)) | (1 << (MySQLParser.LIST_SYM - 320)) | (1 << (MySQLParser.LN - 320)) | (1 << (MySQLParser.LOAD - 320)) | (1 << (MySQLParser.LOAD_FILE - 320)) | (1 << (MySQLParser.LOCAL_SYM - 320)) | (1 << (MySQLParser.LOCATE - 320)) | (1 << (MySQLParser.LOCK - 320)) | (1 << (MySQLParser.LOCKS_SYM - 320)) | (1 << (MySQLParser.LOG - 320)) | (1 << (MySQLParser.LOG10 - 320)) | (1 << (MySQLParser.LOG2 - 320)) | (1 << (MySQLParser.LOGFILE_SYM - 320)) | (1 << (MySQLParser.LOGS_SYM - 320)) | (1 << (MySQLParser.LONG_SYM - 320)) | (1 << (MySQLParser.LONGBLOB - 320)) | (1 << (MySQLParser.LONGTEXT - 320)) | (1 << (MySQLParser.LOOP_SYM - 320)) | (1 << (MySQLParser.LOW_PRIORITY - 320)) | (1 << (MySQLParser.LOWER - 320)) | (1 << (MySQLParser.LPAD - 320)) | (1 << (MySQLParser.LTRIM - 320)) | (1 << (MySQLParser.MACCE - 320)) | (1 << (MySQLParser.MACROMAN - 320)) | (1 << (MySQLParser.MAKE_SET - 320)) | (1 << (MySQLParser.MAKEDATE - 320)) | (1 << (MySQLParser.MAKETIME - 320)) | (1 << (MySQLParser.MASTER_CONNECT_RETRY - 320)) | (1 << (MySQLParser.MASTER_HOST_SYM - 320)) | (1 << (MySQLParser.MASTER_LOG_FILE_SYM - 320)) | (1 << (MySQLParser.MASTER_LOG_POS_SYM - 320)) | (1 << (MySQLParser.MASTER_PASSWORD_SYM - 320)) | (1 << (MySQLParser.MASTER_PORT_SYM - 320)) | (1 << (MySQLParser.MASTER_POS_WAIT - 320)) | (1 << (MySQLParser.MASTER_SERVER_ID_SYM - 320)) | (1 << (MySQLParser.MASTER_SSL_CA_SYM - 320)) | (1 << (MySQLParser.MASTER_SSL_CAPATH_SYM - 320)) | (1 << (MySQLParser.MASTER_SSL_CERT_SYM - 320)) | (1 << (MySQLParser.MASTER_SSL_CIPHER_SYM - 320)) | (1 << (MySQLParser.MASTER_SSL_KEY_SYM - 320)) | (1 << (MySQLParser.MASTER_SSL_SYM - 320)) | (1 << (MySQLParser.MASTER_SSL_VERIFY_SERVER_CERT - 320)) | (1 << (MySQLParser.MASTER_SYM - 320)) | (1 << (MySQLParser.MASTER_USER_SYM - 320)) | (1 << (MySQLParser.MATCH - 320)) | (1 << (MySQLParser.MAX_SYM - 320)) | (1 << (MySQLParser.MAX_CONNECTIONS_PER_HOUR - 320)) | (1 << (MySQLParser.MAX_QUERIES_PER_HOUR - 320)) | (1 << (MySQLParser.MAX_ROWS - 320)) | (1 << (MySQLParser.MAX_SIZE_SYM - 320)) | (1 << (MySQLParser.MAX_UPDATES_PER_HOUR - 320)) | (1 << (MySQLParser.MAX_USER_CONNECTIONS_SYM - 320)) | (1 << (MySQLParser.MAXVALUE_SYM - 320)) | (1 << (MySQLParser.MD5 - 320)) | (1 << (MySQLParser.MEDIUM_SYM - 320)) | (1 << (MySQLParser.MEDIUMBLOB - 320)) | (1 << (MySQLParser.MEDIUMINT - 320)) | (1 << (MySQLParser.MEDIUMTEXT - 320)) | (1 << (MySQLParser.MEMORY_SYM - 320)) | (1 << (MySQLParser.MERGE_SYM - 320)) | (1 << (MySQLParser.MICROSECOND - 320)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (MySQLParser.MID - 384)) | (1 << (MySQLParser.MIGRATE_SYM - 384)) | (1 << (MySQLParser.MIN_SYM - 384)) | (1 << (MySQLParser.MIN_ROWS - 384)) | (1 << (MySQLParser.MINUTE - 384)) | (1 << (MySQLParser.MINUTE_MICROSECOND - 384)) | (1 << (MySQLParser.MINUTE_SECOND - 384)) | (1 << (MySQLParser.MOD - 384)) | (1 << (MySQLParser.MODE_SYM - 384)) | (1 << (MySQLParser.MODIFIES_SYM - 384)) | (1 << (MySQLParser.MODIFY_SYM - 384)) | (1 << (MySQLParser.MONTH - 384)) | (1 << (MySQLParser.MONTHNAME - 384)) | (1 << (MySQLParser.MULTILINESTRING - 384)) | (1 << (MySQLParser.MULTIPOINT - 384)) | (1 << (MySQLParser.MULTIPOLYGON - 384)) | (1 << (MySQLParser.MUTEX_SYM - 384)) | (1 << (MySQLParser.NAME_CONST - 384)) | (1 << (MySQLParser.NAME_SYM - 384)) | (1 << (MySQLParser.NAMES_SYM - 384)) | (1 << (MySQLParser.NATIONAL_SYM - 384)) | (1 << (MySQLParser.NATURAL - 384)) | (1 << (MySQLParser.NCHAR_SYM - 384)) | (1 << (MySQLParser.NEW_SYM - 384)) | (1 << (MySQLParser.NEXT_SYM - 384)) | (1 << (MySQLParser.NO_SYM - 384)) | (1 << (MySQLParser.NO_WAIT_SYM - 384)) | (1 << (MySQLParser.NO_WRITE_TO_BINLOG - 384)) | (1 << (MySQLParser.NODEGROUP_SYM - 384)) | (1 << (MySQLParser.NONE_SYM - 384)) | (1 << (MySQLParser.NOT_SYM - 384)) | (1 << (MySQLParser.NOW - 384)) | (1 << (MySQLParser.NULL_SYM - 384)) | (1 << (MySQLParser.NUMERIC_SYM - 384)) | (1 << (MySQLParser.NVARCHAR_SYM - 384)) | (1 << (MySQLParser.OCT - 384)) | (1 << (MySQLParser.OFFSET_SYM - 384)) | (1 << (MySQLParser.OJ_SYM - 384)) | (1 << (MySQLParser.OLD_PASSWORD - 384)) | (1 << (MySQLParser.ON - 384)) | (1 << (MySQLParser.ONE_SHOT_SYM - 384)) | (1 << (MySQLParser.ONE_SYM - 384)) | (1 << (MySQLParser.OPEN_SYM - 384)) | (1 << (MySQLParser.OPTIMIZE - 384)) | (1 << (MySQLParser.OPTION - 384)) | (1 << (MySQLParser.OPTIONALLY - 384)) | (1 << (MySQLParser.OPTIONS_SYM - 384)) | (1 << (MySQLParser.ORD - 384)) | (1 << (MySQLParser.ORDER_SYM - 384)) | (1 << (MySQLParser.OUT_SYM - 384)) | (1 << (MySQLParser.OUTER - 384)) | (1 << (MySQLParser.OUTFILE - 384)) | (1 << (MySQLParser.OWNER_SYM - 384)) | (1 << (MySQLParser.PACK_KEYS_SYM - 384)) | (1 << (MySQLParser.PAGE_CHECKSUM_SYM - 384)) | (1 << (MySQLParser.PAGE_SYM - 384)) | (1 << (MySQLParser.PARSER_SYM - 384)) | (1 << (MySQLParser.PARTIAL - 384)) | (1 << (MySQLParser.PARTITION_SYM - 384)) | (1 << (MySQLParser.PARTITIONING_SYM - 384)) | (1 << (MySQLParser.PARTITIONS_SYM - 384)) | (1 << (MySQLParser.PASSWORD - 384)) | (1 << (MySQLParser.PERIOD_ADD - 384)) | (1 << (MySQLParser.PERIOD_DIFF - 384)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (MySQLParser.PHASE_SYM - 448)) | (1 << (MySQLParser.PI - 448)) | (1 << (MySQLParser.PLUGIN_SYM - 448)) | (1 << (MySQLParser.PLUGINS_SYM - 448)) | (1 << (MySQLParser.POINT_SYM - 448)) | (1 << (MySQLParser.POLYGON - 448)) | (1 << (MySQLParser.PORT_SYM - 448)) | (1 << (MySQLParser.POW - 448)) | (1 << (MySQLParser.POWER - 448)) | (1 << (MySQLParser.PRECISION - 448)) | (1 << (MySQLParser.PREPARE_SYM - 448)) | (1 << (MySQLParser.PRESERVE_SYM - 448)) | (1 << (MySQLParser.PREV_SYM - 448)) | (1 << (MySQLParser.PRIMARY_SYM - 448)) | (1 << (MySQLParser.PRIVILEGES - 448)) | (1 << (MySQLParser.PROCEDURE - 448)) | (1 << (MySQLParser.PROCESS - 448)) | (1 << (MySQLParser.PROCESSLIST_SYM - 448)) | (1 << (MySQLParser.PROFILE_SYM - 448)) | (1 << (MySQLParser.PROFILES_SYM - 448)) | (1 << (MySQLParser.PURGE - 448)) | (1 << (MySQLParser.QUARTER - 448)) | (1 << (MySQLParser.QUERY_SYM - 448)) | (1 << (MySQLParser.QUICK - 448)) | (1 << (MySQLParser.QUOTE - 448)) | (1 << (MySQLParser.RADIANS - 448)) | (1 << (MySQLParser.RAND - 448)) | (1 << (MySQLParser.RANGE_SYM - 448)) | (1 << (MySQLParser.READ_ONLY_SYM - 448)) | (1 << (MySQLParser.READ_SYM - 448)) | (1 << (MySQLParser.READ_WRITE_SYM - 448)) | (1 << (MySQLParser.READS_SYM - 448)) | (1 << (MySQLParser.REAL - 448)) | (1 << (MySQLParser.REBUILD_SYM - 448)) | (1 << (MySQLParser.RECOVER_SYM - 448)) | (1 << (MySQLParser.REDO_BUFFER_SIZE_SYM - 448)) | (1 << (MySQLParser.REDOFILE_SYM - 448)) | (1 << (MySQLParser.REDUNDANT_SYM - 448)) | (1 << (MySQLParser.REFERENCES - 448)) | (1 << (MySQLParser.REGEXP - 448)) | (1 << (MySQLParser.RELAY_LOG_FILE_SYM - 448)) | (1 << (MySQLParser.RELAY_LOG_POS_SYM - 448)) | (1 << (MySQLParser.RELEASE_LOCK - 448)) | (1 << (MySQLParser.RELEASE_SYM - 448)) | (1 << (MySQLParser.RELOAD - 448)) | (1 << (MySQLParser.REMOVE_SYM - 448)) | (1 << (MySQLParser.RENAME - 448)) | (1 << (MySQLParser.REORGANIZE_SYM - 448)) | (1 << (MySQLParser.REPAIR - 448)) | (1 << (MySQLParser.REPEAT - 448)) | (1 << (MySQLParser.REPEATABLE_SYM - 448)) | (1 << (MySQLParser.REPLACE - 448)) | (1 << (MySQLParser.REPLICATION - 448)) | (1 << (MySQLParser.REQUIRE_SYM - 448)) | (1 << (MySQLParser.RESET_SYM - 448)) | (1 << (MySQLParser.RESOURCES - 448)) | (1 << (MySQLParser.RESTORE_SYM - 448)) | (1 << (MySQLParser.RESTRICT - 448)) | (1 << (MySQLParser.RESUME_SYM - 448)) | (1 << (MySQLParser.RETURN_SYM - 448)) | (1 << (MySQLParser.RETURNS_SYM - 448)) | (1 << (MySQLParser.REVERSE - 448)) | (1 << (MySQLParser.REVOKE - 448)) | (1 << (MySQLParser.RIGHT - 448)))) != 0) or ((((_la - 512)) & ~0x3f) == 0 and ((1 << (_la - 512)) & ((1 << (MySQLParser.ROLLBACK - 512)) | (1 << (MySQLParser.ROLLUP_SYM - 512)) | (1 << (MySQLParser.ROUND - 512)) | (1 << (MySQLParser.ROUTINE_SYM - 512)) | (1 << (MySQLParser.ROW_FORMAT_SYM - 512)) | (1 << (MySQLParser.ROW_SYM - 512)) | (1 << (MySQLParser.ROWS_SYM - 512)) | (1 << (MySQLParser.RPAD - 512)) | (1 << (MySQLParser.RTREE_SYM - 512)) | (1 << (MySQLParser.RTRIM - 512)) | (1 << (MySQLParser.SAVEPOINT - 512)) | (1 << (MySQLParser.SCHEDULE_SYM - 512)) | (1 << (MySQLParser.SCHEMA - 512)) | (1 << (MySQLParser.SEC_TO_TIME - 512)) | (1 << (MySQLParser.SECOND - 512)) | (1 << (MySQLParser.SECOND_MICROSECOND - 512)) | (1 << (MySQLParser.SECURITY_SYM - 512)) | (1 << (MySQLParser.SELECT - 512)) | (1 << (MySQLParser.SENSITIVE_SYM - 512)) | (1 << (MySQLParser.SEPARATOR_SYM - 512)) | (1 << (MySQLParser.SERIAL_SYM - 512)) | (1 << (MySQLParser.SERIALIZABLE_SYM - 512)) | (1 << (MySQLParser.SERVER_SYM - 512)) | (1 << (MySQLParser.SESSION_SYM - 512)) | (1 << (MySQLParser.SESSION_USER - 512)) | (1 << (MySQLParser.SET_SYM - 512)) | (1 << (MySQLParser.SHARED_SYM - 512)) | (1 << (MySQLParser.SHARE_SYM - 512)) | (1 << (MySQLParser.SHOW - 512)) | (1 << (MySQLParser.SHUTDOWN - 512)) | (1 << (MySQLParser.SIGN - 512)) | (1 << (MySQLParser.SIGNED_SYM - 512)) | (1 << (MySQLParser.SIMPLE_SYM - 512)) | (1 << (MySQLParser.SIN - 512)) | (1 << (MySQLParser.SJIS - 512)) | (1 << (MySQLParser.SLAVE - 512)) | (1 << (MySQLParser.SLEEP - 512)) | (1 << (MySQLParser.SMALLINT - 512)) | (1 << (MySQLParser.SNAPSHOT_SYM - 512)) | (1 << (MySQLParser.SOCKET_SYM - 512)) | (1 << (MySQLParser.SONAME_SYM - 512)) | (1 << (MySQLParser.SOUNDEX - 512)) | (1 << (MySQLParser.SOUNDS_SYM - 512)) | (1 << (MySQLParser.SOURCE_SYM - 512)) | (1 << (MySQLParser.SPACE - 512)) | (1 << (MySQLParser.SPATIAL_SYM - 512)) | (1 << (MySQLParser.SPECIFIC_SYM - 512)) | (1 << (MySQLParser.SQL_BIG_RESULT - 512)) | (1 << (MySQLParser.SQL_BUFFER_RESULT - 512)) | (1 << (MySQLParser.SQL_CACHE_SYM - 512)) | (1 << (MySQLParser.SQL_CALC_FOUND_ROWS - 512)) | (1 << (MySQLParser.SQL_NO_CACHE_SYM - 512)) | (1 << (MySQLParser.SQL_SMALL_RESULT - 512)) | (1 << (MySQLParser.SQL_SYM - 512)) | (1 << (MySQLParser.SQL_THREAD - 512)) | (1 << (MySQLParser.SQLEXCEPTION_SYM - 512)) | (1 << (MySQLParser.SQLSTATE_SYM - 512)) | (1 << (MySQLParser.SQLWARNING_SYM - 512)) | (1 << (MySQLParser.SQRT - 512)) | (1 << (MySQLParser.SSL_SYM - 512)) | (1 << (MySQLParser.START_SYM - 512)) | (1 << (MySQLParser.STARTING - 512)) | (1 << (MySQLParser.STATS_AUTO_RECALC - 512)) | (1 << (MySQLParser.STATS_PERSISTENT - 512)))) != 0) or ((((_la - 576)) & ~0x3f) == 0 and ((1 << (_la - 576)) & ((1 << (MySQLParser.STARTS_SYM - 576)) | (1 << (MySQLParser.STATUS_SYM - 576)) | (1 << (MySQLParser.STD - 576)) | (1 << (MySQLParser.STDDEV - 576)) | (1 << (MySQLParser.STDDEV_POP - 576)) | (1 << (MySQLParser.STDDEV_SAMP - 576)) | (1 << (MySQLParser.STOP_SYM - 576)) | (1 << (MySQLParser.STORAGE_SYM - 576)) | (1 << (MySQLParser.STR_TO_DATE - 576)) | (1 << (MySQLParser.STRAIGHT_JOIN - 576)) | (1 << (MySQLParser.STRCMP - 576)) | (1 << (MySQLParser.STRING_SYM - 576)) | (1 << (MySQLParser.SUBJECT_SYM - 576)) | (1 << (MySQLParser.SUBPARTITION_SYM - 576)) | (1 << (MySQLParser.SUBPARTITIONS_SYM - 576)) | (1 << (MySQLParser.SUBSTRING - 576)) | (1 << (MySQLParser.SUBSTRING_INDEX - 576)) | (1 << (MySQLParser.SUBTIME - 576)) | (1 << (MySQLParser.SUM - 576)) | (1 << (MySQLParser.SUPER_SYM - 576)) | (1 << (MySQLParser.SUSPEND_SYM - 576)) | (1 << (MySQLParser.SWAPS_SYM - 576)) | (1 << (MySQLParser.SWE7 - 576)) | (1 << (MySQLParser.SWITCHES_SYM - 576)) | (1 << (MySQLParser.SYSDATE - 576)) | (1 << (MySQLParser.SYSTEM_USER - 576)) | (1 << (MySQLParser.TABLE - 576)) | (1 << (MySQLParser.TABLE_CHECKSUM_SYM - 576)) | (1 << (MySQLParser.TABLES - 576)) | (1 << (MySQLParser.TABLESPACE - 576)) | (1 << (MySQLParser.TAN - 576)) | (1 << (MySQLParser.TEMPORARY - 576)) | (1 << (MySQLParser.TEMPTABLE_SYM - 576)) | (1 << (MySQLParser.TERMINATED - 576)) | (1 << (MySQLParser.TEXT_SYM - 576)) | (1 << (MySQLParser.THAN_SYM - 576)) | (1 << (MySQLParser.THEN_SYM - 576)) | (1 << (MySQLParser.TIME_FORMAT - 576)) | (1 << (MySQLParser.TIME_SYM - 576)) | (1 << (MySQLParser.TIME_TO_SEC - 576)) | (1 << (MySQLParser.TIMEDIFF - 576)) | (1 << (MySQLParser.TIMESTAMP - 576)) | (1 << (MySQLParser.TIMESTAMPADD - 576)) | (1 << (MySQLParser.TIMESTAMPDIFF - 576)) | (1 << (MySQLParser.TINYBLOB - 576)) | (1 << (MySQLParser.TINYINT - 576)) | (1 << (MySQLParser.TINYTEXT - 576)) | (1 << (MySQLParser.TIS620 - 576)) | (1 << (MySQLParser.TO_BASE64 - 576)) | (1 << (MySQLParser.TO_DAYS - 576)) | (1 << (MySQLParser.TO_SECONDS - 576)) | (1 << (MySQLParser.TO_SYM - 576)) | (1 << (MySQLParser.TRAILING - 576)) | (1 << (MySQLParser.TRANSACTION - 576)) | (1 << (MySQLParser.TRANSACTIONAL_SYM - 576)) | (1 << (MySQLParser.TRIGGER_SYM - 576)) | (1 << (MySQLParser.TRIGGERS_SYM - 576)) | (1 << (MySQLParser.TRIM - 576)) | (1 << (MySQLParser.TRUE_SYM - 576)) | (1 << (MySQLParser.TRUNCATE - 576)) | (1 << (MySQLParser.TYPE_SYM - 576)) | (1 << (MySQLParser.TYPES_SYM - 576)) | (1 << (MySQLParser.UCS2 - 576)) | (1 << (MySQLParser.UJIS - 576)))) != 0) or ((((_la - 640)) & ~0x3f) == 0 and ((1 << (_la - 640)) & ((1 << (MySQLParser.UNCOMMITTED_SYM - 640)) | (1 << (MySQLParser.UNCOMPRESS - 640)) | (1 << (MySQLParser.UNCOMPRESSED_LENGTH - 640)) | (1 << (MySQLParser.UNDEFINED_SYM - 640)) | (1 << (MySQLParser.UNDO_BUFFER_SIZE_SYM - 640)) | (1 << (MySQLParser.UNDO_SYM - 640)) | (1 << (MySQLParser.UNDOFILE_SYM - 640)) | (1 << (MySQLParser.UNHEX - 640)) | (1 << (MySQLParser.UNICODE_SYM - 640)) | (1 << (MySQLParser.UNINSTALL_SYM - 640)) | (1 << (MySQLParser.UNION_SYM - 640)) | (1 << (MySQLParser.UNIQUE_SYM - 640)) | (1 << (MySQLParser.UNIX_TIMESTAMP - 640)) | (1 << (MySQLParser.UNKNOWN_SYM - 640)) | (1 << (MySQLParser.UNLOCK_SYM - 640)) | (1 << (MySQLParser.UNSIGNED_SYM - 640)) | (1 << (MySQLParser.UNTIL_SYM - 640)) | (1 << (MySQLParser.UPDATE - 640)) | (1 << (MySQLParser.UPGRADE_SYM - 640)) | (1 << (MySQLParser.UPPER - 640)) | (1 << (MySQLParser.USAGE - 640)) | (1 << (MySQLParser.USE_FRM - 640)) | (1 << (MySQLParser.USE_SYM - 640)) | (1 << (MySQLParser.USER - 640)) | (1 << (MySQLParser.USING_SYM - 640)) | (1 << (MySQLParser.UTC_DATE - 640)) | (1 << (MySQLParser.UTC_TIME - 640)) | (1 << (MySQLParser.UTC_TIMESTAMP - 640)) | (1 << (MySQLParser.UTF16LE - 640)) | (1 << (MySQLParser.UTF16 - 640)) | (1 << (MySQLParser.UTF32 - 640)) | (1 << (MySQLParser.UTF8 - 640)) | (1 << (MySQLParser.UUID - 640)) | (1 << (MySQLParser.VALUE_SYM - 640)) | (1 << (MySQLParser.VALUES - 640)) | (1 << (MySQLParser.VAR_POP - 640)) | (1 << (MySQLParser.VAR_SAMP - 640)) | (1 << (MySQLParser.VARBINARY - 640)) | (1 << (MySQLParser.VARCHAR - 640)) | (1 << (MySQLParser.VARIABLES - 640)) | (1 << (MySQLParser.VARIANCE - 640)) | (1 << (MySQLParser.VARYING - 640)) | (1 << (MySQLParser.VERSION_SYM - 640)) | (1 << (MySQLParser.VIEW_SYM - 640)) | (1 << (MySQLParser.WAIT_SYM - 640)) | (1 << (MySQLParser.WARNINGS - 640)) | (1 << (MySQLParser.WEEK - 640)) | (1 << (MySQLParser.WEEKDAY - 640)) | (1 << (MySQLParser.WEEKOFYEAR - 640)) | (1 << (MySQLParser.WEIGHT_STRING - 640)) | (1 << (MySQLParser.WHEN_SYM - 640)) | (1 << (MySQLParser.WHERE - 640)) | (1 << (MySQLParser.WHILE_SYM - 640)) | (1 << (MySQLParser.WITH - 640)) | (1 << (MySQLParser.WORK_SYM - 640)) | (1 << (MySQLParser.WRAPPER_SYM - 640)) | (1 << (MySQLParser.WRITE_SYM - 640)) | (1 << (MySQLParser.X509_SYM - 640)) | (1 << (MySQLParser.XA_SYM - 640)) | (1 << (MySQLParser.XML_SYM - 640)) | (1 << (MySQLParser.XOR - 640)) | (1 << (MySQLParser.YEAR - 640)) | (1 << (MySQLParser.YEAR_MONTH - 640)) | (1 << (MySQLParser.YEARWEEK - 640)))) != 0) or ((((_la - 704)) & ~0x3f) == 0 and ((1 << (_la - 704)) & ((1 << (MySQLParser.ZEROFILL - 704)) | (1 << (MySQLParser.DIVIDE - 704)) | (1 << (MySQLParser.MOD_SYM - 704)) | (1 << (MySQLParser.OR_SYM - 704)) | (1 << (MySQLParser.AND_SYM - 704)) | (1 << (MySQLParser.LPAREN - 704)) | (1 << (MySQLParser.PLUS - 704)) | (1 << (MySQLParser.MINUS - 704)) | (1 << (MySQLParser.NEGATION - 704)) | (1 << (MySQLParser.INTEGER_NUM - 704)) | (1 << (MySQLParser.HEX_DIGIT - 704)) | (1 << (MySQLParser.BIT_NUM - 704)) | (1 << (MySQLParser.REAL_NUMBER - 704)) | (1 << (MySQLParser.TEXT_STRING - 704)) | (1 << (MySQLParser.ID - 704)) | (1 << (MySQLParser.USER_VAR - 704)) | (1 << (MySQLParser.SL_COMMENT - 704)) | (1 << (MySQLParser.ML_COMMENT - 704)))) != 0):
                        self.state = 424
                        self.expression(0)
                        self.state = 429
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==MySQLParser.COMMA:
                            self.state = 425
                            self.match(MySQLParser.COMMA)
                            self.state = 426
                            self.expression(0)
                            self.state = 431
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    self.state = 434
                    self.match(MySQLParser.RPAREN)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 437
                self.match(MySQLParser.CAST_SYM)
                self.state = 438
                self.match(MySQLParser.LPAREN)
                self.state = 439
                self.expression(0)
                self.state = 440
                self.match(MySQLParser.AS_SYM)
                self.state = 441
                self.cast_data_type()
                self.state = 442
                self.match(MySQLParser.RPAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 444
                self.match(MySQLParser.CONVERT_SYM)
                self.state = 445
                self.match(MySQLParser.LPAREN)
                self.state = 446
                self.expression(0)
                self.state = 447
                self.match(MySQLParser.COMMA)
                self.state = 448
                self.cast_data_type()
                self.state = 449
                self.match(MySQLParser.RPAREN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 451
                self.match(MySQLParser.CONVERT_SYM)
                self.state = 452
                self.match(MySQLParser.LPAREN)
                self.state = 453
                self.expression(0)
                self.state = 454
                self.match(MySQLParser.USING_SYM)
                self.state = 455
                self.transcoding_name()
                self.state = 456
                self.match(MySQLParser.RPAREN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 458
                self.group_functions()
                self.state = 459
                self.match(MySQLParser.LPAREN)
                self.state = 461
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
                if la_ == 1:
                    self.state = 460
                    _la = self._input.LA(1)
                    if not(_la==MySQLParser.ALL or _la==MySQLParser.DISTINCT or _la==MySQLParser.ASTERISK):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 463
                self.bit_expr(0)
                self.state = 464
                self.match(MySQLParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Case_when_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def case_when_statement1(self):
            return self.getTypedRuleContext(MySQLParser.Case_when_statement1Context,0)


        def case_when_statement2(self):
            return self.getTypedRuleContext(MySQLParser.Case_when_statement2Context,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_case_when_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_when_statement" ):
                listener.enterCase_when_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_when_statement" ):
                listener.exitCase_when_statement(self)




    def case_when_statement(self):

        localctx = MySQLParser.Case_when_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_case_when_statement)
        try:
            self.state = 470
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 468
                self.case_when_statement1()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 469
                self.case_when_statement2()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Case_when_statement1Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE_SYM(self):
            return self.getToken(MySQLParser.CASE_SYM, 0)

        def END_SYM(self):
            return self.getToken(MySQLParser.END_SYM, 0)

        def WHEN_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.WHEN_SYM)
            else:
                return self.getToken(MySQLParser.WHEN_SYM, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.ExpressionContext,i)


        def THEN_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.THEN_SYM)
            else:
                return self.getToken(MySQLParser.THEN_SYM, i)

        def bit_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.Bit_exprContext)
            else:
                return self.getTypedRuleContext(MySQLParser.Bit_exprContext,i)


        def ELSE_SYM(self):
            return self.getToken(MySQLParser.ELSE_SYM, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_case_when_statement1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_when_statement1" ):
                listener.enterCase_when_statement1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_when_statement1" ):
                listener.exitCase_when_statement1(self)




    def case_when_statement1(self):

        localctx = MySQLParser.Case_when_statement1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_case_when_statement1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 472
            self.match(MySQLParser.CASE_SYM)
            self.state = 478 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 473
                self.match(MySQLParser.WHEN_SYM)
                self.state = 474
                self.expression(0)
                self.state = 475
                self.match(MySQLParser.THEN_SYM)
                self.state = 476
                self.bit_expr(0)
                self.state = 480 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==MySQLParser.WHEN_SYM):
                    break

            self.state = 484
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.ELSE_SYM:
                self.state = 482
                self.match(MySQLParser.ELSE_SYM)
                self.state = 483
                self.bit_expr(0)


            self.state = 486
            self.match(MySQLParser.END_SYM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Case_when_statement2Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE_SYM(self):
            return self.getToken(MySQLParser.CASE_SYM, 0)

        def bit_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.Bit_exprContext)
            else:
                return self.getTypedRuleContext(MySQLParser.Bit_exprContext,i)


        def END_SYM(self):
            return self.getToken(MySQLParser.END_SYM, 0)

        def WHEN_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.WHEN_SYM)
            else:
                return self.getToken(MySQLParser.WHEN_SYM, i)

        def THEN_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.THEN_SYM)
            else:
                return self.getToken(MySQLParser.THEN_SYM, i)

        def ELSE_SYM(self):
            return self.getToken(MySQLParser.ELSE_SYM, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_case_when_statement2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_when_statement2" ):
                listener.enterCase_when_statement2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_when_statement2" ):
                listener.exitCase_when_statement2(self)




    def case_when_statement2(self):

        localctx = MySQLParser.Case_when_statement2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_case_when_statement2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 488
            self.match(MySQLParser.CASE_SYM)
            self.state = 489
            self.bit_expr(0)
            self.state = 495 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 490
                self.match(MySQLParser.WHEN_SYM)
                self.state = 491
                self.bit_expr(0)
                self.state = 492
                self.match(MySQLParser.THEN_SYM)
                self.state = 493
                self.bit_expr(0)
                self.state = 497 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==MySQLParser.WHEN_SYM):
                    break

            self.state = 501
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.ELSE_SYM:
                self.state = 499
                self.match(MySQLParser.ELSE_SYM)
                self.state = 500
                self.bit_expr(0)


            self.state = 503
            self.match(MySQLParser.END_SYM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Match_against_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MATCH(self):
            return self.getToken(MySQLParser.MATCH, 0)

        def AGAINST(self):
            return self.getToken(MySQLParser.AGAINST, 0)

        def column_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.Column_specContext)
            else:
                return self.getTypedRuleContext(MySQLParser.Column_specContext,i)


        def expression(self):
            return self.getTypedRuleContext(MySQLParser.ExpressionContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA)
            else:
                return self.getToken(MySQLParser.COMMA, i)

        def search_modifier(self):
            return self.getTypedRuleContext(MySQLParser.Search_modifierContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_match_against_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatch_against_statement" ):
                listener.enterMatch_against_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatch_against_statement" ):
                listener.exitMatch_against_statement(self)




    def match_against_statement(self):

        localctx = MySQLParser.Match_against_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_match_against_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 505
            self.match(MySQLParser.MATCH)

            self.state = 506
            self.column_spec()
            self.state = 511
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySQLParser.COMMA:
                self.state = 507
                self.match(MySQLParser.COMMA)
                self.state = 508
                self.column_spec()
                self.state = 513
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 514
            self.match(MySQLParser.AGAINST)

            self.state = 515
            self.expression(0)
            self.state = 517
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.state = 516
                self.search_modifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(MySQLParser.Column_nameContext,0)


        def table_name(self):
            return self.getTypedRuleContext(MySQLParser.Table_nameContext,0)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.DOT)
            else:
                return self.getToken(MySQLParser.DOT, i)

        def schema_name(self):
            return self.getTypedRuleContext(MySQLParser.Schema_nameContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_column_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_spec" ):
                listener.enterColumn_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_spec" ):
                listener.exitColumn_spec(self)




    def column_spec(self):

        localctx = MySQLParser.Column_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_column_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 527
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.state = 522
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
                if la_ == 1:
                    self.state = 519
                    self.schema_name()
                    self.state = 520
                    self.match(MySQLParser.DOT)


                self.state = 524
                self.table_name()
                self.state = 525
                self.match(MySQLParser.DOT)


            self.state = 529
            self.column_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expression_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(MySQLParser.LPAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.ExpressionContext,i)


        def RPAREN(self):
            return self.getToken(MySQLParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA)
            else:
                return self.getToken(MySQLParser.COMMA, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_expression_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression_list" ):
                listener.enterExpression_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression_list" ):
                listener.exitExpression_list(self)




    def expression_list(self):

        localctx = MySQLParser.Expression_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_expression_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 531
            self.match(MySQLParser.LPAREN)
            self.state = 532
            self.expression(0)
            self.state = 537
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySQLParser.COMMA:
                self.state = 533
                self.match(MySQLParser.COMMA)
                self.state = 534
                self.expression(0)
                self.state = 539
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 540
            self.match(MySQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Interval_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERVAL_SYM(self):
            return self.getToken(MySQLParser.INTERVAL_SYM, 0)

        def expression(self):
            return self.getTypedRuleContext(MySQLParser.ExpressionContext,0)


        def interval_unit(self):
            return self.getTypedRuleContext(MySQLParser.Interval_unitContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_interval_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval_expr" ):
                listener.enterInterval_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval_expr" ):
                listener.exitInterval_expr(self)




    def interval_expr(self):

        localctx = MySQLParser.Interval_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_interval_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 542
            self.match(MySQLParser.INTERVAL_SYM)
            self.state = 543
            self.expression(0)
            self.state = 544
            self.interval_unit()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_referencesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def escaped_table_reference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.Escaped_table_referenceContext)
            else:
                return self.getTypedRuleContext(MySQLParser.Escaped_table_referenceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA)
            else:
                return self.getToken(MySQLParser.COMMA, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_table_references

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_references" ):
                listener.enterTable_references(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_references" ):
                listener.exitTable_references(self)




    def table_references(self):

        localctx = MySQLParser.Table_referencesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_table_references)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 546
            self.escaped_table_reference()
            self.state = 551
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,51,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 547
                    self.match(MySQLParser.COMMA)
                    self.state = 548
                    self.escaped_table_reference() 
                self.state = 553
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,51,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Escaped_table_referenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_reference(self):
            return self.getTypedRuleContext(MySQLParser.Table_referenceContext,0)


        def OJ_SYM(self):
            return self.getToken(MySQLParser.OJ_SYM, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_escaped_table_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEscaped_table_reference" ):
                listener.enterEscaped_table_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEscaped_table_reference" ):
                listener.exitEscaped_table_reference(self)




    def escaped_table_reference(self):

        localctx = MySQLParser.Escaped_table_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_escaped_table_reference)
        try:
            self.state = 557
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 554
                self.table_reference(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 555
                self.match(MySQLParser.OJ_SYM)
                self.state = 556
                self.table_reference(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_referenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_factor(self):
            return self.getTypedRuleContext(MySQLParser.Table_factorContext,0)


        def table_reference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.Table_referenceContext)
            else:
                return self.getTypedRuleContext(MySQLParser.Table_referenceContext,i)


        def JOIN_SYM(self):
            return self.getToken(MySQLParser.JOIN_SYM, 0)

        def INNER_SYM(self):
            return self.getToken(MySQLParser.INNER_SYM, 0)

        def CROSS(self):
            return self.getToken(MySQLParser.CROSS, 0)

        def ON(self):
            return self.getToken(MySQLParser.ON, 0)

        def expression(self):
            return self.getTypedRuleContext(MySQLParser.ExpressionContext,0)


        def USING_SYM(self):
            return self.getToken(MySQLParser.USING_SYM, 0)

        def column_list(self):
            return self.getTypedRuleContext(MySQLParser.Column_listContext,0)


        def STRAIGHT_JOIN(self):
            return self.getToken(MySQLParser.STRAIGHT_JOIN, 0)

        def LEFT(self):
            return self.getToken(MySQLParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(MySQLParser.RIGHT, 0)

        def OUTER(self):
            return self.getToken(MySQLParser.OUTER, 0)

        def NATURAL(self):
            return self.getToken(MySQLParser.NATURAL, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_table_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_reference" ):
                listener.enterTable_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_reference" ):
                listener.exitTable_reference(self)



    def table_reference(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MySQLParser.Table_referenceContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 78
        self.enterRecursionRule(localctx, 78, self.RULE_table_reference, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 560
            self.table_factor()
            self._ctx.stop = self._input.LT(-1)
            self.state = 606
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,61,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 604
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
                    if la_ == 1:
                        localctx = MySQLParser.Table_referenceContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_table_reference)
                        self.state = 562
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 564
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==MySQLParser.CROSS or _la==MySQLParser.INNER_SYM:
                            self.state = 563
                            _la = self._input.LA(1)
                            if not(_la==MySQLParser.CROSS or _la==MySQLParser.INNER_SYM):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()


                        self.state = 566
                        self.match(MySQLParser.JOIN_SYM)
                        self.state = 567
                        self.table_factor()
                        self.state = 572
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
                        if la_ == 1:
                            self.state = 568
                            self.match(MySQLParser.ON)
                            self.state = 569
                            self.expression(0)

                        elif la_ == 2:
                            self.state = 570
                            self.match(MySQLParser.USING_SYM)

                            self.state = 571
                            self.column_list()


                        pass

                    elif la_ == 2:
                        localctx = MySQLParser.Table_referenceContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_table_reference)
                        self.state = 574
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 575
                        self.match(MySQLParser.STRAIGHT_JOIN)
                        self.state = 576
                        self.table_factor()
                        self.state = 579
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
                        if la_ == 1:
                            self.state = 577
                            self.match(MySQLParser.ON)
                            self.state = 578
                            self.expression(0)


                        pass

                    elif la_ == 3:
                        localctx = MySQLParser.Table_referenceContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_table_reference)
                        self.state = 581
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 582
                        _la = self._input.LA(1)
                        if not(_la==MySQLParser.LEFT or _la==MySQLParser.RIGHT):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 584
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==MySQLParser.OUTER:
                            self.state = 583
                            self.match(MySQLParser.OUTER)


                        self.state = 586
                        self.match(MySQLParser.JOIN_SYM)
                        self.state = 587
                        self.table_reference(0)
                        self.state = 592
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [MySQLParser.ON]:
                            self.state = 588
                            self.match(MySQLParser.ON)
                            self.state = 589
                            self.expression(0)
                            pass
                        elif token in [MySQLParser.USING_SYM]:
                            self.state = 590
                            self.match(MySQLParser.USING_SYM)

                            self.state = 591
                            self.column_list()
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 4:
                        localctx = MySQLParser.Table_referenceContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_table_reference)
                        self.state = 594
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 595
                        self.match(MySQLParser.NATURAL)
                        self.state = 600
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==MySQLParser.LEFT or _la==MySQLParser.RIGHT:
                            self.state = 596
                            _la = self._input.LA(1)
                            if not(_la==MySQLParser.LEFT or _la==MySQLParser.RIGHT):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 598
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==MySQLParser.OUTER:
                                self.state = 597
                                self.match(MySQLParser.OUTER)




                        self.state = 602
                        self.match(MySQLParser.JOIN_SYM)
                        self.state = 603
                        self.table_factor()
                        pass

             
                self.state = 608
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,61,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Table_factorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_spec(self):
            return self.getTypedRuleContext(MySQLParser.Table_specContext,0)


        def partition_clause(self):
            return self.getTypedRuleContext(MySQLParser.Partition_clauseContext,0)


        def alias(self):
            return self.getTypedRuleContext(MySQLParser.AliasContext,0)


        def index_hint_list(self):
            return self.getTypedRuleContext(MySQLParser.Index_hint_listContext,0)


        def subquery(self):
            return self.getTypedRuleContext(MySQLParser.SubqueryContext,0)


        def LPAREN(self):
            return self.getToken(MySQLParser.LPAREN, 0)

        def table_references(self):
            return self.getTypedRuleContext(MySQLParser.Table_referencesContext,0)


        def RPAREN(self):
            return self.getToken(MySQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_table_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_factor" ):
                listener.enterTable_factor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_factor" ):
                listener.exitTable_factor(self)




    def table_factor(self):

        localctx = MySQLParser.Table_factorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_table_factor)
        try:
            self.state = 626
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 609
                self.table_spec()
                self.state = 611
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
                if la_ == 1:
                    self.state = 610
                    self.partition_clause()


                self.state = 614
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
                if la_ == 1:
                    self.state = 613
                    self.alias()


                self.state = 617
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
                if la_ == 1:
                    self.state = 616
                    self.index_hint_list()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 619
                self.subquery()
                self.state = 620
                self.alias()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 622
                self.match(MySQLParser.LPAREN)
                self.state = 623
                self.table_references()
                self.state = 624
                self.match(MySQLParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Index_hint_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def index_hint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.Index_hintContext)
            else:
                return self.getTypedRuleContext(MySQLParser.Index_hintContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA)
            else:
                return self.getToken(MySQLParser.COMMA, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_index_hint_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_hint_list" ):
                listener.enterIndex_hint_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_hint_list" ):
                listener.exitIndex_hint_list(self)




    def index_hint_list(self):

        localctx = MySQLParser.Index_hint_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_index_hint_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 628
            self.index_hint()
            self.state = 633
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,66,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 629
                    self.match(MySQLParser.COMMA)
                    self.state = 630
                    self.index_hint() 
                self.state = 635
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,66,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Index_optionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INDEX_SYM(self):
            return self.getToken(MySQLParser.INDEX_SYM, 0)

        def KEY_SYM(self):
            return self.getToken(MySQLParser.KEY_SYM, 0)

        def FOR_SYM(self):
            return self.getToken(MySQLParser.FOR_SYM, 0)

        def JOIN_SYM(self):
            return self.getToken(MySQLParser.JOIN_SYM, 0)

        def ORDER_SYM(self):
            return self.getToken(MySQLParser.ORDER_SYM, 0)

        def BY_SYM(self):
            return self.getToken(MySQLParser.BY_SYM, 0)

        def GROUP_SYM(self):
            return self.getToken(MySQLParser.GROUP_SYM, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_index_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_options" ):
                listener.enterIndex_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_options" ):
                listener.exitIndex_options(self)




    def index_options(self):

        localctx = MySQLParser.Index_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_index_options)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 636
            _la = self._input.LA(1)
            if not(_la==MySQLParser.INDEX_SYM or _la==MySQLParser.KEY_SYM):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 645
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.FOR_SYM:
                self.state = 637
                self.match(MySQLParser.FOR_SYM)
                self.state = 643
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySQLParser.JOIN_SYM]:
                    self.state = 638
                    self.match(MySQLParser.JOIN_SYM)
                    pass
                elif token in [MySQLParser.ORDER_SYM]:
                    self.state = 639
                    self.match(MySQLParser.ORDER_SYM)
                    self.state = 640
                    self.match(MySQLParser.BY_SYM)
                    pass
                elif token in [MySQLParser.GROUP_SYM]:
                    self.state = 641
                    self.match(MySQLParser.GROUP_SYM)
                    self.state = 642
                    self.match(MySQLParser.BY_SYM)
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Index_hintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USE_SYM(self):
            return self.getToken(MySQLParser.USE_SYM, 0)

        def index_options(self):
            return self.getTypedRuleContext(MySQLParser.Index_optionsContext,0)


        def LPAREN(self):
            return self.getToken(MySQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(MySQLParser.RPAREN, 0)

        def index_list(self):
            return self.getTypedRuleContext(MySQLParser.Index_listContext,0)


        def IGNORE_SYM(self):
            return self.getToken(MySQLParser.IGNORE_SYM, 0)

        def FORCE_SYM(self):
            return self.getToken(MySQLParser.FORCE_SYM, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_index_hint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_hint" ):
                listener.enterIndex_hint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_hint" ):
                listener.exitIndex_hint(self)




    def index_hint(self):

        localctx = MySQLParser.Index_hintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_index_hint)
        self._la = 0 # Token type
        try:
            self.state = 667
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.USE_SYM]:
                self.enterOuterAlt(localctx, 1)
                self.state = 647
                self.match(MySQLParser.USE_SYM)
                self.state = 648
                self.index_options()
                self.state = 649
                self.match(MySQLParser.LPAREN)
                self.state = 651
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySQLParser.T__0) | (1 << MySQLParser.ABS) | (1 << MySQLParser.ACCESSIBLE_SYM) | (1 << MySQLParser.ACOS) | (1 << MySQLParser.ACTION) | (1 << MySQLParser.ADD_SYM) | (1 << MySQLParser.ADDDATE) | (1 << MySQLParser.ADDTIME) | (1 << MySQLParser.AES_DECRYPT) | (1 << MySQLParser.AES_ENCRYPT) | (1 << MySQLParser.AFTER_SYM) | (1 << MySQLParser.AGAINST) | (1 << MySQLParser.AGGREGATE_SYM) | (1 << MySQLParser.ALGORITHM_SYM) | (1 << MySQLParser.ALL) | (1 << MySQLParser.ALTER) | (1 << MySQLParser.ANALYZE_SYM) | (1 << MySQLParser.ANY) | (1 << MySQLParser.ARMSCII8) | (1 << MySQLParser.AS_SYM) | (1 << MySQLParser.ASC) | (1 << MySQLParser.ASCII_SYM) | (1 << MySQLParser.ASENSITIVE_SYM) | (1 << MySQLParser.ASIN) | (1 << MySQLParser.AT_SYM) | (1 << MySQLParser.ATAN) | (1 << MySQLParser.ATAN2) | (1 << MySQLParser.AUTHORS_SYM) | (1 << MySQLParser.AUTO_INCREMENT) | (1 << MySQLParser.AUTOEXTEND_SIZE_SYM) | (1 << MySQLParser.AVG) | (1 << MySQLParser.AVG_ROW_LENGTH) | (1 << MySQLParser.BACKUP_SYM) | (1 << MySQLParser.BEFORE_SYM) | (1 << MySQLParser.BEGIN_SYM) | (1 << MySQLParser.BENCHMARK) | (1 << MySQLParser.BETWEEN) | (1 << MySQLParser.BIG5) | (1 << MySQLParser.BIGINT) | (1 << MySQLParser.BIN) | (1 << MySQLParser.BINARY) | (1 << MySQLParser.BINLOG_SYM) | (1 << MySQLParser.BIT_AND) | (1 << MySQLParser.BIT_LENGTH) | (1 << MySQLParser.BIT_OR) | (1 << MySQLParser.BIT_SYM) | (1 << MySQLParser.BIT_XOR) | (1 << MySQLParser.BLOB_SYM) | (1 << MySQLParser.BLOCK_SYM) | (1 << MySQLParser.BOOL_SYM) | (1 << MySQLParser.BOOLEAN_SYM) | (1 << MySQLParser.BOTH) | (1 << MySQLParser.BTREE_SYM) | (1 << MySQLParser.BY_SYM) | (1 << MySQLParser.BYTE_SYM) | (1 << MySQLParser.CACHE_SYM) | (1 << MySQLParser.CALL_SYM) | (1 << MySQLParser.CASCADE) | (1 << MySQLParser.CASCADED) | (1 << MySQLParser.CASE_SYM) | (1 << MySQLParser.CAST_SYM) | (1 << MySQLParser.CEIL) | (1 << MySQLParser.CEILING))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (MySQLParser.CHAIN_SYM - 64)) | (1 << (MySQLParser.CHANGE - 64)) | (1 << (MySQLParser.CHANGED - 64)) | (1 << (MySQLParser.CHAR - 64)) | (1 << (MySQLParser.CHAR_LENGTH - 64)) | (1 << (MySQLParser.CHARACTER_SYM - 64)) | (1 << (MySQLParser.CHARSET - 64)) | (1 << (MySQLParser.CHECK_SYM - 64)) | (1 << (MySQLParser.CHECKSUM_SYM - 64)) | (1 << (MySQLParser.CIPHER_SYM - 64)) | (1 << (MySQLParser.CLIENT_SYM - 64)) | (1 << (MySQLParser.CLOSE_SYM - 64)) | (1 << (MySQLParser.COALESCE - 64)) | (1 << (MySQLParser.CODE_SYM - 64)) | (1 << (MySQLParser.COERCIBILITY - 64)) | (1 << (MySQLParser.COLLATE_SYM - 64)) | (1 << (MySQLParser.COLLATION - 64)) | (1 << (MySQLParser.COLUMN_FORMAT - 64)) | (1 << (MySQLParser.COLUMN_SYM - 64)) | (1 << (MySQLParser.COLUMNS_SYM - 64)) | (1 << (MySQLParser.COMMENT_SYM - 64)) | (1 << (MySQLParser.COMMIT_SYM - 64)) | (1 << (MySQLParser.COMMITTED_SYM - 64)) | (1 << (MySQLParser.COMPACT_SYM - 64)) | (1 << (MySQLParser.COMPLETION_SYM - 64)) | (1 << (MySQLParser.COMPRESS - 64)) | (1 << (MySQLParser.COMPRESSED_SYM - 64)) | (1 << (MySQLParser.CONCAT - 64)) | (1 << (MySQLParser.CONCAT_WS - 64)) | (1 << (MySQLParser.CONCURRENT - 64)) | (1 << (MySQLParser.CONDITION_SYM - 64)) | (1 << (MySQLParser.CONNECTION_ID - 64)) | (1 << (MySQLParser.CONNECTION_SYM - 64)) | (1 << (MySQLParser.CONSISTENT_SYM - 64)) | (1 << (MySQLParser.CONSTRAINT - 64)) | (1 << (MySQLParser.CONTAINS_SYM - 64)) | (1 << (MySQLParser.CONTEXT_SYM - 64)) | (1 << (MySQLParser.CONTINUE_SYM - 64)) | (1 << (MySQLParser.CONTRIBUTORS_SYM - 64)) | (1 << (MySQLParser.CONV - 64)) | (1 << (MySQLParser.CONVERT_SYM - 64)) | (1 << (MySQLParser.CONVERT_TZ - 64)) | (1 << (MySQLParser.COPY_SYM - 64)) | (1 << (MySQLParser.COS - 64)) | (1 << (MySQLParser.COT - 64)) | (1 << (MySQLParser.COUNT - 64)) | (1 << (MySQLParser.CP1250 - 64)) | (1 << (MySQLParser.CP1251 - 64)) | (1 << (MySQLParser.CP1256 - 64)) | (1 << (MySQLParser.CP1257 - 64)) | (1 << (MySQLParser.CP850 - 64)) | (1 << (MySQLParser.CP852 - 64)) | (1 << (MySQLParser.CP866 - 64)) | (1 << (MySQLParser.CP932 - 64)) | (1 << (MySQLParser.CPU_SYM - 64)) | (1 << (MySQLParser.CRC32 - 64)) | (1 << (MySQLParser.CREATE - 64)) | (1 << (MySQLParser.CROSECOND - 64)) | (1 << (MySQLParser.CROSS - 64)) | (1 << (MySQLParser.CUBE_SYM - 64)) | (1 << (MySQLParser.CURDATE - 64)) | (1 << (MySQLParser.CURRENT_TIMESTAMP - 64)) | (1 << (MySQLParser.CURRENT_USER - 64)) | (1 << (MySQLParser.CURSOR_SYM - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (MySQLParser.CURTIME - 128)) | (1 << (MySQLParser.DATABASE - 128)) | (1 << (MySQLParser.DATAFILE_SYM - 128)) | (1 << (MySQLParser.DATA_SYM - 128)) | (1 << (MySQLParser.DATE_ADD - 128)) | (1 << (MySQLParser.DATE_FORMAT - 128)) | (1 << (MySQLParser.DATE_SUB - 128)) | (1 << (MySQLParser.DATE_SYM - 128)) | (1 << (MySQLParser.DATEDIFF - 128)) | (1 << (MySQLParser.DATETIME - 128)) | (1 << (MySQLParser.DAY_SYM - 128)) | (1 << (MySQLParser.DAY_HOUR - 128)) | (1 << (MySQLParser.DAY_MICROSECOND - 128)) | (1 << (MySQLParser.DAY_MINUTE - 128)) | (1 << (MySQLParser.DAY_SECOND - 128)) | (1 << (MySQLParser.DAYNAME - 128)) | (1 << (MySQLParser.DAYOFMONTH - 128)) | (1 << (MySQLParser.DAYOFWEEK - 128)) | (1 << (MySQLParser.DAYOFYEAR - 128)) | (1 << (MySQLParser.DEALLOCATE_SYM - 128)) | (1 << (MySQLParser.DEC8 - 128)) | (1 << (MySQLParser.DECIMAL_SYM - 128)) | (1 << (MySQLParser.DECLARE_SYM - 128)) | (1 << (MySQLParser.DECODE - 128)) | (1 << (MySQLParser.DEFAULT - 128)) | (1 << (MySQLParser.DEFINER - 128)) | (1 << (MySQLParser.DEGREES - 128)) | (1 << (MySQLParser.DELAY_KEY_WRITE_SYM - 128)) | (1 << (MySQLParser.DELAYED_SYM - 128)) | (1 << (MySQLParser.DELETE_SYM - 128)) | (1 << (MySQLParser.DES_DECRYPT - 128)) | (1 << (MySQLParser.DES_ENCRYPT - 128)) | (1 << (MySQLParser.DES_KEY_FILE - 128)) | (1 << (MySQLParser.DESC - 128)) | (1 << (MySQLParser.DETERMINISTIC_SYM - 128)) | (1 << (MySQLParser.DIRECTORY_SYM - 128)) | (1 << (MySQLParser.DISABLE_SYM - 128)) | (1 << (MySQLParser.DISCARD - 128)) | (1 << (MySQLParser.DISK_SYM - 128)) | (1 << (MySQLParser.DISTINCT - 128)) | (1 << (MySQLParser.DISTINCTROW - 128)) | (1 << (MySQLParser.DO_SYM - 128)) | (1 << (MySQLParser.DOUBLE_SYM - 128)) | (1 << (MySQLParser.DROP - 128)) | (1 << (MySQLParser.DUAL_SYM - 128)) | (1 << (MySQLParser.DUMPFILE - 128)) | (1 << (MySQLParser.DUPLICATE_SYM - 128)) | (1 << (MySQLParser.DYNAMIC_SYM - 128)) | (1 << (MySQLParser.EACH_SYM - 128)) | (1 << (MySQLParser.ELSE_SYM - 128)) | (1 << (MySQLParser.ELSIF_SYM - 128)) | (1 << (MySQLParser.ELT - 128)) | (1 << (MySQLParser.ENABLE_SYM - 128)) | (1 << (MySQLParser.ENCLOSED - 128)) | (1 << (MySQLParser.ENCODE - 128)) | (1 << (MySQLParser.ENCRYPT - 128)) | (1 << (MySQLParser.END_SYM - 128)) | (1 << (MySQLParser.ENDS_SYM - 128)) | (1 << (MySQLParser.ENGINE_SYM - 128)) | (1 << (MySQLParser.ENGINES_SYM - 128)) | (1 << (MySQLParser.ENUM - 128)) | (1 << (MySQLParser.ERRORS - 128)) | (1 << (MySQLParser.ESCAPE_SYM - 128)) | (1 << (MySQLParser.ESCAPED - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (MySQLParser.EUCJPMS - 192)) | (1 << (MySQLParser.EUCKR - 192)) | (1 << (MySQLParser.EVENT_SYM - 192)) | (1 << (MySQLParser.EVENTS_SYM - 192)) | (1 << (MySQLParser.EVERY_SYM - 192)) | (1 << (MySQLParser.EXCHANGE_SYM - 192)) | (1 << (MySQLParser.EXECUTE_SYM - 192)) | (1 << (MySQLParser.EXCLUSIVE_SYM - 192)) | (1 << (MySQLParser.EXISTS - 192)) | (1 << (MySQLParser.EXIT_SYM - 192)) | (1 << (MySQLParser.EXP - 192)) | (1 << (MySQLParser.EXPANSION_SYM - 192)) | (1 << (MySQLParser.EXPORT_SET - 192)) | (1 << (MySQLParser.EXTENDED_SYM - 192)) | (1 << (MySQLParser.EXTENT_SIZE_SYM - 192)) | (1 << (MySQLParser.EXTRACT - 192)) | (1 << (MySQLParser.FALSE_SYM - 192)) | (1 << (MySQLParser.FAST_SYM - 192)) | (1 << (MySQLParser.FAULTS_SYM - 192)) | (1 << (MySQLParser.FIELDS_SYM - 192)) | (1 << (MySQLParser.FETCH_SYM - 192)) | (1 << (MySQLParser.FIELD - 192)) | (1 << (MySQLParser.FILE_SYM - 192)) | (1 << (MySQLParser.FIND_IN_SET - 192)) | (1 << (MySQLParser.FIRST_SYM - 192)) | (1 << (MySQLParser.FIXED_SYM - 192)) | (1 << (MySQLParser.FLOAT_SYM - 192)) | (1 << (MySQLParser.FLOOR - 192)) | (1 << (MySQLParser.FLUSH_SYM - 192)) | (1 << (MySQLParser.FOR_SYM - 192)) | (1 << (MySQLParser.FORCE_SYM - 192)) | (1 << (MySQLParser.FOREIGN - 192)) | (1 << (MySQLParser.FORMAT - 192)) | (1 << (MySQLParser.FOUND_ROWS - 192)) | (1 << (MySQLParser.FOUND_SYM - 192)) | (1 << (MySQLParser.FROM - 192)) | (1 << (MySQLParser.FROM_BASE64 - 192)) | (1 << (MySQLParser.FROM_DAYS - 192)) | (1 << (MySQLParser.FROM_UNIXTIME - 192)) | (1 << (MySQLParser.FULL - 192)) | (1 << (MySQLParser.FULLTEXT_SYM - 192)) | (1 << (MySQLParser.FUNCTION_SYM - 192)) | (1 << (MySQLParser.GB2312 - 192)) | (1 << (MySQLParser.GBK - 192)) | (1 << (MySQLParser.GEOMETRY_SYM - 192)) | (1 << (MySQLParser.GEOMETRYCOLLECTION - 192)) | (1 << (MySQLParser.GEOSTD8 - 192)) | (1 << (MySQLParser.GET_FORMAT - 192)) | (1 << (MySQLParser.GET_LOCK - 192)) | (1 << (MySQLParser.GLOBAL_SYM - 192)) | (1 << (MySQLParser.GRANT - 192)) | (1 << (MySQLParser.GRANTS - 192)) | (1 << (MySQLParser.GREEK - 192)) | (1 << (MySQLParser.GROUP_CONCAT - 192)) | (1 << (MySQLParser.GROUP_SYM - 192)) | (1 << (MySQLParser.HANDLER_SYM - 192)) | (1 << (MySQLParser.HASH_SYM - 192)) | (1 << (MySQLParser.HAVING - 192)) | (1 << (MySQLParser.HEBREW - 192)) | (1 << (MySQLParser.HELP_SYM - 192)) | (1 << (MySQLParser.HEX - 192)) | (1 << (MySQLParser.HIGH_PRIORITY - 192)) | (1 << (MySQLParser.HOST_SYM - 192)) | (1 << (MySQLParser.HOSTS_SYM - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (MySQLParser.HOUR - 256)) | (1 << (MySQLParser.HOUR_MICROSECOND - 256)) | (1 << (MySQLParser.HOUR_MINUTE - 256)) | (1 << (MySQLParser.HOUR_SECOND - 256)) | (1 << (MySQLParser.HP8 - 256)) | (1 << (MySQLParser.IDENTIFIED_SYM - 256)) | (1 << (MySQLParser.IF - 256)) | (1 << (MySQLParser.IFNULL - 256)) | (1 << (MySQLParser.IGNORE_SYM - 256)) | (1 << (MySQLParser.IMPORT - 256)) | (1 << (MySQLParser.IN_SYM - 256)) | (1 << (MySQLParser.INDEX_SYM - 256)) | (1 << (MySQLParser.INDEXES - 256)) | (1 << (MySQLParser.INET_ATON - 256)) | (1 << (MySQLParser.INET_NTOA - 256)) | (1 << (MySQLParser.INFILE - 256)) | (1 << (MySQLParser.INITIAL_SIZE_SYM - 256)) | (1 << (MySQLParser.INNER_SYM - 256)) | (1 << (MySQLParser.INOUT_SYM - 256)) | (1 << (MySQLParser.INPLACE_SYM - 256)) | (1 << (MySQLParser.INSENSITIVE_SYM - 256)) | (1 << (MySQLParser.INSERT - 256)) | (1 << (MySQLParser.INSERT_METHOD - 256)) | (1 << (MySQLParser.INSTALL_SYM - 256)) | (1 << (MySQLParser.INSTR - 256)) | (1 << (MySQLParser.INT_SYM - 256)) | (1 << (MySQLParser.INTEGER_SYM - 256)) | (1 << (MySQLParser.INTERVAL_SYM - 256)) | (1 << (MySQLParser.INTO - 256)) | (1 << (MySQLParser.INVOKER_SYM - 256)) | (1 << (MySQLParser.IO_SYM - 256)) | (1 << (MySQLParser.IPC_SYM - 256)) | (1 << (MySQLParser.IS_FREE_LOCK - 256)) | (1 << (MySQLParser.IS_SYM - 256)) | (1 << (MySQLParser.IS_USED_LOCK - 256)) | (1 << (MySQLParser.ISOLATION - 256)) | (1 << (MySQLParser.ISSUER_SYM - 256)) | (1 << (MySQLParser.ITERATE_SYM - 256)) | (1 << (MySQLParser.JOIN_SYM - 256)) | (1 << (MySQLParser.KEY_BLOCK_SIZE - 256)) | (1 << (MySQLParser.KEY_SYM - 256)) | (1 << (MySQLParser.KEYBCS2 - 256)) | (1 << (MySQLParser.KEYS - 256)) | (1 << (MySQLParser.KILL_SYM - 256)) | (1 << (MySQLParser.KOI8R - 256)) | (1 << (MySQLParser.KOI8U - 256)) | (1 << (MySQLParser.LANGUAGE - 256)) | (1 << (MySQLParser.LAST_DAY - 256)) | (1 << (MySQLParser.LAST_INSERT_ID - 256)) | (1 << (MySQLParser.LAST_SYM - 256)) | (1 << (MySQLParser.LATIN1_BIN - 256)) | (1 << (MySQLParser.LATIN1_GENERAL_CS - 256)) | (1 << (MySQLParser.LATIN1 - 256)) | (1 << (MySQLParser.LATIN2 - 256)) | (1 << (MySQLParser.LATIN5 - 256)) | (1 << (MySQLParser.LATIN7 - 256)) | (1 << (MySQLParser.LEADING - 256)) | (1 << (MySQLParser.LEAVE_SYM - 256)) | (1 << (MySQLParser.LEAVES - 256)) | (1 << (MySQLParser.LEFT - 256)) | (1 << (MySQLParser.LENGTH - 256)) | (1 << (MySQLParser.LESS_SYM - 256)) | (1 << (MySQLParser.LEVEL_SYM - 256)) | (1 << (MySQLParser.LIKE_SYM - 256)))) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & ((1 << (MySQLParser.LIMIT - 320)) | (1 << (MySQLParser.LINEAR_SYM - 320)) | (1 << (MySQLParser.LINES - 320)) | (1 << (MySQLParser.LINESTRING - 320)) | (1 << (MySQLParser.LIST_SYM - 320)) | (1 << (MySQLParser.LN - 320)) | (1 << (MySQLParser.LOAD - 320)) | (1 << (MySQLParser.LOAD_FILE - 320)) | (1 << (MySQLParser.LOCAL_SYM - 320)) | (1 << (MySQLParser.LOCATE - 320)) | (1 << (MySQLParser.LOCK - 320)) | (1 << (MySQLParser.LOCKS_SYM - 320)) | (1 << (MySQLParser.LOG - 320)) | (1 << (MySQLParser.LOG10 - 320)) | (1 << (MySQLParser.LOG2 - 320)) | (1 << (MySQLParser.LOGFILE_SYM - 320)) | (1 << (MySQLParser.LOGS_SYM - 320)) | (1 << (MySQLParser.LONG_SYM - 320)) | (1 << (MySQLParser.LONGBLOB - 320)) | (1 << (MySQLParser.LONGTEXT - 320)) | (1 << (MySQLParser.LOOP_SYM - 320)) | (1 << (MySQLParser.LOW_PRIORITY - 320)) | (1 << (MySQLParser.LOWER - 320)) | (1 << (MySQLParser.LPAD - 320)) | (1 << (MySQLParser.LTRIM - 320)) | (1 << (MySQLParser.MACCE - 320)) | (1 << (MySQLParser.MACROMAN - 320)) | (1 << (MySQLParser.MAKE_SET - 320)) | (1 << (MySQLParser.MAKEDATE - 320)) | (1 << (MySQLParser.MAKETIME - 320)) | (1 << (MySQLParser.MASTER_CONNECT_RETRY - 320)) | (1 << (MySQLParser.MASTER_HOST_SYM - 320)) | (1 << (MySQLParser.MASTER_LOG_FILE_SYM - 320)) | (1 << (MySQLParser.MASTER_LOG_POS_SYM - 320)) | (1 << (MySQLParser.MASTER_PASSWORD_SYM - 320)) | (1 << (MySQLParser.MASTER_PORT_SYM - 320)) | (1 << (MySQLParser.MASTER_POS_WAIT - 320)) | (1 << (MySQLParser.MASTER_SERVER_ID_SYM - 320)) | (1 << (MySQLParser.MASTER_SSL_CA_SYM - 320)) | (1 << (MySQLParser.MASTER_SSL_CAPATH_SYM - 320)) | (1 << (MySQLParser.MASTER_SSL_CERT_SYM - 320)) | (1 << (MySQLParser.MASTER_SSL_CIPHER_SYM - 320)) | (1 << (MySQLParser.MASTER_SSL_KEY_SYM - 320)) | (1 << (MySQLParser.MASTER_SSL_SYM - 320)) | (1 << (MySQLParser.MASTER_SSL_VERIFY_SERVER_CERT - 320)) | (1 << (MySQLParser.MASTER_SYM - 320)) | (1 << (MySQLParser.MASTER_USER_SYM - 320)) | (1 << (MySQLParser.MATCH - 320)) | (1 << (MySQLParser.MAX_SYM - 320)) | (1 << (MySQLParser.MAX_CONNECTIONS_PER_HOUR - 320)) | (1 << (MySQLParser.MAX_QUERIES_PER_HOUR - 320)) | (1 << (MySQLParser.MAX_ROWS - 320)) | (1 << (MySQLParser.MAX_SIZE_SYM - 320)) | (1 << (MySQLParser.MAX_UPDATES_PER_HOUR - 320)) | (1 << (MySQLParser.MAX_USER_CONNECTIONS_SYM - 320)) | (1 << (MySQLParser.MAXVALUE_SYM - 320)) | (1 << (MySQLParser.MD5 - 320)) | (1 << (MySQLParser.MEDIUM_SYM - 320)) | (1 << (MySQLParser.MEDIUMBLOB - 320)) | (1 << (MySQLParser.MEDIUMINT - 320)) | (1 << (MySQLParser.MEDIUMTEXT - 320)) | (1 << (MySQLParser.MEMORY_SYM - 320)) | (1 << (MySQLParser.MERGE_SYM - 320)) | (1 << (MySQLParser.MICROSECOND - 320)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (MySQLParser.MID - 384)) | (1 << (MySQLParser.MIGRATE_SYM - 384)) | (1 << (MySQLParser.MIN_SYM - 384)) | (1 << (MySQLParser.MIN_ROWS - 384)) | (1 << (MySQLParser.MINUTE - 384)) | (1 << (MySQLParser.MINUTE_MICROSECOND - 384)) | (1 << (MySQLParser.MINUTE_SECOND - 384)) | (1 << (MySQLParser.MOD - 384)) | (1 << (MySQLParser.MODE_SYM - 384)) | (1 << (MySQLParser.MODIFIES_SYM - 384)) | (1 << (MySQLParser.MODIFY_SYM - 384)) | (1 << (MySQLParser.MONTH - 384)) | (1 << (MySQLParser.MONTHNAME - 384)) | (1 << (MySQLParser.MULTILINESTRING - 384)) | (1 << (MySQLParser.MULTIPOINT - 384)) | (1 << (MySQLParser.MULTIPOLYGON - 384)) | (1 << (MySQLParser.MUTEX_SYM - 384)) | (1 << (MySQLParser.NAME_CONST - 384)) | (1 << (MySQLParser.NAME_SYM - 384)) | (1 << (MySQLParser.NAMES_SYM - 384)) | (1 << (MySQLParser.NATIONAL_SYM - 384)) | (1 << (MySQLParser.NATURAL - 384)) | (1 << (MySQLParser.NCHAR_SYM - 384)) | (1 << (MySQLParser.NEW_SYM - 384)) | (1 << (MySQLParser.NEXT_SYM - 384)) | (1 << (MySQLParser.NO_SYM - 384)) | (1 << (MySQLParser.NO_WAIT_SYM - 384)) | (1 << (MySQLParser.NO_WRITE_TO_BINLOG - 384)) | (1 << (MySQLParser.NODEGROUP_SYM - 384)) | (1 << (MySQLParser.NONE_SYM - 384)) | (1 << (MySQLParser.NOT_SYM - 384)) | (1 << (MySQLParser.NOW - 384)) | (1 << (MySQLParser.NULL_SYM - 384)) | (1 << (MySQLParser.NUMERIC_SYM - 384)) | (1 << (MySQLParser.NVARCHAR_SYM - 384)) | (1 << (MySQLParser.OCT - 384)) | (1 << (MySQLParser.OFFSET_SYM - 384)) | (1 << (MySQLParser.OJ_SYM - 384)) | (1 << (MySQLParser.OLD_PASSWORD - 384)) | (1 << (MySQLParser.ON - 384)) | (1 << (MySQLParser.ONE_SHOT_SYM - 384)) | (1 << (MySQLParser.ONE_SYM - 384)) | (1 << (MySQLParser.OPEN_SYM - 384)) | (1 << (MySQLParser.OPTIMIZE - 384)) | (1 << (MySQLParser.OPTION - 384)) | (1 << (MySQLParser.OPTIONALLY - 384)) | (1 << (MySQLParser.OPTIONS_SYM - 384)) | (1 << (MySQLParser.ORD - 384)) | (1 << (MySQLParser.ORDER_SYM - 384)) | (1 << (MySQLParser.OUT_SYM - 384)) | (1 << (MySQLParser.OUTER - 384)) | (1 << (MySQLParser.OUTFILE - 384)) | (1 << (MySQLParser.OWNER_SYM - 384)) | (1 << (MySQLParser.PACK_KEYS_SYM - 384)) | (1 << (MySQLParser.PAGE_CHECKSUM_SYM - 384)) | (1 << (MySQLParser.PAGE_SYM - 384)) | (1 << (MySQLParser.PARSER_SYM - 384)) | (1 << (MySQLParser.PARTIAL - 384)) | (1 << (MySQLParser.PARTITION_SYM - 384)) | (1 << (MySQLParser.PARTITIONING_SYM - 384)) | (1 << (MySQLParser.PARTITIONS_SYM - 384)) | (1 << (MySQLParser.PASSWORD - 384)) | (1 << (MySQLParser.PERIOD_ADD - 384)) | (1 << (MySQLParser.PERIOD_DIFF - 384)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (MySQLParser.PHASE_SYM - 448)) | (1 << (MySQLParser.PI - 448)) | (1 << (MySQLParser.PLUGIN_SYM - 448)) | (1 << (MySQLParser.PLUGINS_SYM - 448)) | (1 << (MySQLParser.POINT_SYM - 448)) | (1 << (MySQLParser.POLYGON - 448)) | (1 << (MySQLParser.PORT_SYM - 448)) | (1 << (MySQLParser.POW - 448)) | (1 << (MySQLParser.POWER - 448)) | (1 << (MySQLParser.PRECISION - 448)) | (1 << (MySQLParser.PREPARE_SYM - 448)) | (1 << (MySQLParser.PRESERVE_SYM - 448)) | (1 << (MySQLParser.PREV_SYM - 448)) | (1 << (MySQLParser.PRIMARY_SYM - 448)) | (1 << (MySQLParser.PRIVILEGES - 448)) | (1 << (MySQLParser.PROCEDURE - 448)) | (1 << (MySQLParser.PROCESS - 448)) | (1 << (MySQLParser.PROCESSLIST_SYM - 448)) | (1 << (MySQLParser.PROFILE_SYM - 448)) | (1 << (MySQLParser.PROFILES_SYM - 448)) | (1 << (MySQLParser.PURGE - 448)) | (1 << (MySQLParser.QUARTER - 448)) | (1 << (MySQLParser.QUERY_SYM - 448)) | (1 << (MySQLParser.QUICK - 448)) | (1 << (MySQLParser.QUOTE - 448)) | (1 << (MySQLParser.RADIANS - 448)) | (1 << (MySQLParser.RAND - 448)) | (1 << (MySQLParser.RANGE_SYM - 448)) | (1 << (MySQLParser.READ_ONLY_SYM - 448)) | (1 << (MySQLParser.READ_SYM - 448)) | (1 << (MySQLParser.READ_WRITE_SYM - 448)) | (1 << (MySQLParser.READS_SYM - 448)) | (1 << (MySQLParser.REAL - 448)) | (1 << (MySQLParser.REBUILD_SYM - 448)) | (1 << (MySQLParser.RECOVER_SYM - 448)) | (1 << (MySQLParser.REDO_BUFFER_SIZE_SYM - 448)) | (1 << (MySQLParser.REDOFILE_SYM - 448)) | (1 << (MySQLParser.REDUNDANT_SYM - 448)) | (1 << (MySQLParser.REFERENCES - 448)) | (1 << (MySQLParser.REGEXP - 448)) | (1 << (MySQLParser.RELAY_LOG_FILE_SYM - 448)) | (1 << (MySQLParser.RELAY_LOG_POS_SYM - 448)) | (1 << (MySQLParser.RELEASE_LOCK - 448)) | (1 << (MySQLParser.RELEASE_SYM - 448)) | (1 << (MySQLParser.RELOAD - 448)) | (1 << (MySQLParser.REMOVE_SYM - 448)) | (1 << (MySQLParser.RENAME - 448)) | (1 << (MySQLParser.REORGANIZE_SYM - 448)) | (1 << (MySQLParser.REPAIR - 448)) | (1 << (MySQLParser.REPEAT - 448)) | (1 << (MySQLParser.REPEATABLE_SYM - 448)) | (1 << (MySQLParser.REPLACE - 448)) | (1 << (MySQLParser.REPLICATION - 448)) | (1 << (MySQLParser.REQUIRE_SYM - 448)) | (1 << (MySQLParser.RESET_SYM - 448)) | (1 << (MySQLParser.RESOURCES - 448)) | (1 << (MySQLParser.RESTORE_SYM - 448)) | (1 << (MySQLParser.RESTRICT - 448)) | (1 << (MySQLParser.RESUME_SYM - 448)) | (1 << (MySQLParser.RETURN_SYM - 448)) | (1 << (MySQLParser.RETURNS_SYM - 448)) | (1 << (MySQLParser.REVERSE - 448)) | (1 << (MySQLParser.REVOKE - 448)) | (1 << (MySQLParser.RIGHT - 448)))) != 0) or ((((_la - 512)) & ~0x3f) == 0 and ((1 << (_la - 512)) & ((1 << (MySQLParser.ROLLBACK - 512)) | (1 << (MySQLParser.ROLLUP_SYM - 512)) | (1 << (MySQLParser.ROUND - 512)) | (1 << (MySQLParser.ROUTINE_SYM - 512)) | (1 << (MySQLParser.ROW_FORMAT_SYM - 512)) | (1 << (MySQLParser.ROW_SYM - 512)) | (1 << (MySQLParser.ROWS_SYM - 512)) | (1 << (MySQLParser.RPAD - 512)) | (1 << (MySQLParser.RTREE_SYM - 512)) | (1 << (MySQLParser.RTRIM - 512)) | (1 << (MySQLParser.SAVEPOINT - 512)) | (1 << (MySQLParser.SCHEDULE_SYM - 512)) | (1 << (MySQLParser.SCHEMA - 512)) | (1 << (MySQLParser.SEC_TO_TIME - 512)) | (1 << (MySQLParser.SECOND - 512)) | (1 << (MySQLParser.SECOND_MICROSECOND - 512)) | (1 << (MySQLParser.SECURITY_SYM - 512)) | (1 << (MySQLParser.SELECT - 512)) | (1 << (MySQLParser.SENSITIVE_SYM - 512)) | (1 << (MySQLParser.SEPARATOR_SYM - 512)) | (1 << (MySQLParser.SERIAL_SYM - 512)) | (1 << (MySQLParser.SERIALIZABLE_SYM - 512)) | (1 << (MySQLParser.SERVER_SYM - 512)) | (1 << (MySQLParser.SESSION_SYM - 512)) | (1 << (MySQLParser.SESSION_USER - 512)) | (1 << (MySQLParser.SET_SYM - 512)) | (1 << (MySQLParser.SHARED_SYM - 512)) | (1 << (MySQLParser.SHARE_SYM - 512)) | (1 << (MySQLParser.SHOW - 512)) | (1 << (MySQLParser.SHUTDOWN - 512)) | (1 << (MySQLParser.SIGN - 512)) | (1 << (MySQLParser.SIGNED_SYM - 512)) | (1 << (MySQLParser.SIMPLE_SYM - 512)) | (1 << (MySQLParser.SIN - 512)) | (1 << (MySQLParser.SJIS - 512)) | (1 << (MySQLParser.SLAVE - 512)) | (1 << (MySQLParser.SLEEP - 512)) | (1 << (MySQLParser.SMALLINT - 512)) | (1 << (MySQLParser.SNAPSHOT_SYM - 512)) | (1 << (MySQLParser.SOCKET_SYM - 512)) | (1 << (MySQLParser.SONAME_SYM - 512)) | (1 << (MySQLParser.SOUNDEX - 512)) | (1 << (MySQLParser.SOUNDS_SYM - 512)) | (1 << (MySQLParser.SOURCE_SYM - 512)) | (1 << (MySQLParser.SPACE - 512)) | (1 << (MySQLParser.SPATIAL_SYM - 512)) | (1 << (MySQLParser.SPECIFIC_SYM - 512)) | (1 << (MySQLParser.SQL_BIG_RESULT - 512)) | (1 << (MySQLParser.SQL_BUFFER_RESULT - 512)) | (1 << (MySQLParser.SQL_CACHE_SYM - 512)) | (1 << (MySQLParser.SQL_CALC_FOUND_ROWS - 512)) | (1 << (MySQLParser.SQL_NO_CACHE_SYM - 512)) | (1 << (MySQLParser.SQL_SMALL_RESULT - 512)) | (1 << (MySQLParser.SQL_SYM - 512)) | (1 << (MySQLParser.SQL_THREAD - 512)) | (1 << (MySQLParser.SQLEXCEPTION_SYM - 512)) | (1 << (MySQLParser.SQLSTATE_SYM - 512)) | (1 << (MySQLParser.SQLWARNING_SYM - 512)) | (1 << (MySQLParser.SQRT - 512)) | (1 << (MySQLParser.SSL_SYM - 512)) | (1 << (MySQLParser.START_SYM - 512)) | (1 << (MySQLParser.STARTING - 512)) | (1 << (MySQLParser.STATS_AUTO_RECALC - 512)) | (1 << (MySQLParser.STATS_PERSISTENT - 512)))) != 0) or ((((_la - 576)) & ~0x3f) == 0 and ((1 << (_la - 576)) & ((1 << (MySQLParser.STARTS_SYM - 576)) | (1 << (MySQLParser.STATUS_SYM - 576)) | (1 << (MySQLParser.STD - 576)) | (1 << (MySQLParser.STDDEV - 576)) | (1 << (MySQLParser.STDDEV_POP - 576)) | (1 << (MySQLParser.STDDEV_SAMP - 576)) | (1 << (MySQLParser.STOP_SYM - 576)) | (1 << (MySQLParser.STORAGE_SYM - 576)) | (1 << (MySQLParser.STR_TO_DATE - 576)) | (1 << (MySQLParser.STRAIGHT_JOIN - 576)) | (1 << (MySQLParser.STRCMP - 576)) | (1 << (MySQLParser.STRING_SYM - 576)) | (1 << (MySQLParser.SUBJECT_SYM - 576)) | (1 << (MySQLParser.SUBPARTITION_SYM - 576)) | (1 << (MySQLParser.SUBPARTITIONS_SYM - 576)) | (1 << (MySQLParser.SUBSTRING - 576)) | (1 << (MySQLParser.SUBSTRING_INDEX - 576)) | (1 << (MySQLParser.SUBTIME - 576)) | (1 << (MySQLParser.SUM - 576)) | (1 << (MySQLParser.SUPER_SYM - 576)) | (1 << (MySQLParser.SUSPEND_SYM - 576)) | (1 << (MySQLParser.SWAPS_SYM - 576)) | (1 << (MySQLParser.SWE7 - 576)) | (1 << (MySQLParser.SWITCHES_SYM - 576)) | (1 << (MySQLParser.SYSDATE - 576)) | (1 << (MySQLParser.SYSTEM_USER - 576)) | (1 << (MySQLParser.TABLE - 576)) | (1 << (MySQLParser.TABLE_CHECKSUM_SYM - 576)) | (1 << (MySQLParser.TABLES - 576)) | (1 << (MySQLParser.TABLESPACE - 576)) | (1 << (MySQLParser.TAN - 576)) | (1 << (MySQLParser.TEMPORARY - 576)) | (1 << (MySQLParser.TEMPTABLE_SYM - 576)) | (1 << (MySQLParser.TERMINATED - 576)) | (1 << (MySQLParser.TEXT_SYM - 576)) | (1 << (MySQLParser.THAN_SYM - 576)) | (1 << (MySQLParser.THEN_SYM - 576)) | (1 << (MySQLParser.TIME_FORMAT - 576)) | (1 << (MySQLParser.TIME_SYM - 576)) | (1 << (MySQLParser.TIME_TO_SEC - 576)) | (1 << (MySQLParser.TIMEDIFF - 576)) | (1 << (MySQLParser.TIMESTAMP - 576)) | (1 << (MySQLParser.TIMESTAMPADD - 576)) | (1 << (MySQLParser.TIMESTAMPDIFF - 576)) | (1 << (MySQLParser.TINYBLOB - 576)) | (1 << (MySQLParser.TINYINT - 576)) | (1 << (MySQLParser.TINYTEXT - 576)) | (1 << (MySQLParser.TIS620 - 576)) | (1 << (MySQLParser.TO_BASE64 - 576)) | (1 << (MySQLParser.TO_DAYS - 576)) | (1 << (MySQLParser.TO_SECONDS - 576)) | (1 << (MySQLParser.TO_SYM - 576)) | (1 << (MySQLParser.TRAILING - 576)) | (1 << (MySQLParser.TRANSACTION - 576)) | (1 << (MySQLParser.TRANSACTIONAL_SYM - 576)) | (1 << (MySQLParser.TRIGGER_SYM - 576)) | (1 << (MySQLParser.TRIGGERS_SYM - 576)) | (1 << (MySQLParser.TRIM - 576)) | (1 << (MySQLParser.TRUE_SYM - 576)) | (1 << (MySQLParser.TRUNCATE - 576)) | (1 << (MySQLParser.TYPE_SYM - 576)) | (1 << (MySQLParser.TYPES_SYM - 576)) | (1 << (MySQLParser.UCS2 - 576)) | (1 << (MySQLParser.UJIS - 576)))) != 0) or ((((_la - 640)) & ~0x3f) == 0 and ((1 << (_la - 640)) & ((1 << (MySQLParser.UNCOMMITTED_SYM - 640)) | (1 << (MySQLParser.UNCOMPRESS - 640)) | (1 << (MySQLParser.UNCOMPRESSED_LENGTH - 640)) | (1 << (MySQLParser.UNDEFINED_SYM - 640)) | (1 << (MySQLParser.UNDO_BUFFER_SIZE_SYM - 640)) | (1 << (MySQLParser.UNDO_SYM - 640)) | (1 << (MySQLParser.UNDOFILE_SYM - 640)) | (1 << (MySQLParser.UNHEX - 640)) | (1 << (MySQLParser.UNICODE_SYM - 640)) | (1 << (MySQLParser.UNINSTALL_SYM - 640)) | (1 << (MySQLParser.UNION_SYM - 640)) | (1 << (MySQLParser.UNIQUE_SYM - 640)) | (1 << (MySQLParser.UNIX_TIMESTAMP - 640)) | (1 << (MySQLParser.UNKNOWN_SYM - 640)) | (1 << (MySQLParser.UNLOCK_SYM - 640)) | (1 << (MySQLParser.UNSIGNED_SYM - 640)) | (1 << (MySQLParser.UNTIL_SYM - 640)) | (1 << (MySQLParser.UPDATE - 640)) | (1 << (MySQLParser.UPGRADE_SYM - 640)) | (1 << (MySQLParser.UPPER - 640)) | (1 << (MySQLParser.USAGE - 640)) | (1 << (MySQLParser.USE_FRM - 640)) | (1 << (MySQLParser.USE_SYM - 640)) | (1 << (MySQLParser.USER - 640)) | (1 << (MySQLParser.USING_SYM - 640)) | (1 << (MySQLParser.UTC_DATE - 640)) | (1 << (MySQLParser.UTC_TIME - 640)) | (1 << (MySQLParser.UTC_TIMESTAMP - 640)) | (1 << (MySQLParser.UTF16LE - 640)) | (1 << (MySQLParser.UTF16 - 640)) | (1 << (MySQLParser.UTF32 - 640)) | (1 << (MySQLParser.UTF8 - 640)) | (1 << (MySQLParser.UUID - 640)) | (1 << (MySQLParser.VALUE_SYM - 640)) | (1 << (MySQLParser.VALUES - 640)) | (1 << (MySQLParser.VAR_POP - 640)) | (1 << (MySQLParser.VAR_SAMP - 640)) | (1 << (MySQLParser.VARBINARY - 640)) | (1 << (MySQLParser.VARCHAR - 640)) | (1 << (MySQLParser.VARIABLES - 640)) | (1 << (MySQLParser.VARIANCE - 640)) | (1 << (MySQLParser.VARYING - 640)) | (1 << (MySQLParser.VERSION_SYM - 640)) | (1 << (MySQLParser.VIEW_SYM - 640)) | (1 << (MySQLParser.WAIT_SYM - 640)) | (1 << (MySQLParser.WARNINGS - 640)) | (1 << (MySQLParser.WEEK - 640)) | (1 << (MySQLParser.WEEKDAY - 640)) | (1 << (MySQLParser.WEEKOFYEAR - 640)) | (1 << (MySQLParser.WEIGHT_STRING - 640)) | (1 << (MySQLParser.WHEN_SYM - 640)) | (1 << (MySQLParser.WHERE - 640)) | (1 << (MySQLParser.WHILE_SYM - 640)) | (1 << (MySQLParser.WITH - 640)) | (1 << (MySQLParser.WORK_SYM - 640)) | (1 << (MySQLParser.WRAPPER_SYM - 640)) | (1 << (MySQLParser.WRITE_SYM - 640)) | (1 << (MySQLParser.X509_SYM - 640)) | (1 << (MySQLParser.XA_SYM - 640)) | (1 << (MySQLParser.XML_SYM - 640)) | (1 << (MySQLParser.XOR - 640)) | (1 << (MySQLParser.YEAR - 640)) | (1 << (MySQLParser.YEAR_MONTH - 640)) | (1 << (MySQLParser.YEARWEEK - 640)))) != 0) or ((((_la - 704)) & ~0x3f) == 0 and ((1 << (_la - 704)) & ((1 << (MySQLParser.ZEROFILL - 704)) | (1 << (MySQLParser.DIVIDE - 704)) | (1 << (MySQLParser.MOD_SYM - 704)) | (1 << (MySQLParser.OR_SYM - 704)) | (1 << (MySQLParser.AND_SYM - 704)) | (1 << (MySQLParser.INTEGER_NUM - 704)) | (1 << (MySQLParser.HEX_DIGIT - 704)) | (1 << (MySQLParser.BIT_NUM - 704)) | (1 << (MySQLParser.REAL_NUMBER - 704)) | (1 << (MySQLParser.TEXT_STRING - 704)) | (1 << (MySQLParser.ID - 704)) | (1 << (MySQLParser.USER_VAR - 704)) | (1 << (MySQLParser.SL_COMMENT - 704)) | (1 << (MySQLParser.ML_COMMENT - 704)))) != 0):
                    self.state = 650
                    self.index_list()


                self.state = 653
                self.match(MySQLParser.RPAREN)
                pass
            elif token in [MySQLParser.IGNORE_SYM]:
                self.enterOuterAlt(localctx, 2)
                self.state = 655
                self.match(MySQLParser.IGNORE_SYM)
                self.state = 656
                self.index_options()
                self.state = 657
                self.match(MySQLParser.LPAREN)
                self.state = 658
                self.index_list()
                self.state = 659
                self.match(MySQLParser.RPAREN)
                pass
            elif token in [MySQLParser.FORCE_SYM]:
                self.enterOuterAlt(localctx, 3)
                self.state = 661
                self.match(MySQLParser.FORCE_SYM)
                self.state = 662
                self.index_options()
                self.state = 663
                self.match(MySQLParser.LPAREN)
                self.state = 664
                self.index_list()
                self.state = 665
                self.match(MySQLParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Index_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def index_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.Index_nameContext)
            else:
                return self.getTypedRuleContext(MySQLParser.Index_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA)
            else:
                return self.getToken(MySQLParser.COMMA, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_index_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_list" ):
                listener.enterIndex_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_list" ):
                listener.exitIndex_list(self)




    def index_list(self):

        localctx = MySQLParser.Index_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_index_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 669
            self.index_name()
            self.state = 674
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySQLParser.COMMA:
                self.state = 670
                self.match(MySQLParser.COMMA)
                self.state = 671
                self.index_name()
                self.state = 676
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Partition_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION_SYM(self):
            return self.getToken(MySQLParser.PARTITION_SYM, 0)

        def LPAREN(self):
            return self.getToken(MySQLParser.LPAREN, 0)

        def partition_names(self):
            return self.getTypedRuleContext(MySQLParser.Partition_namesContext,0)


        def RPAREN(self):
            return self.getToken(MySQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_partition_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartition_clause" ):
                listener.enterPartition_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartition_clause" ):
                listener.exitPartition_clause(self)




    def partition_clause(self):

        localctx = MySQLParser.Partition_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_partition_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 677
            self.match(MySQLParser.PARTITION_SYM)
            self.state = 678
            self.match(MySQLParser.LPAREN)
            self.state = 679
            self.partition_names()
            self.state = 680
            self.match(MySQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Partition_namesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def partition_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.Partition_nameContext)
            else:
                return self.getTypedRuleContext(MySQLParser.Partition_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA)
            else:
                return self.getToken(MySQLParser.COMMA, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_partition_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartition_names" ):
                listener.enterPartition_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartition_names" ):
                listener.exitPartition_names(self)




    def partition_names(self):

        localctx = MySQLParser.Partition_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_partition_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 682
            self.partition_name()
            self.state = 687
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySQLParser.COMMA:
                self.state = 683
                self.match(MySQLParser.COMMA)
                self.state = 684
                self.partition_name()
                self.state = 689
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def data_manipulation_statements(self):
            return self.getTypedRuleContext(MySQLParser.Data_manipulation_statementsContext,0)


        def SHIFT_LEFT(self):
            return self.getToken(MySQLParser.SHIFT_LEFT, 0)

        def SHIFT_RIGHT(self):
            return self.getToken(MySQLParser.SHIFT_RIGHT, 0)

        def SEMI(self):
            return self.getToken(MySQLParser.SEMI, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = MySQLParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 692
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.SHIFT_LEFT:
                self.state = 690
                self.match(MySQLParser.SHIFT_LEFT)
                self.state = 691
                self.match(MySQLParser.SHIFT_RIGHT)


            self.state = 694
            self.data_manipulation_statements()
            self.state = 696
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.SEMI:
                self.state = 695
                self.match(MySQLParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Data_manipulation_statementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_statement(self):
            return self.getTypedRuleContext(MySQLParser.Select_statementContext,0)


        def delete_statements(self):
            return self.getTypedRuleContext(MySQLParser.Delete_statementsContext,0)


        def insert_statements(self):
            return self.getTypedRuleContext(MySQLParser.Insert_statementsContext,0)


        def update_statements(self):
            return self.getTypedRuleContext(MySQLParser.Update_statementsContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_data_manipulation_statements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterData_manipulation_statements" ):
                listener.enterData_manipulation_statements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitData_manipulation_statements" ):
                listener.exitData_manipulation_statements(self)




    def data_manipulation_statements(self):

        localctx = MySQLParser.Data_manipulation_statementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_data_manipulation_statements)
        try:
            self.state = 702
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.SELECT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 698
                self.select_statement()
                pass
            elif token in [MySQLParser.DELETE_SYM]:
                self.enterOuterAlt(localctx, 2)
                self.state = 699
                self.delete_statements()
                pass
            elif token in [MySQLParser.INSERT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 700
                self.insert_statements()
                pass
            elif token in [MySQLParser.UPDATE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 701
                self.update_statements()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.Select_expressionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.Select_expressionContext,i)


        def UNION_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.UNION_SYM)
            else:
                return self.getToken(MySQLParser.UNION_SYM, i)

        def ALL(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.ALL)
            else:
                return self.getToken(MySQLParser.ALL, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_select_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_statement" ):
                listener.enterSelect_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_statement" ):
                listener.exitSelect_statement(self)




    def select_statement(self):

        localctx = MySQLParser.Select_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_select_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 704
            self.select_expression()
            self.state = 712
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySQLParser.UNION_SYM:
                self.state = 705
                self.match(MySQLParser.UNION_SYM)
                self.state = 707
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.ALL:
                    self.state = 706
                    self.match(MySQLParser.ALL)


                self.state = 709
                self.select_expression()
                self.state = 714
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(MySQLParser.SELECT, 0)

        def select_list(self):
            return self.getTypedRuleContext(MySQLParser.Select_listContext,0)


        def HIGH_PRIORITY(self):
            return self.getToken(MySQLParser.HIGH_PRIORITY, 0)

        def STRAIGHT_JOIN(self):
            return self.getToken(MySQLParser.STRAIGHT_JOIN, 0)

        def SQL_SMALL_RESULT(self):
            return self.getToken(MySQLParser.SQL_SMALL_RESULT, 0)

        def SQL_BIG_RESULT(self):
            return self.getToken(MySQLParser.SQL_BIG_RESULT, 0)

        def SQL_BUFFER_RESULT(self):
            return self.getToken(MySQLParser.SQL_BUFFER_RESULT, 0)

        def SQL_CALC_FOUND_ROWS(self):
            return self.getToken(MySQLParser.SQL_CALC_FOUND_ROWS, 0)

        def FROM(self):
            return self.getToken(MySQLParser.FROM, 0)

        def table_references(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.Table_referencesContext)
            else:
                return self.getTypedRuleContext(MySQLParser.Table_referencesContext,i)


        def orderby_clause(self):
            return self.getTypedRuleContext(MySQLParser.Orderby_clauseContext,0)


        def limit_clause(self):
            return self.getTypedRuleContext(MySQLParser.Limit_clauseContext,0)


        def ALL(self):
            return self.getToken(MySQLParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(MySQLParser.DISTINCT, 0)

        def DISTINCTROW(self):
            return self.getToken(MySQLParser.DISTINCTROW, 0)

        def SQL_CACHE_SYM(self):
            return self.getToken(MySQLParser.SQL_CACHE_SYM, 0)

        def SQL_NO_CACHE_SYM(self):
            return self.getToken(MySQLParser.SQL_NO_CACHE_SYM, 0)

        def FOR_SYM(self):
            return self.getToken(MySQLParser.FOR_SYM, 0)

        def UPDATE(self):
            return self.getToken(MySQLParser.UPDATE, 0)

        def LOCK(self):
            return self.getToken(MySQLParser.LOCK, 0)

        def IN_SYM(self):
            return self.getToken(MySQLParser.IN_SYM, 0)

        def SHARE_SYM(self):
            return self.getToken(MySQLParser.SHARE_SYM, 0)

        def MODE_SYM(self):
            return self.getToken(MySQLParser.MODE_SYM, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA)
            else:
                return self.getToken(MySQLParser.COMMA, i)

        def partition_clause(self):
            return self.getTypedRuleContext(MySQLParser.Partition_clauseContext,0)


        def where_clause(self):
            return self.getTypedRuleContext(MySQLParser.Where_clauseContext,0)


        def groupby_clause(self):
            return self.getTypedRuleContext(MySQLParser.Groupby_clauseContext,0)


        def having_clause(self):
            return self.getTypedRuleContext(MySQLParser.Having_clauseContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_select_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_expression" ):
                listener.enterSelect_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_expression" ):
                listener.exitSelect_expression(self)




    def select_expression(self):

        localctx = MySQLParser.Select_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_select_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 715
            self.match(MySQLParser.SELECT)
            self.state = 717
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.state = 716
                _la = self._input.LA(1)
                if not(_la==MySQLParser.ALL or _la==MySQLParser.DISTINCT or _la==MySQLParser.DISTINCTROW):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 720
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                self.state = 719
                self.match(MySQLParser.HIGH_PRIORITY)


            self.state = 723
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.state = 722
                self.match(MySQLParser.STRAIGHT_JOIN)


            self.state = 726
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.state = 725
                self.match(MySQLParser.SQL_SMALL_RESULT)


            self.state = 729
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.state = 728
                self.match(MySQLParser.SQL_BIG_RESULT)


            self.state = 732
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.state = 731
                self.match(MySQLParser.SQL_BUFFER_RESULT)


            self.state = 735
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.state = 734
                _la = self._input.LA(1)
                if not(_la==MySQLParser.SQL_CACHE_SYM or _la==MySQLParser.SQL_NO_CACHE_SYM):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 738
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.state = 737
                self.match(MySQLParser.SQL_CALC_FOUND_ROWS)


            self.state = 740
            self.select_list()
            self.state = 762
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.FROM:
                self.state = 741
                self.match(MySQLParser.FROM)
                self.state = 742
                self.table_references()
                self.state = 747
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySQLParser.COMMA:
                    self.state = 743
                    self.match(MySQLParser.COMMA)
                    self.state = 744
                    self.table_references()
                    self.state = 749
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 751
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.PARTITION_SYM:
                    self.state = 750
                    self.partition_clause()


                self.state = 754
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.WHERE:
                    self.state = 753
                    self.where_clause()


                self.state = 757
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.GROUP_SYM:
                    self.state = 756
                    self.groupby_clause()


                self.state = 760
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.HAVING:
                    self.state = 759
                    self.having_clause()




            self.state = 765
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.ORDER_SYM:
                self.state = 764
                self.orderby_clause()


            self.state = 768
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.LIMIT or _la==MySQLParser.INTEGER_NUM:
                self.state = 767
                self.limit_clause()


            self.state = 776
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.FOR_SYM]:
                self.state = 770
                self.match(MySQLParser.FOR_SYM)
                self.state = 771
                self.match(MySQLParser.UPDATE)
                pass
            elif token in [MySQLParser.LOCK]:
                self.state = 772
                self.match(MySQLParser.LOCK)
                self.state = 773
                self.match(MySQLParser.IN_SYM)
                self.state = 774
                self.match(MySQLParser.SHARE_SYM)
                self.state = 775
                self.match(MySQLParser.MODE_SYM)
                pass
            elif token in [MySQLParser.EOF, MySQLParser.ON, MySQLParser.UNION_SYM, MySQLParser.SEMI, MySQLParser.RPAREN]:
                pass
            else:
                raise NoViableAltException(self)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Where_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(MySQLParser.WHERE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA)
            else:
                return self.getToken(MySQLParser.COMMA, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_where_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhere_clause" ):
                listener.enterWhere_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhere_clause" ):
                listener.exitWhere_clause(self)




    def where_clause(self):

        localctx = MySQLParser.Where_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_where_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 778
            self.match(MySQLParser.WHERE)
            self.state = 779
            self.expression(0)
            self.state = 784
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySQLParser.COMMA:
                self.state = 780
                self.match(MySQLParser.COMMA)
                self.state = 781
                self.expression(0)
                self.state = 786
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Groupby_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP_SYM(self):
            return self.getToken(MySQLParser.GROUP_SYM, 0)

        def BY_SYM(self):
            return self.getToken(MySQLParser.BY_SYM, 0)

        def groupby_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.Groupby_itemContext)
            else:
                return self.getTypedRuleContext(MySQLParser.Groupby_itemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA)
            else:
                return self.getToken(MySQLParser.COMMA, i)

        def WITH(self):
            return self.getToken(MySQLParser.WITH, 0)

        def ROLLUP_SYM(self):
            return self.getToken(MySQLParser.ROLLUP_SYM, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_groupby_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupby_clause" ):
                listener.enterGroupby_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupby_clause" ):
                listener.exitGroupby_clause(self)




    def groupby_clause(self):

        localctx = MySQLParser.Groupby_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_groupby_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 787
            self.match(MySQLParser.GROUP_SYM)
            self.state = 788
            self.match(MySQLParser.BY_SYM)
            self.state = 789
            self.groupby_item()
            self.state = 794
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySQLParser.COMMA:
                self.state = 790
                self.match(MySQLParser.COMMA)
                self.state = 791
                self.groupby_item()
                self.state = 796
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 799
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.WITH:
                self.state = 797
                self.match(MySQLParser.WITH)
                self.state = 798
                self.match(MySQLParser.ROLLUP_SYM)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Groupby_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_spec(self):
            return self.getTypedRuleContext(MySQLParser.Column_specContext,0)


        def INTEGER_NUM(self):
            return self.getToken(MySQLParser.INTEGER_NUM, 0)

        def bit_expr(self):
            return self.getTypedRuleContext(MySQLParser.Bit_exprContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_groupby_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupby_item" ):
                listener.enterGroupby_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupby_item" ):
                listener.exitGroupby_item(self)




    def groupby_item(self):

        localctx = MySQLParser.Groupby_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_groupby_item)
        try:
            self.state = 804
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 801
                self.column_spec()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 802
                self.match(MySQLParser.INTEGER_NUM)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 803
                self.bit_expr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Having_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HAVING(self):
            return self.getToken(MySQLParser.HAVING, 0)

        def expression(self):
            return self.getTypedRuleContext(MySQLParser.ExpressionContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_having_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHaving_clause" ):
                listener.enterHaving_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHaving_clause" ):
                listener.exitHaving_clause(self)




    def having_clause(self):

        localctx = MySQLParser.Having_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_having_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 806
            self.match(MySQLParser.HAVING)
            self.state = 807
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Orderby_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER_SYM(self):
            return self.getToken(MySQLParser.ORDER_SYM, 0)

        def BY_SYM(self):
            return self.getToken(MySQLParser.BY_SYM, 0)

        def orderby_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.Orderby_itemContext)
            else:
                return self.getTypedRuleContext(MySQLParser.Orderby_itemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA)
            else:
                return self.getToken(MySQLParser.COMMA, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_orderby_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderby_clause" ):
                listener.enterOrderby_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderby_clause" ):
                listener.exitOrderby_clause(self)




    def orderby_clause(self):

        localctx = MySQLParser.Orderby_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_orderby_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 809
            self.match(MySQLParser.ORDER_SYM)
            self.state = 810
            self.match(MySQLParser.BY_SYM)
            self.state = 811
            self.orderby_item()
            self.state = 816
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySQLParser.COMMA:
                self.state = 812
                self.match(MySQLParser.COMMA)
                self.state = 813
                self.orderby_item()
                self.state = 818
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Orderby_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def groupby_item(self):
            return self.getTypedRuleContext(MySQLParser.Groupby_itemContext,0)


        def ASC(self):
            return self.getToken(MySQLParser.ASC, 0)

        def DESC(self):
            return self.getToken(MySQLParser.DESC, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_orderby_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderby_item" ):
                listener.enterOrderby_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderby_item" ):
                listener.exitOrderby_item(self)




    def orderby_item(self):

        localctx = MySQLParser.Orderby_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_orderby_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 819
            self.groupby_item()
            self.state = 821
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.ASC or _la==MySQLParser.DESC:
                self.state = 820
                _la = self._input.LA(1)
                if not(_la==MySQLParser.ASC or _la==MySQLParser.DESC):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Limit_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(MySQLParser.LIMIT, 0)

        def row_count(self):
            return self.getTypedRuleContext(MySQLParser.Row_countContext,0)


        def offset(self):
            return self.getTypedRuleContext(MySQLParser.OffsetContext,0)


        def COMMA(self):
            return self.getToken(MySQLParser.COMMA, 0)

        def OFFSET_SYM(self):
            return self.getToken(MySQLParser.OFFSET_SYM, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_limit_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimit_clause" ):
                listener.enterLimit_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimit_clause" ):
                listener.exitLimit_clause(self)




    def limit_clause(self):

        localctx = MySQLParser.Limit_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_limit_clause)
        try:
            self.state = 834
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.LIMIT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 823
                self.match(MySQLParser.LIMIT)

                self.state = 827
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
                if la_ == 1:
                    self.state = 824
                    self.offset()
                    self.state = 825
                    self.match(MySQLParser.COMMA)


                self.state = 829
                self.row_count()
                pass
            elif token in [MySQLParser.INTEGER_NUM]:
                self.enterOuterAlt(localctx, 2)
                self.state = 830
                self.row_count()
                self.state = 831
                self.match(MySQLParser.OFFSET_SYM)
                self.state = 832
                self.offset()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OffsetContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_NUM(self):
            return self.getToken(MySQLParser.INTEGER_NUM, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_offset

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOffset" ):
                listener.enterOffset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOffset" ):
                listener.exitOffset(self)




    def offset(self):

        localctx = MySQLParser.OffsetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_offset)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 836
            self.match(MySQLParser.INTEGER_NUM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Row_countContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_NUM(self):
            return self.getToken(MySQLParser.INTEGER_NUM, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_row_count

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRow_count" ):
                listener.enterRow_count(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRow_count" ):
                listener.exitRow_count(self)




    def row_count(self):

        localctx = MySQLParser.Row_countContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_row_count)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 838
            self.match(MySQLParser.INTEGER_NUM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASTERISK(self):
            return self.getToken(MySQLParser.ASTERISK, 0)

        def displayed_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.Displayed_columnContext)
            else:
                return self.getTypedRuleContext(MySQLParser.Displayed_columnContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA)
            else:
                return self.getToken(MySQLParser.COMMA, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_select_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_list" ):
                listener.enterSelect_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_list" ):
                listener.exitSelect_list(self)




    def select_list(self):

        localctx = MySQLParser.Select_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_select_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 849
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySQLParser.T__0, MySQLParser.ABS, MySQLParser.ACCESSIBLE_SYM, MySQLParser.ACOS, MySQLParser.ACTION, MySQLParser.ADD_SYM, MySQLParser.ADDDATE, MySQLParser.ADDTIME, MySQLParser.AES_DECRYPT, MySQLParser.AES_ENCRYPT, MySQLParser.AFTER_SYM, MySQLParser.AGAINST, MySQLParser.AGGREGATE_SYM, MySQLParser.ALGORITHM_SYM, MySQLParser.ALL, MySQLParser.ALTER, MySQLParser.ANALYZE_SYM, MySQLParser.ANY, MySQLParser.ARMSCII8, MySQLParser.AS_SYM, MySQLParser.ASC, MySQLParser.ASCII_SYM, MySQLParser.ASENSITIVE_SYM, MySQLParser.ASIN, MySQLParser.AT_SYM, MySQLParser.ATAN, MySQLParser.ATAN2, MySQLParser.AUTHORS_SYM, MySQLParser.AUTO_INCREMENT, MySQLParser.AUTOEXTEND_SIZE_SYM, MySQLParser.AVG, MySQLParser.AVG_ROW_LENGTH, MySQLParser.BACKUP_SYM, MySQLParser.BEFORE_SYM, MySQLParser.BEGIN_SYM, MySQLParser.BENCHMARK, MySQLParser.BETWEEN, MySQLParser.BIG5, MySQLParser.BIGINT, MySQLParser.BIN, MySQLParser.BINARY, MySQLParser.BINLOG_SYM, MySQLParser.BIT_AND, MySQLParser.BIT_LENGTH, MySQLParser.BIT_OR, MySQLParser.BIT_SYM, MySQLParser.BIT_XOR, MySQLParser.BLOB_SYM, MySQLParser.BLOCK_SYM, MySQLParser.BOOL_SYM, MySQLParser.BOOLEAN_SYM, MySQLParser.BOTH, MySQLParser.BTREE_SYM, MySQLParser.BY_SYM, MySQLParser.BYTE_SYM, MySQLParser.CACHE_SYM, MySQLParser.CALL_SYM, MySQLParser.CASCADE, MySQLParser.CASCADED, MySQLParser.CASE_SYM, MySQLParser.CAST_SYM, MySQLParser.CEIL, MySQLParser.CEILING, MySQLParser.CHAIN_SYM, MySQLParser.CHANGE, MySQLParser.CHANGED, MySQLParser.CHAR, MySQLParser.CHAR_LENGTH, MySQLParser.CHARACTER_SYM, MySQLParser.CHARSET, MySQLParser.CHECK_SYM, MySQLParser.CHECKSUM_SYM, MySQLParser.CIPHER_SYM, MySQLParser.CLIENT_SYM, MySQLParser.CLOSE_SYM, MySQLParser.COALESCE, MySQLParser.CODE_SYM, MySQLParser.COERCIBILITY, MySQLParser.COLLATE_SYM, MySQLParser.COLLATION, MySQLParser.COLUMN_FORMAT, MySQLParser.COLUMN_SYM, MySQLParser.COLUMNS_SYM, MySQLParser.COMMENT_SYM, MySQLParser.COMMIT_SYM, MySQLParser.COMMITTED_SYM, MySQLParser.COMPACT_SYM, MySQLParser.COMPLETION_SYM, MySQLParser.COMPRESS, MySQLParser.COMPRESSED_SYM, MySQLParser.CONCAT, MySQLParser.CONCAT_WS, MySQLParser.CONCURRENT, MySQLParser.CONDITION_SYM, MySQLParser.CONNECTION_ID, MySQLParser.CONNECTION_SYM, MySQLParser.CONSISTENT_SYM, MySQLParser.CONSTRAINT, MySQLParser.CONTAINS_SYM, MySQLParser.CONTEXT_SYM, MySQLParser.CONTINUE_SYM, MySQLParser.CONTRIBUTORS_SYM, MySQLParser.CONV, MySQLParser.CONVERT_SYM, MySQLParser.CONVERT_TZ, MySQLParser.COPY_SYM, MySQLParser.COS, MySQLParser.COT, MySQLParser.COUNT, MySQLParser.CP1250, MySQLParser.CP1251, MySQLParser.CP1256, MySQLParser.CP1257, MySQLParser.CP850, MySQLParser.CP852, MySQLParser.CP866, MySQLParser.CP932, MySQLParser.CPU_SYM, MySQLParser.CRC32, MySQLParser.CREATE, MySQLParser.CROSECOND, MySQLParser.CROSS, MySQLParser.CUBE_SYM, MySQLParser.CURDATE, MySQLParser.CURRENT_TIMESTAMP, MySQLParser.CURRENT_USER, MySQLParser.CURSOR_SYM, MySQLParser.CURTIME, MySQLParser.DATABASE, MySQLParser.DATAFILE_SYM, MySQLParser.DATA_SYM, MySQLParser.DATE_ADD, MySQLParser.DATE_FORMAT, MySQLParser.DATE_SUB, MySQLParser.DATE_SYM, MySQLParser.DATEDIFF, MySQLParser.DATETIME, MySQLParser.DAY_SYM, MySQLParser.DAY_HOUR, MySQLParser.DAY_MICROSECOND, MySQLParser.DAY_MINUTE, MySQLParser.DAY_SECOND, MySQLParser.DAYNAME, MySQLParser.DAYOFMONTH, MySQLParser.DAYOFWEEK, MySQLParser.DAYOFYEAR, MySQLParser.DEALLOCATE_SYM, MySQLParser.DEC8, MySQLParser.DECIMAL_SYM, MySQLParser.DECLARE_SYM, MySQLParser.DECODE, MySQLParser.DEFAULT, MySQLParser.DEFINER, MySQLParser.DEGREES, MySQLParser.DELAY_KEY_WRITE_SYM, MySQLParser.DELAYED_SYM, MySQLParser.DELETE_SYM, MySQLParser.DES_DECRYPT, MySQLParser.DES_ENCRYPT, MySQLParser.DES_KEY_FILE, MySQLParser.DESC, MySQLParser.DETERMINISTIC_SYM, MySQLParser.DIRECTORY_SYM, MySQLParser.DISABLE_SYM, MySQLParser.DISCARD, MySQLParser.DISK_SYM, MySQLParser.DISTINCT, MySQLParser.DISTINCTROW, MySQLParser.DO_SYM, MySQLParser.DOUBLE_SYM, MySQLParser.DROP, MySQLParser.DUAL_SYM, MySQLParser.DUMPFILE, MySQLParser.DUPLICATE_SYM, MySQLParser.DYNAMIC_SYM, MySQLParser.EACH_SYM, MySQLParser.ELSE_SYM, MySQLParser.ELSIF_SYM, MySQLParser.ELT, MySQLParser.ENABLE_SYM, MySQLParser.ENCLOSED, MySQLParser.ENCODE, MySQLParser.ENCRYPT, MySQLParser.END_SYM, MySQLParser.ENDS_SYM, MySQLParser.ENGINE_SYM, MySQLParser.ENGINES_SYM, MySQLParser.ENUM, MySQLParser.ERRORS, MySQLParser.ESCAPE_SYM, MySQLParser.ESCAPED, MySQLParser.EUCJPMS, MySQLParser.EUCKR, MySQLParser.EVENT_SYM, MySQLParser.EVENTS_SYM, MySQLParser.EVERY_SYM, MySQLParser.EXCHANGE_SYM, MySQLParser.EXECUTE_SYM, MySQLParser.EXCLUSIVE_SYM, MySQLParser.EXISTS, MySQLParser.EXIT_SYM, MySQLParser.EXP, MySQLParser.EXPANSION_SYM, MySQLParser.EXPORT_SET, MySQLParser.EXTENDED_SYM, MySQLParser.EXTENT_SIZE_SYM, MySQLParser.EXTRACT, MySQLParser.FALSE_SYM, MySQLParser.FAST_SYM, MySQLParser.FAULTS_SYM, MySQLParser.FIELDS_SYM, MySQLParser.FETCH_SYM, MySQLParser.FIELD, MySQLParser.FILE_SYM, MySQLParser.FIND_IN_SET, MySQLParser.FIRST_SYM, MySQLParser.FIXED_SYM, MySQLParser.FLOAT_SYM, MySQLParser.FLOOR, MySQLParser.FLUSH_SYM, MySQLParser.FOR_SYM, MySQLParser.FORCE_SYM, MySQLParser.FOREIGN, MySQLParser.FORMAT, MySQLParser.FOUND_ROWS, MySQLParser.FOUND_SYM, MySQLParser.FROM, MySQLParser.FROM_BASE64, MySQLParser.FROM_DAYS, MySQLParser.FROM_UNIXTIME, MySQLParser.FULL, MySQLParser.FULLTEXT_SYM, MySQLParser.FUNCTION_SYM, MySQLParser.GB2312, MySQLParser.GBK, MySQLParser.GEOMETRY_SYM, MySQLParser.GEOMETRYCOLLECTION, MySQLParser.GEOSTD8, MySQLParser.GET_FORMAT, MySQLParser.GET_LOCK, MySQLParser.GLOBAL_SYM, MySQLParser.GRANT, MySQLParser.GRANTS, MySQLParser.GREEK, MySQLParser.GROUP_CONCAT, MySQLParser.GROUP_SYM, MySQLParser.HANDLER_SYM, MySQLParser.HASH_SYM, MySQLParser.HAVING, MySQLParser.HEBREW, MySQLParser.HELP_SYM, MySQLParser.HEX, MySQLParser.HIGH_PRIORITY, MySQLParser.HOST_SYM, MySQLParser.HOSTS_SYM, MySQLParser.HOUR, MySQLParser.HOUR_MICROSECOND, MySQLParser.HOUR_MINUTE, MySQLParser.HOUR_SECOND, MySQLParser.HP8, MySQLParser.IDENTIFIED_SYM, MySQLParser.IF, MySQLParser.IFNULL, MySQLParser.IGNORE_SYM, MySQLParser.IMPORT, MySQLParser.IN_SYM, MySQLParser.INDEX_SYM, MySQLParser.INDEXES, MySQLParser.INET_ATON, MySQLParser.INET_NTOA, MySQLParser.INFILE, MySQLParser.INITIAL_SIZE_SYM, MySQLParser.INNER_SYM, MySQLParser.INOUT_SYM, MySQLParser.INPLACE_SYM, MySQLParser.INSENSITIVE_SYM, MySQLParser.INSERT, MySQLParser.INSERT_METHOD, MySQLParser.INSTALL_SYM, MySQLParser.INSTR, MySQLParser.INT_SYM, MySQLParser.INTEGER_SYM, MySQLParser.INTERVAL_SYM, MySQLParser.INTO, MySQLParser.INVOKER_SYM, MySQLParser.IO_SYM, MySQLParser.IPC_SYM, MySQLParser.IS_FREE_LOCK, MySQLParser.IS_SYM, MySQLParser.IS_USED_LOCK, MySQLParser.ISOLATION, MySQLParser.ISSUER_SYM, MySQLParser.ITERATE_SYM, MySQLParser.JOIN_SYM, MySQLParser.KEY_BLOCK_SIZE, MySQLParser.KEY_SYM, MySQLParser.KEYBCS2, MySQLParser.KEYS, MySQLParser.KILL_SYM, MySQLParser.KOI8R, MySQLParser.KOI8U, MySQLParser.LANGUAGE, MySQLParser.LAST_DAY, MySQLParser.LAST_INSERT_ID, MySQLParser.LAST_SYM, MySQLParser.LATIN1_BIN, MySQLParser.LATIN1_GENERAL_CS, MySQLParser.LATIN1, MySQLParser.LATIN2, MySQLParser.LATIN5, MySQLParser.LATIN7, MySQLParser.LEADING, MySQLParser.LEAVE_SYM, MySQLParser.LEAVES, MySQLParser.LEFT, MySQLParser.LENGTH, MySQLParser.LESS_SYM, MySQLParser.LEVEL_SYM, MySQLParser.LIKE_SYM, MySQLParser.LIMIT, MySQLParser.LINEAR_SYM, MySQLParser.LINES, MySQLParser.LINESTRING, MySQLParser.LIST_SYM, MySQLParser.LN, MySQLParser.LOAD, MySQLParser.LOAD_FILE, MySQLParser.LOCAL_SYM, MySQLParser.LOCATE, MySQLParser.LOCK, MySQLParser.LOCKS_SYM, MySQLParser.LOG, MySQLParser.LOG10, MySQLParser.LOG2, MySQLParser.LOGFILE_SYM, MySQLParser.LOGS_SYM, MySQLParser.LONG_SYM, MySQLParser.LONGBLOB, MySQLParser.LONGTEXT, MySQLParser.LOOP_SYM, MySQLParser.LOW_PRIORITY, MySQLParser.LOWER, MySQLParser.LPAD, MySQLParser.LTRIM, MySQLParser.MACCE, MySQLParser.MACROMAN, MySQLParser.MAKE_SET, MySQLParser.MAKEDATE, MySQLParser.MAKETIME, MySQLParser.MASTER_CONNECT_RETRY, MySQLParser.MASTER_HOST_SYM, MySQLParser.MASTER_LOG_FILE_SYM, MySQLParser.MASTER_LOG_POS_SYM, MySQLParser.MASTER_PASSWORD_SYM, MySQLParser.MASTER_PORT_SYM, MySQLParser.MASTER_POS_WAIT, MySQLParser.MASTER_SERVER_ID_SYM, MySQLParser.MASTER_SSL_CA_SYM, MySQLParser.MASTER_SSL_CAPATH_SYM, MySQLParser.MASTER_SSL_CERT_SYM, MySQLParser.MASTER_SSL_CIPHER_SYM, MySQLParser.MASTER_SSL_KEY_SYM, MySQLParser.MASTER_SSL_SYM, MySQLParser.MASTER_SSL_VERIFY_SERVER_CERT, MySQLParser.MASTER_SYM, MySQLParser.MASTER_USER_SYM, MySQLParser.MATCH, MySQLParser.MAX_SYM, MySQLParser.MAX_CONNECTIONS_PER_HOUR, MySQLParser.MAX_QUERIES_PER_HOUR, MySQLParser.MAX_ROWS, MySQLParser.MAX_SIZE_SYM, MySQLParser.MAX_UPDATES_PER_HOUR, MySQLParser.MAX_USER_CONNECTIONS_SYM, MySQLParser.MAXVALUE_SYM, MySQLParser.MD5, MySQLParser.MEDIUM_SYM, MySQLParser.MEDIUMBLOB, MySQLParser.MEDIUMINT, MySQLParser.MEDIUMTEXT, MySQLParser.MEMORY_SYM, MySQLParser.MERGE_SYM, MySQLParser.MICROSECOND, MySQLParser.MID, MySQLParser.MIGRATE_SYM, MySQLParser.MIN_SYM, MySQLParser.MIN_ROWS, MySQLParser.MINUTE, MySQLParser.MINUTE_MICROSECOND, MySQLParser.MINUTE_SECOND, MySQLParser.MOD, MySQLParser.MODE_SYM, MySQLParser.MODIFIES_SYM, MySQLParser.MODIFY_SYM, MySQLParser.MONTH, MySQLParser.MONTHNAME, MySQLParser.MULTILINESTRING, MySQLParser.MULTIPOINT, MySQLParser.MULTIPOLYGON, MySQLParser.MUTEX_SYM, MySQLParser.NAME_CONST, MySQLParser.NAME_SYM, MySQLParser.NAMES_SYM, MySQLParser.NATIONAL_SYM, MySQLParser.NATURAL, MySQLParser.NCHAR_SYM, MySQLParser.NEW_SYM, MySQLParser.NEXT_SYM, MySQLParser.NO_SYM, MySQLParser.NO_WAIT_SYM, MySQLParser.NO_WRITE_TO_BINLOG, MySQLParser.NODEGROUP_SYM, MySQLParser.NONE_SYM, MySQLParser.NOT_SYM, MySQLParser.NOW, MySQLParser.NULL_SYM, MySQLParser.NUMERIC_SYM, MySQLParser.NVARCHAR_SYM, MySQLParser.OCT, MySQLParser.OFFSET_SYM, MySQLParser.OJ_SYM, MySQLParser.OLD_PASSWORD, MySQLParser.ON, MySQLParser.ONE_SHOT_SYM, MySQLParser.ONE_SYM, MySQLParser.OPEN_SYM, MySQLParser.OPTIMIZE, MySQLParser.OPTION, MySQLParser.OPTIONALLY, MySQLParser.OPTIONS_SYM, MySQLParser.ORD, MySQLParser.ORDER_SYM, MySQLParser.OUT_SYM, MySQLParser.OUTER, MySQLParser.OUTFILE, MySQLParser.OWNER_SYM, MySQLParser.PACK_KEYS_SYM, MySQLParser.PAGE_CHECKSUM_SYM, MySQLParser.PAGE_SYM, MySQLParser.PARSER_SYM, MySQLParser.PARTIAL, MySQLParser.PARTITION_SYM, MySQLParser.PARTITIONING_SYM, MySQLParser.PARTITIONS_SYM, MySQLParser.PASSWORD, MySQLParser.PERIOD_ADD, MySQLParser.PERIOD_DIFF, MySQLParser.PHASE_SYM, MySQLParser.PI, MySQLParser.PLUGIN_SYM, MySQLParser.PLUGINS_SYM, MySQLParser.POINT_SYM, MySQLParser.POLYGON, MySQLParser.PORT_SYM, MySQLParser.POW, MySQLParser.POWER, MySQLParser.PRECISION, MySQLParser.PREPARE_SYM, MySQLParser.PRESERVE_SYM, MySQLParser.PREV_SYM, MySQLParser.PRIMARY_SYM, MySQLParser.PRIVILEGES, MySQLParser.PROCEDURE, MySQLParser.PROCESS, MySQLParser.PROCESSLIST_SYM, MySQLParser.PROFILE_SYM, MySQLParser.PROFILES_SYM, MySQLParser.PURGE, MySQLParser.QUARTER, MySQLParser.QUERY_SYM, MySQLParser.QUICK, MySQLParser.QUOTE, MySQLParser.RADIANS, MySQLParser.RAND, MySQLParser.RANGE_SYM, MySQLParser.READ_ONLY_SYM, MySQLParser.READ_SYM, MySQLParser.READ_WRITE_SYM, MySQLParser.READS_SYM, MySQLParser.REAL, MySQLParser.REBUILD_SYM, MySQLParser.RECOVER_SYM, MySQLParser.REDO_BUFFER_SIZE_SYM, MySQLParser.REDOFILE_SYM, MySQLParser.REDUNDANT_SYM, MySQLParser.REFERENCES, MySQLParser.REGEXP, MySQLParser.RELAY_LOG_FILE_SYM, MySQLParser.RELAY_LOG_POS_SYM, MySQLParser.RELEASE_LOCK, MySQLParser.RELEASE_SYM, MySQLParser.RELOAD, MySQLParser.REMOVE_SYM, MySQLParser.RENAME, MySQLParser.REORGANIZE_SYM, MySQLParser.REPAIR, MySQLParser.REPEAT, MySQLParser.REPEATABLE_SYM, MySQLParser.REPLACE, MySQLParser.REPLICATION, MySQLParser.REQUIRE_SYM, MySQLParser.RESET_SYM, MySQLParser.RESOURCES, MySQLParser.RESTORE_SYM, MySQLParser.RESTRICT, MySQLParser.RESUME_SYM, MySQLParser.RETURN_SYM, MySQLParser.RETURNS_SYM, MySQLParser.REVERSE, MySQLParser.REVOKE, MySQLParser.RIGHT, MySQLParser.ROLLBACK, MySQLParser.ROLLUP_SYM, MySQLParser.ROUND, MySQLParser.ROUTINE_SYM, MySQLParser.ROW_FORMAT_SYM, MySQLParser.ROW_SYM, MySQLParser.ROWS_SYM, MySQLParser.RPAD, MySQLParser.RTREE_SYM, MySQLParser.RTRIM, MySQLParser.SAVEPOINT, MySQLParser.SCHEDULE_SYM, MySQLParser.SCHEMA, MySQLParser.SEC_TO_TIME, MySQLParser.SECOND, MySQLParser.SECOND_MICROSECOND, MySQLParser.SECURITY_SYM, MySQLParser.SELECT, MySQLParser.SENSITIVE_SYM, MySQLParser.SEPARATOR_SYM, MySQLParser.SERIAL_SYM, MySQLParser.SERIALIZABLE_SYM, MySQLParser.SERVER_SYM, MySQLParser.SESSION_SYM, MySQLParser.SESSION_USER, MySQLParser.SET_SYM, MySQLParser.SHARED_SYM, MySQLParser.SHARE_SYM, MySQLParser.SHOW, MySQLParser.SHUTDOWN, MySQLParser.SIGN, MySQLParser.SIGNED_SYM, MySQLParser.SIMPLE_SYM, MySQLParser.SIN, MySQLParser.SJIS, MySQLParser.SLAVE, MySQLParser.SLEEP, MySQLParser.SMALLINT, MySQLParser.SNAPSHOT_SYM, MySQLParser.SOCKET_SYM, MySQLParser.SONAME_SYM, MySQLParser.SOUNDEX, MySQLParser.SOUNDS_SYM, MySQLParser.SOURCE_SYM, MySQLParser.SPACE, MySQLParser.SPATIAL_SYM, MySQLParser.SPECIFIC_SYM, MySQLParser.SQL_BIG_RESULT, MySQLParser.SQL_BUFFER_RESULT, MySQLParser.SQL_CACHE_SYM, MySQLParser.SQL_CALC_FOUND_ROWS, MySQLParser.SQL_NO_CACHE_SYM, MySQLParser.SQL_SMALL_RESULT, MySQLParser.SQL_SYM, MySQLParser.SQL_THREAD, MySQLParser.SQLEXCEPTION_SYM, MySQLParser.SQLSTATE_SYM, MySQLParser.SQLWARNING_SYM, MySQLParser.SQRT, MySQLParser.SSL_SYM, MySQLParser.START_SYM, MySQLParser.STARTING, MySQLParser.STATS_AUTO_RECALC, MySQLParser.STATS_PERSISTENT, MySQLParser.STARTS_SYM, MySQLParser.STATUS_SYM, MySQLParser.STD, MySQLParser.STDDEV, MySQLParser.STDDEV_POP, MySQLParser.STDDEV_SAMP, MySQLParser.STOP_SYM, MySQLParser.STORAGE_SYM, MySQLParser.STR_TO_DATE, MySQLParser.STRAIGHT_JOIN, MySQLParser.STRCMP, MySQLParser.STRING_SYM, MySQLParser.SUBJECT_SYM, MySQLParser.SUBPARTITION_SYM, MySQLParser.SUBPARTITIONS_SYM, MySQLParser.SUBSTRING, MySQLParser.SUBSTRING_INDEX, MySQLParser.SUBTIME, MySQLParser.SUM, MySQLParser.SUPER_SYM, MySQLParser.SUSPEND_SYM, MySQLParser.SWAPS_SYM, MySQLParser.SWE7, MySQLParser.SWITCHES_SYM, MySQLParser.SYSDATE, MySQLParser.SYSTEM_USER, MySQLParser.TABLE, MySQLParser.TABLE_CHECKSUM_SYM, MySQLParser.TABLES, MySQLParser.TABLESPACE, MySQLParser.TAN, MySQLParser.TEMPORARY, MySQLParser.TEMPTABLE_SYM, MySQLParser.TERMINATED, MySQLParser.TEXT_SYM, MySQLParser.THAN_SYM, MySQLParser.THEN_SYM, MySQLParser.TIME_FORMAT, MySQLParser.TIME_SYM, MySQLParser.TIME_TO_SEC, MySQLParser.TIMEDIFF, MySQLParser.TIMESTAMP, MySQLParser.TIMESTAMPADD, MySQLParser.TIMESTAMPDIFF, MySQLParser.TINYBLOB, MySQLParser.TINYINT, MySQLParser.TINYTEXT, MySQLParser.TIS620, MySQLParser.TO_BASE64, MySQLParser.TO_DAYS, MySQLParser.TO_SECONDS, MySQLParser.TO_SYM, MySQLParser.TRAILING, MySQLParser.TRANSACTION, MySQLParser.TRANSACTIONAL_SYM, MySQLParser.TRIGGER_SYM, MySQLParser.TRIGGERS_SYM, MySQLParser.TRIM, MySQLParser.TRUE_SYM, MySQLParser.TRUNCATE, MySQLParser.TYPE_SYM, MySQLParser.TYPES_SYM, MySQLParser.UCS2, MySQLParser.UJIS, MySQLParser.UNCOMMITTED_SYM, MySQLParser.UNCOMPRESS, MySQLParser.UNCOMPRESSED_LENGTH, MySQLParser.UNDEFINED_SYM, MySQLParser.UNDO_BUFFER_SIZE_SYM, MySQLParser.UNDO_SYM, MySQLParser.UNDOFILE_SYM, MySQLParser.UNHEX, MySQLParser.UNICODE_SYM, MySQLParser.UNINSTALL_SYM, MySQLParser.UNION_SYM, MySQLParser.UNIQUE_SYM, MySQLParser.UNIX_TIMESTAMP, MySQLParser.UNKNOWN_SYM, MySQLParser.UNLOCK_SYM, MySQLParser.UNSIGNED_SYM, MySQLParser.UNTIL_SYM, MySQLParser.UPDATE, MySQLParser.UPGRADE_SYM, MySQLParser.UPPER, MySQLParser.USAGE, MySQLParser.USE_FRM, MySQLParser.USE_SYM, MySQLParser.USER, MySQLParser.USING_SYM, MySQLParser.UTC_DATE, MySQLParser.UTC_TIME, MySQLParser.UTC_TIMESTAMP, MySQLParser.UTF16LE, MySQLParser.UTF16, MySQLParser.UTF32, MySQLParser.UTF8, MySQLParser.UUID, MySQLParser.VALUE_SYM, MySQLParser.VALUES, MySQLParser.VAR_POP, MySQLParser.VAR_SAMP, MySQLParser.VARBINARY, MySQLParser.VARCHAR, MySQLParser.VARIABLES, MySQLParser.VARIANCE, MySQLParser.VARYING, MySQLParser.VERSION_SYM, MySQLParser.VIEW_SYM, MySQLParser.WAIT_SYM, MySQLParser.WARNINGS, MySQLParser.WEEK, MySQLParser.WEEKDAY, MySQLParser.WEEKOFYEAR, MySQLParser.WEIGHT_STRING, MySQLParser.WHEN_SYM, MySQLParser.WHERE, MySQLParser.WHILE_SYM, MySQLParser.WITH, MySQLParser.WORK_SYM, MySQLParser.WRAPPER_SYM, MySQLParser.WRITE_SYM, MySQLParser.X509_SYM, MySQLParser.XA_SYM, MySQLParser.XML_SYM, MySQLParser.XOR, MySQLParser.YEAR, MySQLParser.YEAR_MONTH, MySQLParser.YEARWEEK, MySQLParser.ZEROFILL, MySQLParser.DIVIDE, MySQLParser.MOD_SYM, MySQLParser.OR_SYM, MySQLParser.AND_SYM, MySQLParser.LPAREN, MySQLParser.PLUS, MySQLParser.MINUS, MySQLParser.NEGATION, MySQLParser.INTEGER_NUM, MySQLParser.HEX_DIGIT, MySQLParser.BIT_NUM, MySQLParser.REAL_NUMBER, MySQLParser.TEXT_STRING, MySQLParser.ID, MySQLParser.USER_VAR, MySQLParser.SL_COMMENT, MySQLParser.ML_COMMENT]:
                self.state = 840
                self.displayed_column()
                self.state = 845
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySQLParser.COMMA:
                    self.state = 841
                    self.match(MySQLParser.COMMA)
                    self.state = 842
                    self.displayed_column()
                    self.state = 847
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [MySQLParser.ASTERISK]:
                self.state = 848
                self.match(MySQLParser.ASTERISK)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(MySQLParser.LPAREN, 0)

        def column_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.Column_specContext)
            else:
                return self.getTypedRuleContext(MySQLParser.Column_specContext,i)


        def RPAREN(self):
            return self.getToken(MySQLParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA)
            else:
                return self.getToken(MySQLParser.COMMA, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_column_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_list" ):
                listener.enterColumn_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_list" ):
                listener.exitColumn_list(self)




    def column_list(self):

        localctx = MySQLParser.Column_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_column_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 851
            self.match(MySQLParser.LPAREN)
            self.state = 852
            self.column_spec()
            self.state = 857
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySQLParser.COMMA:
                self.state = 853
                self.match(MySQLParser.COMMA)
                self.state = 854
                self.column_spec()
                self.state = 859
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 860
            self.match(MySQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubqueryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(MySQLParser.LPAREN, 0)

        def select_statement(self):
            return self.getTypedRuleContext(MySQLParser.Select_statementContext,0)


        def RPAREN(self):
            return self.getToken(MySQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_subquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery" ):
                listener.enterSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery" ):
                listener.exitSubquery(self)




    def subquery(self):

        localctx = MySQLParser.SubqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_subquery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 862
            self.match(MySQLParser.LPAREN)
            self.state = 863
            self.select_statement()
            self.state = 864
            self.match(MySQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(MySQLParser.Table_nameContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(MySQLParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(MySQLParser.DOT, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_table_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_spec" ):
                listener.enterTable_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_spec" ):
                listener.exitTable_spec(self)




    def table_spec(self):

        localctx = MySQLParser.Table_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_table_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 869
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
            if la_ == 1:
                self.state = 866
                self.schema_name()
                self.state = 867
                self.match(MySQLParser.DOT)


            self.state = 871
            self.table_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Displayed_columnContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_spec(self):
            return self.getTypedRuleContext(MySQLParser.Table_specContext,0)


        def DOT(self):
            return self.getToken(MySQLParser.DOT, 0)

        def ASTERISK(self):
            return self.getToken(MySQLParser.ASTERISK, 0)

        def column_spec(self):
            return self.getTypedRuleContext(MySQLParser.Column_specContext,0)


        def bit_expr(self):
            return self.getTypedRuleContext(MySQLParser.Bit_exprContext,0)


        def alias(self):
            return self.getTypedRuleContext(MySQLParser.AliasContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_displayed_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDisplayed_column" ):
                listener.enterDisplayed_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDisplayed_column" ):
                listener.exitDisplayed_column(self)




    def displayed_column(self):

        localctx = MySQLParser.Displayed_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_displayed_column)
        try:
            self.state = 882
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 873
                self.table_spec()
                self.state = 874
                self.match(MySQLParser.DOT)
                self.state = 875
                self.match(MySQLParser.ASTERISK)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 877
                self.column_spec()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 878
                self.bit_expr(0)
                self.state = 880
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
                if la_ == 1:
                    self.state = 879
                    self.alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Delete_statementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE_SYM(self):
            return self.getToken(MySQLParser.DELETE_SYM, 0)

        def delete_single_table_statement(self):
            return self.getTypedRuleContext(MySQLParser.Delete_single_table_statementContext,0)


        def delete_multiple_table_statement1(self):
            return self.getTypedRuleContext(MySQLParser.Delete_multiple_table_statement1Context,0)


        def delete_multiple_table_statement2(self):
            return self.getTypedRuleContext(MySQLParser.Delete_multiple_table_statement2Context,0)


        def LOW_PRIORITY(self):
            return self.getToken(MySQLParser.LOW_PRIORITY, 0)

        def QUICK(self):
            return self.getToken(MySQLParser.QUICK, 0)

        def IGNORE_SYM(self):
            return self.getToken(MySQLParser.IGNORE_SYM, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_delete_statements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_statements" ):
                listener.enterDelete_statements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_statements" ):
                listener.exitDelete_statements(self)




    def delete_statements(self):

        localctx = MySQLParser.Delete_statementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_delete_statements)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 884
            self.match(MySQLParser.DELETE_SYM)
            self.state = 886
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
            if la_ == 1:
                self.state = 885
                self.match(MySQLParser.LOW_PRIORITY)


            self.state = 889
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
            if la_ == 1:
                self.state = 888
                self.match(MySQLParser.QUICK)


            self.state = 892
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.state = 891
                self.match(MySQLParser.IGNORE_SYM)


            self.state = 897
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                self.state = 894
                self.delete_single_table_statement()
                pass

            elif la_ == 2:
                self.state = 895
                self.delete_multiple_table_statement1()
                pass

            elif la_ == 3:
                self.state = 896
                self.delete_multiple_table_statement2()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Delete_single_table_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(MySQLParser.FROM, 0)

        def table_spec(self):
            return self.getTypedRuleContext(MySQLParser.Table_specContext,0)


        def partition_clause(self):
            return self.getTypedRuleContext(MySQLParser.Partition_clauseContext,0)


        def where_clause(self):
            return self.getTypedRuleContext(MySQLParser.Where_clauseContext,0)


        def orderby_clause(self):
            return self.getTypedRuleContext(MySQLParser.Orderby_clauseContext,0)


        def limit_clause(self):
            return self.getTypedRuleContext(MySQLParser.Limit_clauseContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_delete_single_table_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_single_table_statement" ):
                listener.enterDelete_single_table_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_single_table_statement" ):
                listener.exitDelete_single_table_statement(self)




    def delete_single_table_statement(self):

        localctx = MySQLParser.Delete_single_table_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_delete_single_table_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 899
            self.match(MySQLParser.FROM)
            self.state = 900
            self.table_spec()
            self.state = 902
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.PARTITION_SYM:
                self.state = 901
                self.partition_clause()


            self.state = 905
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.WHERE:
                self.state = 904
                self.where_clause()


            self.state = 908
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.ORDER_SYM:
                self.state = 907
                self.orderby_clause()


            self.state = 911
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.LIMIT or _la==MySQLParser.INTEGER_NUM:
                self.state = 910
                self.limit_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Delete_multiple_table_statement1Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.Table_specContext)
            else:
                return self.getTypedRuleContext(MySQLParser.Table_specContext,i)


        def FROM(self):
            return self.getToken(MySQLParser.FROM, 0)

        def table_references(self):
            return self.getTypedRuleContext(MySQLParser.Table_referencesContext,0)


        def ALL_FIELDS(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.ALL_FIELDS)
            else:
                return self.getToken(MySQLParser.ALL_FIELDS, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA)
            else:
                return self.getToken(MySQLParser.COMMA, i)

        def where_clause(self):
            return self.getTypedRuleContext(MySQLParser.Where_clauseContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_delete_multiple_table_statement1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_multiple_table_statement1" ):
                listener.enterDelete_multiple_table_statement1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_multiple_table_statement1" ):
                listener.exitDelete_multiple_table_statement1(self)




    def delete_multiple_table_statement1(self):

        localctx = MySQLParser.Delete_multiple_table_statement1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_delete_multiple_table_statement1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 913
            self.table_spec()
            self.state = 915
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.ALL_FIELDS:
                self.state = 914
                self.match(MySQLParser.ALL_FIELDS)


            self.state = 924
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySQLParser.COMMA:
                self.state = 917
                self.match(MySQLParser.COMMA)
                self.state = 918
                self.table_spec()
                self.state = 920
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.ALL_FIELDS:
                    self.state = 919
                    self.match(MySQLParser.ALL_FIELDS)


                self.state = 926
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 927
            self.match(MySQLParser.FROM)
            self.state = 928
            self.table_references()
            self.state = 930
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.WHERE:
                self.state = 929
                self.where_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Delete_multiple_table_statement2Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(MySQLParser.FROM, 0)

        def table_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.Table_specContext)
            else:
                return self.getTypedRuleContext(MySQLParser.Table_specContext,i)


        def USING_SYM(self):
            return self.getToken(MySQLParser.USING_SYM, 0)

        def table_references(self):
            return self.getTypedRuleContext(MySQLParser.Table_referencesContext,0)


        def ALL_FIELDS(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.ALL_FIELDS)
            else:
                return self.getToken(MySQLParser.ALL_FIELDS, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA)
            else:
                return self.getToken(MySQLParser.COMMA, i)

        def where_clause(self):
            return self.getTypedRuleContext(MySQLParser.Where_clauseContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_delete_multiple_table_statement2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_multiple_table_statement2" ):
                listener.enterDelete_multiple_table_statement2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_multiple_table_statement2" ):
                listener.exitDelete_multiple_table_statement2(self)




    def delete_multiple_table_statement2(self):

        localctx = MySQLParser.Delete_multiple_table_statement2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_delete_multiple_table_statement2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 932
            self.match(MySQLParser.FROM)
            self.state = 933
            self.table_spec()
            self.state = 935
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.ALL_FIELDS:
                self.state = 934
                self.match(MySQLParser.ALL_FIELDS)


            self.state = 944
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySQLParser.COMMA:
                self.state = 937
                self.match(MySQLParser.COMMA)
                self.state = 938
                self.table_spec()
                self.state = 940
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySQLParser.ALL_FIELDS:
                    self.state = 939
                    self.match(MySQLParser.ALL_FIELDS)


                self.state = 946
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 947
            self.match(MySQLParser.USING_SYM)
            self.state = 948
            self.table_references()
            self.state = 950
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.WHERE:
                self.state = 949
                self.where_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Insert_statementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insert_statement1(self):
            return self.getTypedRuleContext(MySQLParser.Insert_statement1Context,0)


        def insert_statement2(self):
            return self.getTypedRuleContext(MySQLParser.Insert_statement2Context,0)


        def insert_statement3(self):
            return self.getTypedRuleContext(MySQLParser.Insert_statement3Context,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_insert_statements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_statements" ):
                listener.enterInsert_statements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_statements" ):
                listener.exitInsert_statements(self)




    def insert_statements(self):

        localctx = MySQLParser.Insert_statementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_insert_statements)
        try:
            self.state = 955
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 952
                self.insert_statement1()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 953
                self.insert_statement2()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 954
                self.insert_statement3()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Insert_headerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSERT(self):
            return self.getToken(MySQLParser.INSERT, 0)

        def table_spec(self):
            return self.getTypedRuleContext(MySQLParser.Table_specContext,0)


        def IGNORE_SYM(self):
            return self.getToken(MySQLParser.IGNORE_SYM, 0)

        def INTO(self):
            return self.getToken(MySQLParser.INTO, 0)

        def partition_clause(self):
            return self.getTypedRuleContext(MySQLParser.Partition_clauseContext,0)


        def LOW_PRIORITY(self):
            return self.getToken(MySQLParser.LOW_PRIORITY, 0)

        def HIGH_PRIORITY(self):
            return self.getToken(MySQLParser.HIGH_PRIORITY, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_insert_header

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_header" ):
                listener.enterInsert_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_header" ):
                listener.exitInsert_header(self)




    def insert_header(self):

        localctx = MySQLParser.Insert_headerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_insert_header)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 957
            self.match(MySQLParser.INSERT)
            self.state = 959
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.state = 958
                _la = self._input.LA(1)
                if not(_la==MySQLParser.HIGH_PRIORITY or _la==MySQLParser.LOW_PRIORITY):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 962
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
            if la_ == 1:
                self.state = 961
                self.match(MySQLParser.IGNORE_SYM)


            self.state = 965
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
            if la_ == 1:
                self.state = 964
                self.match(MySQLParser.INTO)


            self.state = 967
            self.table_spec()
            self.state = 969
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.PARTITION_SYM:
                self.state = 968
                self.partition_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Insert_subfixContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(MySQLParser.ON, 0)

        def DUPLICATE_SYM(self):
            return self.getToken(MySQLParser.DUPLICATE_SYM, 0)

        def KEY_SYM(self):
            return self.getToken(MySQLParser.KEY_SYM, 0)

        def UPDATE(self):
            return self.getToken(MySQLParser.UPDATE, 0)

        def column_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.Column_specContext)
            else:
                return self.getTypedRuleContext(MySQLParser.Column_specContext,i)


        def EQ_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.EQ_SYM)
            else:
                return self.getToken(MySQLParser.EQ_SYM, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MySQLParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA)
            else:
                return self.getToken(MySQLParser.COMMA, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_insert_subfix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_subfix" ):
                listener.enterInsert_subfix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_subfix" ):
                listener.exitInsert_subfix(self)




    def insert_subfix(self):

        localctx = MySQLParser.Insert_subfixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_insert_subfix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 971
            self.match(MySQLParser.ON)
            self.state = 972
            self.match(MySQLParser.DUPLICATE_SYM)
            self.state = 973
            self.match(MySQLParser.KEY_SYM)
            self.state = 974
            self.match(MySQLParser.UPDATE)
            self.state = 975
            self.column_spec()
            self.state = 976
            self.match(MySQLParser.EQ_SYM)
            self.state = 977
            self.expression(0)
            self.state = 985
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySQLParser.COMMA:
                self.state = 978
                self.match(MySQLParser.COMMA)
                self.state = 979
                self.column_spec()
                self.state = 980
                self.match(MySQLParser.EQ_SYM)
                self.state = 981
                self.expression(0)
                self.state = 987
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Insert_statement1Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insert_header(self):
            return self.getTypedRuleContext(MySQLParser.Insert_headerContext,0)


        def value_list_clause(self):
            return self.getTypedRuleContext(MySQLParser.Value_list_clauseContext,0)


        def column_list(self):
            return self.getTypedRuleContext(MySQLParser.Column_listContext,0)


        def insert_subfix(self):
            return self.getTypedRuleContext(MySQLParser.Insert_subfixContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_insert_statement1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_statement1" ):
                listener.enterInsert_statement1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_statement1" ):
                listener.exitInsert_statement1(self)




    def insert_statement1(self):

        localctx = MySQLParser.Insert_statement1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_insert_statement1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 988
            self.insert_header()
            self.state = 990
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.LPAREN:
                self.state = 989
                self.column_list()


            self.state = 992
            self.value_list_clause()
            self.state = 994
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.ON:
                self.state = 993
                self.insert_subfix()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Value_list_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_value_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.Column_value_listContext)
            else:
                return self.getTypedRuleContext(MySQLParser.Column_value_listContext,i)


        def VALUES(self):
            return self.getToken(MySQLParser.VALUES, 0)

        def VALUE_SYM(self):
            return self.getToken(MySQLParser.VALUE_SYM, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA)
            else:
                return self.getToken(MySQLParser.COMMA, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_value_list_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_list_clause" ):
                listener.enterValue_list_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_list_clause" ):
                listener.exitValue_list_clause(self)




    def value_list_clause(self):

        localctx = MySQLParser.Value_list_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_value_list_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 996
            _la = self._input.LA(1)
            if not(_la==MySQLParser.VALUE_SYM or _la==MySQLParser.VALUES):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 997
            self.column_value_list()
            self.state = 1002
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySQLParser.COMMA:
                self.state = 998
                self.match(MySQLParser.COMMA)
                self.state = 999
                self.column_value_list()
                self.state = 1004
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_value_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(MySQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(MySQLParser.RPAREN, 0)

        def bit_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.Bit_exprContext)
            else:
                return self.getTypedRuleContext(MySQLParser.Bit_exprContext,i)


        def DEFAULT(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.DEFAULT)
            else:
                return self.getToken(MySQLParser.DEFAULT, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA)
            else:
                return self.getToken(MySQLParser.COMMA, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_column_value_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_value_list" ):
                listener.enterColumn_value_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_value_list" ):
                listener.exitColumn_value_list(self)




    def column_value_list(self):

        localctx = MySQLParser.Column_value_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_column_value_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1005
            self.match(MySQLParser.LPAREN)
            self.state = 1008
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
            if la_ == 1:
                self.state = 1006
                self.bit_expr(0)
                pass

            elif la_ == 2:
                self.state = 1007
                self.match(MySQLParser.DEFAULT)
                pass


            self.state = 1017
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySQLParser.COMMA:
                self.state = 1010
                self.match(MySQLParser.COMMA)
                self.state = 1013
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
                if la_ == 1:
                    self.state = 1011
                    self.bit_expr(0)
                    pass

                elif la_ == 2:
                    self.state = 1012
                    self.match(MySQLParser.DEFAULT)
                    pass


                self.state = 1019
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1020
            self.match(MySQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Insert_statement2Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insert_header(self):
            return self.getTypedRuleContext(MySQLParser.Insert_headerContext,0)


        def set_columns_clause(self):
            return self.getTypedRuleContext(MySQLParser.Set_columns_clauseContext,0)


        def insert_subfix(self):
            return self.getTypedRuleContext(MySQLParser.Insert_subfixContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_insert_statement2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_statement2" ):
                listener.enterInsert_statement2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_statement2" ):
                listener.exitInsert_statement2(self)




    def insert_statement2(self):

        localctx = MySQLParser.Insert_statement2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_insert_statement2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1022
            self.insert_header()
            self.state = 1023
            self.set_columns_clause()
            self.state = 1025
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.ON:
                self.state = 1024
                self.insert_subfix()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Set_columns_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET_SYM(self):
            return self.getToken(MySQLParser.SET_SYM, 0)

        def set_column_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySQLParser.Set_column_clauseContext)
            else:
                return self.getTypedRuleContext(MySQLParser.Set_column_clauseContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySQLParser.COMMA)
            else:
                return self.getToken(MySQLParser.COMMA, i)

        def getRuleIndex(self):
            return MySQLParser.RULE_set_columns_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_columns_clause" ):
                listener.enterSet_columns_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_columns_clause" ):
                listener.exitSet_columns_clause(self)




    def set_columns_clause(self):

        localctx = MySQLParser.Set_columns_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_set_columns_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1027
            self.match(MySQLParser.SET_SYM)
            self.state = 1028
            self.set_column_clause()
            self.state = 1033
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySQLParser.COMMA:
                self.state = 1029
                self.match(MySQLParser.COMMA)
                self.state = 1030
                self.set_column_clause()
                self.state = 1035
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Set_column_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_spec(self):
            return self.getTypedRuleContext(MySQLParser.Column_specContext,0)


        def EQ_SYM(self):
            return self.getToken(MySQLParser.EQ_SYM, 0)

        def expression(self):
            return self.getTypedRuleContext(MySQLParser.ExpressionContext,0)


        def DEFAULT(self):
            return self.getToken(MySQLParser.DEFAULT, 0)

        def getRuleIndex(self):
            return MySQLParser.RULE_set_column_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_column_clause" ):
                listener.enterSet_column_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_column_clause" ):
                listener.exitSet_column_clause(self)




    def set_column_clause(self):

        localctx = MySQLParser.Set_column_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_set_column_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1036
            self.column_spec()
            self.state = 1037
            self.match(MySQLParser.EQ_SYM)
            self.state = 1040
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
            if la_ == 1:
                self.state = 1038
                self.expression(0)
                pass

            elif la_ == 2:
                self.state = 1039
                self.match(MySQLParser.DEFAULT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Insert_statement3Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insert_header(self):
            return self.getTypedRuleContext(MySQLParser.Insert_headerContext,0)


        def select_expression(self):
            return self.getTypedRuleContext(MySQLParser.Select_expressionContext,0)


        def column_list(self):
            return self.getTypedRuleContext(MySQLParser.Column_listContext,0)


        def insert_subfix(self):
            return self.getTypedRuleContext(MySQLParser.Insert_subfixContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_insert_statement3

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_statement3" ):
                listener.enterInsert_statement3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_statement3" ):
                listener.exitInsert_statement3(self)




    def insert_statement3(self):

        localctx = MySQLParser.Insert_statement3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_insert_statement3)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1042
            self.insert_header()
            self.state = 1044
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.LPAREN:
                self.state = 1043
                self.column_list()


            self.state = 1046
            self.select_expression()
            self.state = 1048
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.ON:
                self.state = 1047
                self.insert_subfix()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Update_statementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_table_update_statement(self):
            return self.getTypedRuleContext(MySQLParser.Single_table_update_statementContext,0)


        def multiple_table_update_statement(self):
            return self.getTypedRuleContext(MySQLParser.Multiple_table_update_statementContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_update_statements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_statements" ):
                listener.enterUpdate_statements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_statements" ):
                listener.exitUpdate_statements(self)




    def update_statements(self):

        localctx = MySQLParser.Update_statementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_update_statements)
        try:
            self.state = 1052
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1050
                self.single_table_update_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1051
                self.multiple_table_update_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Single_table_update_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE(self):
            return self.getToken(MySQLParser.UPDATE, 0)

        def table_reference(self):
            return self.getTypedRuleContext(MySQLParser.Table_referenceContext,0)


        def set_columns_clause(self):
            return self.getTypedRuleContext(MySQLParser.Set_columns_clauseContext,0)


        def LOW_PRIORITY(self):
            return self.getToken(MySQLParser.LOW_PRIORITY, 0)

        def IGNORE_SYM(self):
            return self.getToken(MySQLParser.IGNORE_SYM, 0)

        def where_clause(self):
            return self.getTypedRuleContext(MySQLParser.Where_clauseContext,0)


        def orderby_clause(self):
            return self.getTypedRuleContext(MySQLParser.Orderby_clauseContext,0)


        def limit_clause(self):
            return self.getTypedRuleContext(MySQLParser.Limit_clauseContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_single_table_update_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_table_update_statement" ):
                listener.enterSingle_table_update_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_table_update_statement" ):
                listener.exitSingle_table_update_statement(self)




    def single_table_update_statement(self):

        localctx = MySQLParser.Single_table_update_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_single_table_update_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1054
            self.match(MySQLParser.UPDATE)
            self.state = 1056
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,143,self._ctx)
            if la_ == 1:
                self.state = 1055
                self.match(MySQLParser.LOW_PRIORITY)


            self.state = 1059
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
            if la_ == 1:
                self.state = 1058
                self.match(MySQLParser.IGNORE_SYM)


            self.state = 1061
            self.table_reference(0)
            self.state = 1062
            self.set_columns_clause()
            self.state = 1064
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.WHERE:
                self.state = 1063
                self.where_clause()


            self.state = 1067
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.ORDER_SYM:
                self.state = 1066
                self.orderby_clause()


            self.state = 1070
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.LIMIT or _la==MySQLParser.INTEGER_NUM:
                self.state = 1069
                self.limit_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Multiple_table_update_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE(self):
            return self.getToken(MySQLParser.UPDATE, 0)

        def table_references(self):
            return self.getTypedRuleContext(MySQLParser.Table_referencesContext,0)


        def set_columns_clause(self):
            return self.getTypedRuleContext(MySQLParser.Set_columns_clauseContext,0)


        def LOW_PRIORITY(self):
            return self.getToken(MySQLParser.LOW_PRIORITY, 0)

        def IGNORE_SYM(self):
            return self.getToken(MySQLParser.IGNORE_SYM, 0)

        def where_clause(self):
            return self.getTypedRuleContext(MySQLParser.Where_clauseContext,0)


        def getRuleIndex(self):
            return MySQLParser.RULE_multiple_table_update_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiple_table_update_statement" ):
                listener.enterMultiple_table_update_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiple_table_update_statement" ):
                listener.exitMultiple_table_update_statement(self)




    def multiple_table_update_statement(self):

        localctx = MySQLParser.Multiple_table_update_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_multiple_table_update_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1072
            self.match(MySQLParser.UPDATE)
            self.state = 1074
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
            if la_ == 1:
                self.state = 1073
                self.match(MySQLParser.LOW_PRIORITY)


            self.state = 1077
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
            if la_ == 1:
                self.state = 1076
                self.match(MySQLParser.IGNORE_SYM)


            self.state = 1079
            self.table_references()
            self.state = 1080
            self.set_columns_clause()
            self.state = 1082
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySQLParser.WHERE:
                self.state = 1081
                self.where_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[24] = self.expression_sempred
        self._predicates[27] = self.bit_expr_sempred
        self._predicates[39] = self.table_reference_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 3)
         

    def bit_expr_sempred(self, localctx:Bit_exprContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 8)
         

    def table_reference_sempred(self, localctx:Table_referenceContext, predIndex:int):
            if predIndex == 9:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 1)
         




